"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@anthropic-ai";
exports.ids = ["vendor-chunks/@anthropic-ai"];
exports.modules = {

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/_vendor/partial-json-parser/parser.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/_vendor/partial-json-parser/parser.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   partialParse: () => (/* binding */ partialParse)\n/* harmony export */ });\nconst tokenize = (input)=>{\n    let current = 0;\n    let tokens = [];\n    while(current < input.length){\n        let char = input[current];\n        if (char === \"\\\\\") {\n            current++;\n            continue;\n        }\n        if (char === \"{\") {\n            tokens.push({\n                type: \"brace\",\n                value: \"{\"\n            });\n            current++;\n            continue;\n        }\n        if (char === \"}\") {\n            tokens.push({\n                type: \"brace\",\n                value: \"}\"\n            });\n            current++;\n            continue;\n        }\n        if (char === \"[\") {\n            tokens.push({\n                type: \"paren\",\n                value: \"[\"\n            });\n            current++;\n            continue;\n        }\n        if (char === \"]\") {\n            tokens.push({\n                type: \"paren\",\n                value: \"]\"\n            });\n            current++;\n            continue;\n        }\n        if (char === \":\") {\n            tokens.push({\n                type: \"separator\",\n                value: \":\"\n            });\n            current++;\n            continue;\n        }\n        if (char === \",\") {\n            tokens.push({\n                type: \"delimiter\",\n                value: \",\"\n            });\n            current++;\n            continue;\n        }\n        if (char === '\"') {\n            let value = \"\";\n            let danglingQuote = false;\n            char = input[++current];\n            while(char !== '\"'){\n                if (current === input.length) {\n                    danglingQuote = true;\n                    break;\n                }\n                if (char === \"\\\\\") {\n                    current++;\n                    if (current === input.length) {\n                        danglingQuote = true;\n                        break;\n                    }\n                    value += char + input[current];\n                    char = input[++current];\n                } else {\n                    value += char;\n                    char = input[++current];\n                }\n            }\n            char = input[++current];\n            if (!danglingQuote) {\n                tokens.push({\n                    type: \"string\",\n                    value\n                });\n            }\n            continue;\n        }\n        let WHITESPACE = /\\s/;\n        if (char && WHITESPACE.test(char)) {\n            current++;\n            continue;\n        }\n        let NUMBERS = /[0-9]/;\n        if (char && NUMBERS.test(char) || char === \"-\" || char === \".\") {\n            let value = \"\";\n            if (char === \"-\") {\n                value += char;\n                char = input[++current];\n            }\n            while(char && NUMBERS.test(char) || char === \".\"){\n                value += char;\n                char = input[++current];\n            }\n            tokens.push({\n                type: \"number\",\n                value\n            });\n            continue;\n        }\n        let LETTERS = /[a-z]/i;\n        if (char && LETTERS.test(char)) {\n            let value = \"\";\n            while(char && LETTERS.test(char)){\n                if (current === input.length) {\n                    break;\n                }\n                value += char;\n                char = input[++current];\n            }\n            if (value == \"true\" || value == \"false\" || value === \"null\") {\n                tokens.push({\n                    type: \"name\",\n                    value\n                });\n            } else {\n                // unknown token, e.g. `nul` which isn't quite `null`\n                current++;\n                continue;\n            }\n            continue;\n        }\n        current++;\n    }\n    return tokens;\n}, strip = (tokens)=>{\n    if (tokens.length === 0) {\n        return tokens;\n    }\n    let lastToken = tokens[tokens.length - 1];\n    switch(lastToken.type){\n        case \"separator\":\n            tokens = tokens.slice(0, tokens.length - 1);\n            return strip(tokens);\n            break;\n        case \"number\":\n            let lastCharacterOfLastToken = lastToken.value[lastToken.value.length - 1];\n            if (lastCharacterOfLastToken === \".\" || lastCharacterOfLastToken === \"-\") {\n                tokens = tokens.slice(0, tokens.length - 1);\n                return strip(tokens);\n            }\n        case \"string\":\n            let tokenBeforeTheLastToken = tokens[tokens.length - 2];\n            if (tokenBeforeTheLastToken?.type === \"delimiter\") {\n                tokens = tokens.slice(0, tokens.length - 1);\n                return strip(tokens);\n            } else if (tokenBeforeTheLastToken?.type === \"brace\" && tokenBeforeTheLastToken.value === \"{\") {\n                tokens = tokens.slice(0, tokens.length - 1);\n                return strip(tokens);\n            }\n            break;\n        case \"delimiter\":\n            tokens = tokens.slice(0, tokens.length - 1);\n            return strip(tokens);\n            break;\n    }\n    return tokens;\n}, unstrip = (tokens)=>{\n    let tail = [];\n    tokens.map((token)=>{\n        if (token.type === \"brace\") {\n            if (token.value === \"{\") {\n                tail.push(\"}\");\n            } else {\n                tail.splice(tail.lastIndexOf(\"}\"), 1);\n            }\n        }\n        if (token.type === \"paren\") {\n            if (token.value === \"[\") {\n                tail.push(\"]\");\n            } else {\n                tail.splice(tail.lastIndexOf(\"]\"), 1);\n            }\n        }\n    });\n    if (tail.length > 0) {\n        tail.reverse().map((item)=>{\n            if (item === \"}\") {\n                tokens.push({\n                    type: \"brace\",\n                    value: \"}\"\n                });\n            } else if (item === \"]\") {\n                tokens.push({\n                    type: \"paren\",\n                    value: \"]\"\n                });\n            }\n        });\n    }\n    return tokens;\n}, generate = (tokens)=>{\n    let output = \"\";\n    tokens.map((token)=>{\n        switch(token.type){\n            case \"string\":\n                output += '\"' + token.value + '\"';\n                break;\n            default:\n                output += token.value;\n                break;\n        }\n    });\n    return output;\n}, partialParse = (input)=>JSON.parse(generate(unstrip(strip(tokenize(input)))));\n //# sourceMappingURL=parser.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/_vendor/partial-json-parser/parser.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/client.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/client.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AI_PROMPT: () => (/* binding */ AI_PROMPT),\n/* harmony export */   Anthropic: () => (/* binding */ Anthropic),\n/* harmony export */   BaseAnthropic: () => (/* binding */ BaseAnthropic),\n/* harmony export */   HUMAN_PROMPT: () => (/* binding */ HUMAN_PROMPT)\n/* harmony export */ });\n/* harmony import */ var _internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/tslib.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/tslib.mjs\");\n/* harmony import */ var _internal_utils_uuid_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/utils/uuid.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/uuid.mjs\");\n/* harmony import */ var _internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/utils/values.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/values.mjs\");\n/* harmony import */ var _internal_utils_sleep_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/utils/sleep.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/sleep.mjs\");\n/* harmony import */ var _internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/utils/log.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/log.mjs\");\n/* harmony import */ var _internal_errors_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/errors.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/errors.mjs\");\n/* harmony import */ var _internal_detect_platform_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal/detect-platform.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/detect-platform.mjs\");\n/* harmony import */ var _internal_shims_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./internal/shims.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/shims.mjs\");\n/* harmony import */ var _internal_request_options_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./internal/request-options.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/request-options.mjs\");\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./version.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/version.mjs\");\n/* harmony import */ var _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./core/error.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/error.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./core/pagination.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/pagination.mjs\");\n/* harmony import */ var _core_uploads_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./core/uploads.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/uploads.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./resources/index.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/resources/index.mjs\");\n/* harmony import */ var _core_api_promise_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./core/api-promise.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/api-promise.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./internal/headers.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/headers.mjs\");\n/* harmony import */ var _resources_completions_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./resources/completions.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/resources/completions.mjs\");\n/* harmony import */ var _resources_models_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./resources/models.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/resources/models.mjs\");\n/* harmony import */ var _internal_utils_env_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./internal/utils/env.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/env.mjs\");\n/* harmony import */ var _resources_beta_beta_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./resources/beta/beta.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/resources/beta/beta.mjs\");\n/* harmony import */ var _resources_messages_messages_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./resources/messages/messages.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/resources/messages/messages.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _a, _BaseAnthropic_encoder;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass BaseAnthropic {\n    /**\n     * API Client for interfacing with the Anthropic API.\n     *\n     * @param {string | null | undefined} [opts.apiKey=process.env['ANTHROPIC_API_KEY'] ?? null]\n     * @param {string | null | undefined} [opts.authToken=process.env['ANTHROPIC_AUTH_TOKEN'] ?? null]\n     * @param {string} [opts.baseURL=process.env['ANTHROPIC_BASE_URL'] ?? https://api.anthropic.com] - Override the default base URL for the API.\n     * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n     * @param {MergedRequestInit} [opts.fetchOptions] - Additional `RequestInit` options to be passed to `fetch` calls.\n     * @param {Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n     * @param {HeadersLike} opts.defaultHeaders - Default headers to include with every request to the API.\n     * @param {Record<string, string | undefined>} opts.defaultQuery - Default query parameters to include with every request to the API.\n     * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n     */ constructor({ baseURL = (0,_internal_utils_env_mjs__WEBPACK_IMPORTED_MODULE_18__.readEnv)(\"ANTHROPIC_BASE_URL\"), apiKey = (0,_internal_utils_env_mjs__WEBPACK_IMPORTED_MODULE_18__.readEnv)(\"ANTHROPIC_API_KEY\") ?? null, authToken = (0,_internal_utils_env_mjs__WEBPACK_IMPORTED_MODULE_18__.readEnv)(\"ANTHROPIC_AUTH_TOKEN\") ?? null, ...opts } = {}){\n        _BaseAnthropic_encoder.set(this, void 0);\n        const options = {\n            apiKey,\n            authToken,\n            ...opts,\n            baseURL: baseURL || `https://api.anthropic.com`\n        };\n        if (!options.dangerouslyAllowBrowser && (0,_internal_detect_platform_mjs__WEBPACK_IMPORTED_MODULE_6__.isRunningInBrowser)()) {\n            throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.AnthropicError(\"It looks like you're running in a browser-like environment.\\n\\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\\nIf you understand the risks and have appropriate mitigations in place,\\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\\n\\nnew Anthropic({ apiKey, dangerouslyAllowBrowser: true });\\n\");\n        }\n        this.baseURL = options.baseURL;\n        this.timeout = options.timeout ?? Anthropic.DEFAULT_TIMEOUT /* 10 minutes */ ;\n        this.logger = options.logger ?? console;\n        const defaultLogLevel = \"warn\";\n        // Set default logLevel early so that we can log a warning in parseLogLevel.\n        this.logLevel = defaultLogLevel;\n        this.logLevel = (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_4__.parseLogLevel)(options.logLevel, \"ClientOptions.logLevel\", this) ?? (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_4__.parseLogLevel)((0,_internal_utils_env_mjs__WEBPACK_IMPORTED_MODULE_18__.readEnv)(\"ANTHROPIC_LOG\"), \"process.env['ANTHROPIC_LOG']\", this) ?? defaultLogLevel;\n        this.fetchOptions = options.fetchOptions;\n        this.maxRetries = options.maxRetries ?? 2;\n        this.fetch = options.fetch ?? _internal_shims_mjs__WEBPACK_IMPORTED_MODULE_7__.getDefaultFetch();\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BaseAnthropic_encoder, _internal_request_options_mjs__WEBPACK_IMPORTED_MODULE_8__.FallbackEncoder, \"f\");\n        this._options = options;\n        this.apiKey = apiKey;\n        this.authToken = authToken;\n    }\n    /**\n     * Create a new client instance re-using the same options given to the current client with optional overriding.\n     */ withOptions(options) {\n        return new this.constructor({\n            ...this._options,\n            baseURL: this.baseURL,\n            maxRetries: this.maxRetries,\n            timeout: this.timeout,\n            logger: this.logger,\n            logLevel: this.logLevel,\n            fetchOptions: this.fetchOptions,\n            apiKey: this.apiKey,\n            authToken: this.authToken,\n            ...options\n        });\n    }\n    defaultQuery() {\n        return this._options.defaultQuery;\n    }\n    validateHeaders({ values, nulls }) {\n        if (this.apiKey && values.get(\"x-api-key\")) {\n            return;\n        }\n        if (nulls.has(\"x-api-key\")) {\n            return;\n        }\n        if (this.authToken && values.get(\"authorization\")) {\n            return;\n        }\n        if (nulls.has(\"authorization\")) {\n            return;\n        }\n        throw new Error('Could not resolve authentication method. Expected either apiKey or authToken to be set. Or for one of the \"X-Api-Key\" or \"Authorization\" headers to be explicitly omitted');\n    }\n    authHeaders(opts) {\n        return (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_15__.buildHeaders)([\n            this.apiKeyAuth(opts),\n            this.bearerAuth(opts)\n        ]);\n    }\n    apiKeyAuth(opts) {\n        if (this.apiKey == null) {\n            return undefined;\n        }\n        return (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_15__.buildHeaders)([\n            {\n                \"X-Api-Key\": this.apiKey\n            }\n        ]);\n    }\n    bearerAuth(opts) {\n        if (this.authToken == null) {\n            return undefined;\n        }\n        return (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_15__.buildHeaders)([\n            {\n                Authorization: `Bearer ${this.authToken}`\n            }\n        ]);\n    }\n    /**\n     * Basic re-implementation of `qs.stringify` for primitive types.\n     */ stringifyQuery(query) {\n        return Object.entries(query).filter(([_, value])=>typeof value !== \"undefined\").map(([key, value])=>{\n            if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n                return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n            }\n            if (value === null) {\n                return `${encodeURIComponent(key)}=`;\n            }\n            throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.AnthropicError(`Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`);\n        }).join(\"&\");\n    }\n    getUserAgent() {\n        return `${this.constructor.name}/JS ${_version_mjs__WEBPACK_IMPORTED_MODULE_9__.VERSION}`;\n    }\n    defaultIdempotencyKey() {\n        return `stainless-node-retry-${(0,_internal_utils_uuid_mjs__WEBPACK_IMPORTED_MODULE_1__.uuid4)()}`;\n    }\n    makeStatusError(status, error, message, headers) {\n        return _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.APIError.generate(status, error, message, headers);\n    }\n    buildURL(path, query) {\n        const url = (0,_internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__.isAbsoluteURL)(path) ? new URL(path) : new URL(this.baseURL + (this.baseURL.endsWith(\"/\") && path.startsWith(\"/\") ? path.slice(1) : path));\n        const defaultQuery = this.defaultQuery();\n        if (!(0,_internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__.isEmptyObj)(defaultQuery)) {\n            query = {\n                ...defaultQuery,\n                ...query\n            };\n        }\n        if (typeof query === \"object\" && query && !Array.isArray(query)) {\n            url.search = this.stringifyQuery(query);\n        }\n        return url.toString();\n    }\n    _calculateNonstreamingTimeout(maxTokens) {\n        const defaultTimeout = 10 * 60;\n        const expectedTimeout = 60 * 60 * maxTokens / 128000;\n        if (expectedTimeout > defaultTimeout) {\n            throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.AnthropicError(\"Streaming is strongly recommended for operations that may take longer than 10 minutes. \" + \"See https://github.com/anthropics/anthropic-sdk-typescript#streaming-responses for more details\");\n        }\n        return defaultTimeout * 1000;\n    }\n    /**\n     * Used as a callback for mutating the given `FinalRequestOptions` object.\n     */ async prepareOptions(options) {}\n    /**\n     * Used as a callback for mutating the given `RequestInit` object.\n     *\n     * This is useful for cases where you want to add certain headers based off of\n     * the request properties, e.g. `method` or `url`.\n     */ async prepareRequest(request, { url, options }) {}\n    get(path, opts) {\n        return this.methodRequest(\"get\", path, opts);\n    }\n    post(path, opts) {\n        return this.methodRequest(\"post\", path, opts);\n    }\n    patch(path, opts) {\n        return this.methodRequest(\"patch\", path, opts);\n    }\n    put(path, opts) {\n        return this.methodRequest(\"put\", path, opts);\n    }\n    delete(path, opts) {\n        return this.methodRequest(\"delete\", path, opts);\n    }\n    methodRequest(method, path, opts) {\n        return this.request(Promise.resolve(opts).then((opts)=>{\n            return {\n                method,\n                path,\n                ...opts\n            };\n        }));\n    }\n    request(options, remainingRetries = null) {\n        return new _core_api_promise_mjs__WEBPACK_IMPORTED_MODULE_14__.APIPromise(this, this.makeRequest(options, remainingRetries, undefined));\n    }\n    async makeRequest(optionsInput, retriesRemaining, retryOfRequestLogID) {\n        const options = await optionsInput;\n        const maxRetries = options.maxRetries ?? this.maxRetries;\n        if (retriesRemaining == null) {\n            retriesRemaining = maxRetries;\n        }\n        await this.prepareOptions(options);\n        const { req, url, timeout } = this.buildRequest(options, {\n            retryCount: maxRetries - retriesRemaining\n        });\n        await this.prepareRequest(req, {\n            url,\n            options\n        });\n        /** Not an API request ID, just for correlating local log entries. */ const requestLogID = \"log_\" + (Math.random() * (1 << 24) | 0).toString(16).padStart(6, \"0\");\n        const retryLogStr = retryOfRequestLogID === undefined ? \"\" : `, retryOf: ${retryOfRequestLogID}`;\n        const startTime = Date.now();\n        (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_4__.loggerFor)(this).debug(`[${requestLogID}] sending request`, (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_4__.formatRequestDetails)({\n            retryOfRequestLogID,\n            method: options.method,\n            url,\n            options,\n            headers: req.headers\n        }));\n        if (options.signal?.aborted) {\n            throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.APIUserAbortError();\n        }\n        const controller = new AbortController();\n        const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(_internal_errors_mjs__WEBPACK_IMPORTED_MODULE_5__.castToError);\n        const headersTime = Date.now();\n        if (response instanceof Error) {\n            const retryMessage = `retrying, ${retriesRemaining} attempts remaining`;\n            if (options.signal?.aborted) {\n                throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.APIUserAbortError();\n            }\n            // detect native connection timeout errors\n            // deno throws \"TypeError: error sending request for url (https://example/): client error (Connect): tcp connect error: Operation timed out (os error 60): Operation timed out (os error 60)\"\n            // undici throws \"TypeError: fetch failed\" with cause \"ConnectTimeoutError: Connect Timeout Error (attempted address: example:443, timeout: 1ms)\"\n            // others do not provide enough information to distinguish timeouts from other connection errors\n            const isTimeout = (0,_internal_errors_mjs__WEBPACK_IMPORTED_MODULE_5__.isAbortError)(response) || /timed? ?out/i.test(String(response) + (\"cause\" in response ? String(response.cause) : \"\"));\n            if (retriesRemaining) {\n                (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_4__.loggerFor)(this).info(`[${requestLogID}] connection ${isTimeout ? \"timed out\" : \"failed\"} - ${retryMessage}`);\n                (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_4__.loggerFor)(this).debug(`[${requestLogID}] connection ${isTimeout ? \"timed out\" : \"failed\"} (${retryMessage})`, (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_4__.formatRequestDetails)({\n                    retryOfRequestLogID,\n                    url,\n                    durationMs: headersTime - startTime,\n                    message: response.message\n                }));\n                return this.retryRequest(options, retriesRemaining, retryOfRequestLogID ?? requestLogID);\n            }\n            (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_4__.loggerFor)(this).info(`[${requestLogID}] connection ${isTimeout ? \"timed out\" : \"failed\"} - error; no more retries left`);\n            (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_4__.loggerFor)(this).debug(`[${requestLogID}] connection ${isTimeout ? \"timed out\" : \"failed\"} (error; no more retries left)`, (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_4__.formatRequestDetails)({\n                retryOfRequestLogID,\n                url,\n                durationMs: headersTime - startTime,\n                message: response.message\n            }));\n            if (isTimeout) {\n                throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.APIConnectionTimeoutError();\n            }\n            throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.APIConnectionError({\n                cause: response\n            });\n        }\n        const specialHeaders = [\n            ...response.headers.entries()\n        ].filter(([name])=>name === \"request-id\").map(([name, value])=>\", \" + name + \": \" + JSON.stringify(value)).join(\"\");\n        const responseInfo = `[${requestLogID}${retryLogStr}${specialHeaders}] ${req.method} ${url} ${response.ok ? \"succeeded\" : \"failed\"} with status ${response.status} in ${headersTime - startTime}ms`;\n        if (!response.ok) {\n            const shouldRetry = this.shouldRetry(response);\n            if (retriesRemaining && shouldRetry) {\n                const retryMessage = `retrying, ${retriesRemaining} attempts remaining`;\n                // We don't need the body of this response.\n                await _internal_shims_mjs__WEBPACK_IMPORTED_MODULE_7__.CancelReadableStream(response.body);\n                (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_4__.loggerFor)(this).info(`${responseInfo} - ${retryMessage}`);\n                (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_4__.loggerFor)(this).debug(`[${requestLogID}] response error (${retryMessage})`, (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_4__.formatRequestDetails)({\n                    retryOfRequestLogID,\n                    url: response.url,\n                    status: response.status,\n                    headers: response.headers,\n                    durationMs: headersTime - startTime\n                }));\n                return this.retryRequest(options, retriesRemaining, retryOfRequestLogID ?? requestLogID, response.headers);\n            }\n            const retryMessage = shouldRetry ? `error; no more retries left` : `error; not retryable`;\n            (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_4__.loggerFor)(this).info(`${responseInfo} - ${retryMessage}`);\n            const errText = await response.text().catch((err)=>(0,_internal_errors_mjs__WEBPACK_IMPORTED_MODULE_5__.castToError)(err).message);\n            const errJSON = (0,_internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__.safeJSON)(errText);\n            const errMessage = errJSON ? undefined : errText;\n            (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_4__.loggerFor)(this).debug(`[${requestLogID}] response error (${retryMessage})`, (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_4__.formatRequestDetails)({\n                retryOfRequestLogID,\n                url: response.url,\n                status: response.status,\n                headers: response.headers,\n                message: errMessage,\n                durationMs: Date.now() - startTime\n            }));\n            const err = this.makeStatusError(response.status, errJSON, errMessage, response.headers);\n            throw err;\n        }\n        (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_4__.loggerFor)(this).info(responseInfo);\n        (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_4__.loggerFor)(this).debug(`[${requestLogID}] response start`, (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_4__.formatRequestDetails)({\n            retryOfRequestLogID,\n            url: response.url,\n            status: response.status,\n            headers: response.headers,\n            durationMs: headersTime - startTime\n        }));\n        return {\n            response,\n            options,\n            controller,\n            requestLogID,\n            retryOfRequestLogID,\n            startTime\n        };\n    }\n    getAPIList(path, Page, opts) {\n        return this.requestAPIList(Page, {\n            method: \"get\",\n            path,\n            ...opts\n        });\n    }\n    requestAPIList(Page, options) {\n        const request = this.makeRequest(options, null, undefined);\n        return new _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_11__.PagePromise(this, request, Page);\n    }\n    async fetchWithTimeout(url, init, ms, controller) {\n        const { signal, method, ...options } = init || {};\n        if (signal) signal.addEventListener(\"abort\", ()=>controller.abort());\n        const timeout = setTimeout(()=>controller.abort(), ms);\n        const isReadableBody = globalThis.ReadableStream && options.body instanceof globalThis.ReadableStream || typeof options.body === \"object\" && options.body !== null && Symbol.asyncIterator in options.body;\n        const fetchOptions = {\n            signal: controller.signal,\n            ...isReadableBody ? {\n                duplex: \"half\"\n            } : {},\n            method: \"GET\",\n            ...options\n        };\n        if (method) {\n            // Custom methods like 'patch' need to be uppercased\n            // See https://github.com/nodejs/undici/issues/2294\n            fetchOptions.method = method.toUpperCase();\n        }\n        try {\n            // use undefined this binding; fetch errors if bound to something else in browser/cloudflare\n            return await this.fetch.call(undefined, url, fetchOptions);\n        } finally{\n            clearTimeout(timeout);\n        }\n    }\n    shouldRetry(response) {\n        // Note this is not a standard header.\n        const shouldRetryHeader = response.headers.get(\"x-should-retry\");\n        // If the server explicitly says whether or not to retry, obey.\n        if (shouldRetryHeader === \"true\") return true;\n        if (shouldRetryHeader === \"false\") return false;\n        // Retry on request timeouts.\n        if (response.status === 408) return true;\n        // Retry on lock timeouts.\n        if (response.status === 409) return true;\n        // Retry on rate limits.\n        if (response.status === 429) return true;\n        // Retry internal errors.\n        if (response.status >= 500) return true;\n        return false;\n    }\n    async retryRequest(options, retriesRemaining, requestLogID, responseHeaders) {\n        let timeoutMillis;\n        // Note the `retry-after-ms` header may not be standard, but is a good idea and we'd like proactive support for it.\n        const retryAfterMillisHeader = responseHeaders?.get(\"retry-after-ms\");\n        if (retryAfterMillisHeader) {\n            const timeoutMs = parseFloat(retryAfterMillisHeader);\n            if (!Number.isNaN(timeoutMs)) {\n                timeoutMillis = timeoutMs;\n            }\n        }\n        // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n        const retryAfterHeader = responseHeaders?.get(\"retry-after\");\n        if (retryAfterHeader && !timeoutMillis) {\n            const timeoutSeconds = parseFloat(retryAfterHeader);\n            if (!Number.isNaN(timeoutSeconds)) {\n                timeoutMillis = timeoutSeconds * 1000;\n            } else {\n                timeoutMillis = Date.parse(retryAfterHeader) - Date.now();\n            }\n        }\n        // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n        // just do what it says, but otherwise calculate a default\n        if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1000)) {\n            const maxRetries = options.maxRetries ?? this.maxRetries;\n            timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);\n        }\n        await (0,_internal_utils_sleep_mjs__WEBPACK_IMPORTED_MODULE_3__.sleep)(timeoutMillis);\n        return this.makeRequest(options, retriesRemaining - 1, requestLogID);\n    }\n    calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {\n        const initialRetryDelay = 0.5;\n        const maxRetryDelay = 8.0;\n        const numRetries = maxRetries - retriesRemaining;\n        // Apply exponential backoff, but not more than the max.\n        const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);\n        // Apply some jitter, take up to at most 25 percent of the retry time.\n        const jitter = 1 - Math.random() * 0.25;\n        return sleepSeconds * jitter * 1000;\n    }\n    calculateNonstreamingTimeout(maxTokens, maxNonstreamingTokens) {\n        const maxTime = 60 * 60 * 1000; // 10 minutes\n        const defaultTime = 60 * 10 * 1000; // 10 minutes\n        const expectedTime = maxTime * maxTokens / 128000;\n        if (expectedTime > defaultTime || maxNonstreamingTokens != null && maxTokens > maxNonstreamingTokens) {\n            throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.AnthropicError(\"Streaming is strongly recommended for operations that may token longer than 10 minutes. See https://github.com/anthropics/anthropic-sdk-typescript#long-requests for more details\");\n        }\n        return defaultTime;\n    }\n    buildRequest(inputOptions, { retryCount = 0 } = {}) {\n        const options = {\n            ...inputOptions\n        };\n        const { method, path, query } = options;\n        const url = this.buildURL(path, query);\n        if (\"timeout\" in options) (0,_internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__.validatePositiveInteger)(\"timeout\", options.timeout);\n        options.timeout = options.timeout ?? this.timeout;\n        const { bodyHeaders, body } = this.buildBody({\n            options\n        });\n        const reqHeaders = this.buildHeaders({\n            options: inputOptions,\n            method,\n            bodyHeaders,\n            retryCount\n        });\n        const req = {\n            method,\n            headers: reqHeaders,\n            ...options.signal && {\n                signal: options.signal\n            },\n            ...globalThis.ReadableStream && body instanceof globalThis.ReadableStream && {\n                duplex: \"half\"\n            },\n            ...body && {\n                body\n            },\n            ...this.fetchOptions ?? {},\n            ...options.fetchOptions ?? {}\n        };\n        return {\n            req,\n            url,\n            timeout: options.timeout\n        };\n    }\n    buildHeaders({ options, method, bodyHeaders, retryCount }) {\n        let idempotencyHeaders = {};\n        if (this.idempotencyHeader && method !== \"get\") {\n            if (!options.idempotencyKey) options.idempotencyKey = this.defaultIdempotencyKey();\n            idempotencyHeaders[this.idempotencyHeader] = options.idempotencyKey;\n        }\n        const headers = (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_15__.buildHeaders)([\n            idempotencyHeaders,\n            {\n                Accept: \"application/json\",\n                \"User-Agent\": this.getUserAgent(),\n                \"X-Stainless-Retry-Count\": String(retryCount),\n                ...options.timeout ? {\n                    \"X-Stainless-Timeout\": String(Math.trunc(options.timeout / 1000))\n                } : {},\n                ...(0,_internal_detect_platform_mjs__WEBPACK_IMPORTED_MODULE_6__.getPlatformHeaders)(),\n                ...this._options.dangerouslyAllowBrowser ? {\n                    \"anthropic-dangerous-direct-browser-access\": \"true\"\n                } : undefined,\n                \"anthropic-version\": \"2023-06-01\"\n            },\n            this.authHeaders(options),\n            this._options.defaultHeaders,\n            bodyHeaders,\n            options.headers\n        ]);\n        this.validateHeaders(headers);\n        return headers.values;\n    }\n    buildBody({ options: { body, headers: rawHeaders } }) {\n        if (!body) {\n            return {\n                bodyHeaders: undefined,\n                body: undefined\n            };\n        }\n        const headers = (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_15__.buildHeaders)([\n            rawHeaders\n        ]);\n        if (// Pass raw type verbatim\n        ArrayBuffer.isView(body) || body instanceof ArrayBuffer || body instanceof DataView || typeof body === \"string\" && // Preserve legacy string encoding behavior for now\n        headers.values.has(\"content-type\") || // `Blob` is superset of `File`\n        body instanceof Blob || // `FormData` -> `multipart/form-data`\n        body instanceof FormData || // `URLSearchParams` -> `application/x-www-form-urlencoded`\n        body instanceof URLSearchParams || // Send chunked stream (each chunk has own `length`)\n        globalThis.ReadableStream && body instanceof globalThis.ReadableStream) {\n            return {\n                bodyHeaders: undefined,\n                body: body\n            };\n        } else if (typeof body === \"object\" && (Symbol.asyncIterator in body || Symbol.iterator in body && \"next\" in body && typeof body.next === \"function\")) {\n            return {\n                bodyHeaders: undefined,\n                body: _internal_shims_mjs__WEBPACK_IMPORTED_MODULE_7__.ReadableStreamFrom(body)\n            };\n        } else {\n            return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BaseAnthropic_encoder, \"f\").call(this, {\n                body,\n                headers\n            });\n        }\n    }\n}\n_a = BaseAnthropic, _BaseAnthropic_encoder = new WeakMap();\nBaseAnthropic.Anthropic = _a;\nBaseAnthropic.HUMAN_PROMPT = \"\\n\\nHuman:\";\nBaseAnthropic.AI_PROMPT = \"\\n\\nAssistant:\";\nBaseAnthropic.DEFAULT_TIMEOUT = 600000; // 10 minutes\nBaseAnthropic.AnthropicError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.AnthropicError;\nBaseAnthropic.APIError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.APIError;\nBaseAnthropic.APIConnectionError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.APIConnectionError;\nBaseAnthropic.APIConnectionTimeoutError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.APIConnectionTimeoutError;\nBaseAnthropic.APIUserAbortError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.APIUserAbortError;\nBaseAnthropic.NotFoundError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.NotFoundError;\nBaseAnthropic.ConflictError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.ConflictError;\nBaseAnthropic.RateLimitError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.RateLimitError;\nBaseAnthropic.BadRequestError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.BadRequestError;\nBaseAnthropic.AuthenticationError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.AuthenticationError;\nBaseAnthropic.InternalServerError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.InternalServerError;\nBaseAnthropic.PermissionDeniedError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.PermissionDeniedError;\nBaseAnthropic.UnprocessableEntityError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_10__.UnprocessableEntityError;\nBaseAnthropic.toFile = _core_uploads_mjs__WEBPACK_IMPORTED_MODULE_12__.toFile;\n/**\n * API Client for interfacing with the Anthropic API.\n */ class Anthropic extends BaseAnthropic {\n    constructor(){\n        super(...arguments);\n        this.completions = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Completions(this);\n        this.messages = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Messages(this);\n        this.models = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Models(this);\n        this.beta = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Beta(this);\n    }\n}\nAnthropic.Completions = _resources_completions_mjs__WEBPACK_IMPORTED_MODULE_16__.Completions;\nAnthropic.Messages = _resources_messages_messages_mjs__WEBPACK_IMPORTED_MODULE_20__.Messages;\nAnthropic.Models = _resources_models_mjs__WEBPACK_IMPORTED_MODULE_17__.Models;\nAnthropic.Beta = _resources_beta_beta_mjs__WEBPACK_IMPORTED_MODULE_19__.Beta;\nconst { HUMAN_PROMPT, AI_PROMPT } = Anthropic; //# sourceMappingURL=client.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/client.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/core/api-promise.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/core/api-promise.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIPromise: () => (/* binding */ APIPromise)\n/* harmony export */ });\n/* harmony import */ var _internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/tslib.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/tslib.mjs\");\n/* harmony import */ var _internal_parse_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/parse.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/parse.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _APIPromise_client;\n\n\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */ class APIPromise extends Promise {\n    constructor(client, responsePromise, parseResponse = _internal_parse_mjs__WEBPACK_IMPORTED_MODULE_1__.defaultParseResponse){\n        super((resolve)=>{\n            // this is maybe a bit weird but this has to be a no-op to not implicitly\n            // parse the response body; instead .then, .catch, .finally are overridden\n            // to parse the response\n            resolve(null);\n        });\n        this.responsePromise = responsePromise;\n        this.parseResponse = parseResponse;\n        _APIPromise_client.set(this, void 0);\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _APIPromise_client, client, \"f\");\n    }\n    _thenUnwrap(transform) {\n        return new APIPromise((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _APIPromise_client, \"f\"), this.responsePromise, async (client, props)=>(0,_internal_parse_mjs__WEBPACK_IMPORTED_MODULE_1__.addRequestID)(transform(await this.parseResponse(client, props), props), props.response));\n    }\n    /**\n     * Gets the raw `Response` instance instead of parsing the response\n     * data.\n     *\n     * If you want to parse the response body but still get the `Response`\n     * instance, you can use {@link withResponse()}.\n     *\n     * 👋 Getting the wrong TypeScript type for `Response`?\n     * Try setting `\"moduleResolution\": \"NodeNext\"` or add `\"lib\": [\"DOM\"]`\n     * to your `tsconfig.json`.\n     */ asResponse() {\n        return this.responsePromise.then((p)=>p.response);\n    }\n    /**\n     * Gets the parsed response data, the raw `Response` instance and the ID of the request,\n     * returned via the `request-id` header which is useful for debugging requests and resporting\n     * issues to Anthropic.\n     *\n     * If you just want to get the raw `Response` instance without parsing it,\n     * you can use {@link asResponse()}.\n     *\n     * 👋 Getting the wrong TypeScript type for `Response`?\n     * Try setting `\"moduleResolution\": \"NodeNext\"` or add `\"lib\": [\"DOM\"]`\n     * to your `tsconfig.json`.\n     */ async withResponse() {\n        const [data, response] = await Promise.all([\n            this.parse(),\n            this.asResponse()\n        ]);\n        return {\n            data,\n            response,\n            request_id: response.headers.get(\"request-id\")\n        };\n    }\n    parse() {\n        if (!this.parsedPromise) {\n            this.parsedPromise = this.responsePromise.then((data)=>this.parseResponse((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _APIPromise_client, \"f\"), data));\n        }\n        return this.parsedPromise;\n    }\n    then(onfulfilled, onrejected) {\n        return this.parse().then(onfulfilled, onrejected);\n    }\n    catch(onrejected) {\n        return this.parse().catch(onrejected);\n    }\n    finally(onfinally) {\n        return this.parse().finally(onfinally);\n    }\n}\n_APIPromise_client = new WeakMap(); //# sourceMappingURL=api-promise.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvY29yZS9hcGktcHJvbWlzZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsc0ZBQXNGO0FBQ3RGLElBQUlBO0FBQ21GO0FBQ1g7QUFDNUU7OztDQUdDLEdBQ00sTUFBTUssbUJBQW1CQztJQUM1QkMsWUFBWUMsTUFBTSxFQUFFQyxlQUFlLEVBQUVDLGdCQUFnQlAscUVBQW9CLENBQUU7UUFDdkUsS0FBSyxDQUFDLENBQUNRO1lBQ0gseUVBQXlFO1lBQ3pFLDBFQUEwRTtZQUMxRSx3QkFBd0I7WUFDeEJBLFFBQVE7UUFDWjtRQUNBLElBQUksQ0FBQ0YsZUFBZSxHQUFHQTtRQUN2QixJQUFJLENBQUNDLGFBQWEsR0FBR0E7UUFDckJWLG1CQUFtQlksR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLO1FBQ2xDViwyRUFBc0JBLENBQUMsSUFBSSxFQUFFRixvQkFBb0JRLFFBQVE7SUFDN0Q7SUFDQUssWUFBWUMsU0FBUyxFQUFFO1FBQ25CLE9BQU8sSUFBSVQsV0FBV0osMkVBQXNCQSxDQUFDLElBQUksRUFBRUQsb0JBQW9CLE1BQU0sSUFBSSxDQUFDUyxlQUFlLEVBQUUsT0FBT0QsUUFBUU8sUUFBVVgsaUVBQVlBLENBQUNVLFVBQVUsTUFBTSxJQUFJLENBQUNKLGFBQWEsQ0FBQ0YsUUFBUU8sUUFBUUEsUUFBUUEsTUFBTUMsUUFBUTtJQUN0TjtJQUNBOzs7Ozs7Ozs7O0tBVUMsR0FDREMsYUFBYTtRQUNULE9BQU8sSUFBSSxDQUFDUixlQUFlLENBQUNTLElBQUksQ0FBQyxDQUFDQyxJQUFNQSxFQUFFSCxRQUFRO0lBQ3REO0lBQ0E7Ozs7Ozs7Ozs7O0tBV0MsR0FDRCxNQUFNSSxlQUFlO1FBQ2pCLE1BQU0sQ0FBQ0MsTUFBTUwsU0FBUyxHQUFHLE1BQU1WLFFBQVFnQixHQUFHLENBQUM7WUFBQyxJQUFJLENBQUNDLEtBQUs7WUFBSSxJQUFJLENBQUNOLFVBQVU7U0FBRztRQUM1RSxPQUFPO1lBQUVJO1lBQU1MO1lBQVVRLFlBQVlSLFNBQVNTLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDO1FBQWM7SUFDNUU7SUFDQUgsUUFBUTtRQUNKLElBQUksQ0FBQyxJQUFJLENBQUNJLGFBQWEsRUFBRTtZQUNyQixJQUFJLENBQUNBLGFBQWEsR0FBRyxJQUFJLENBQUNsQixlQUFlLENBQUNTLElBQUksQ0FBQyxDQUFDRyxPQUFTLElBQUksQ0FBQ1gsYUFBYSxDQUFDVCwyRUFBc0JBLENBQUMsSUFBSSxFQUFFRCxvQkFBb0IsTUFBTXFCO1FBQ3ZJO1FBQ0EsT0FBTyxJQUFJLENBQUNNLGFBQWE7SUFDN0I7SUFDQVQsS0FBS1UsV0FBVyxFQUFFQyxVQUFVLEVBQUU7UUFDMUIsT0FBTyxJQUFJLENBQUNOLEtBQUssR0FBR0wsSUFBSSxDQUFDVSxhQUFhQztJQUMxQztJQUNBQyxNQUFNRCxVQUFVLEVBQUU7UUFDZCxPQUFPLElBQUksQ0FBQ04sS0FBSyxHQUFHTyxLQUFLLENBQUNEO0lBQzlCO0lBQ0FFLFFBQVFDLFNBQVMsRUFBRTtRQUNmLE9BQU8sSUFBSSxDQUFDVCxLQUFLLEdBQUdRLE9BQU8sQ0FBQ0M7SUFDaEM7QUFDSjtBQUNBaEMscUJBQXFCLElBQUlpQyxXQUN6Qix3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcnRpZnktYWdlbnQvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvY29yZS9hcGktcHJvbWlzZS5tanM/MTQxNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxudmFyIF9BUElQcm9taXNlX2NsaWVudDtcbmltcG9ydCB7IF9fY2xhc3NQcml2YXRlRmllbGRHZXQsIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgfSBmcm9tIFwiLi4vaW50ZXJuYWwvdHNsaWIubWpzXCI7XG5pbXBvcnQgeyBkZWZhdWx0UGFyc2VSZXNwb25zZSwgYWRkUmVxdWVzdElELCB9IGZyb20gXCIuLi9pbnRlcm5hbC9wYXJzZS5tanNcIjtcbi8qKlxuICogQSBzdWJjbGFzcyBvZiBgUHJvbWlzZWAgcHJvdmlkaW5nIGFkZGl0aW9uYWwgaGVscGVyIG1ldGhvZHNcbiAqIGZvciBpbnRlcmFjdGluZyB3aXRoIHRoZSBTREsuXG4gKi9cbmV4cG9ydCBjbGFzcyBBUElQcm9taXNlIGV4dGVuZHMgUHJvbWlzZSB7XG4gICAgY29uc3RydWN0b3IoY2xpZW50LCByZXNwb25zZVByb21pc2UsIHBhcnNlUmVzcG9uc2UgPSBkZWZhdWx0UGFyc2VSZXNwb25zZSkge1xuICAgICAgICBzdXBlcigocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBtYXliZSBhIGJpdCB3ZWlyZCBidXQgdGhpcyBoYXMgdG8gYmUgYSBuby1vcCB0byBub3QgaW1wbGljaXRseVxuICAgICAgICAgICAgLy8gcGFyc2UgdGhlIHJlc3BvbnNlIGJvZHk7IGluc3RlYWQgLnRoZW4sIC5jYXRjaCwgLmZpbmFsbHkgYXJlIG92ZXJyaWRkZW5cbiAgICAgICAgICAgIC8vIHRvIHBhcnNlIHRoZSByZXNwb25zZVxuICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucmVzcG9uc2VQcm9taXNlID0gcmVzcG9uc2VQcm9taXNlO1xuICAgICAgICB0aGlzLnBhcnNlUmVzcG9uc2UgPSBwYXJzZVJlc3BvbnNlO1xuICAgICAgICBfQVBJUHJvbWlzZV9jbGllbnQuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0FQSVByb21pc2VfY2xpZW50LCBjbGllbnQsIFwiZlwiKTtcbiAgICB9XG4gICAgX3RoZW5VbndyYXAodHJhbnNmb3JtKSB7XG4gICAgICAgIHJldHVybiBuZXcgQVBJUHJvbWlzZShfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BUElQcm9taXNlX2NsaWVudCwgXCJmXCIpLCB0aGlzLnJlc3BvbnNlUHJvbWlzZSwgYXN5bmMgKGNsaWVudCwgcHJvcHMpID0+IGFkZFJlcXVlc3RJRCh0cmFuc2Zvcm0oYXdhaXQgdGhpcy5wYXJzZVJlc3BvbnNlKGNsaWVudCwgcHJvcHMpLCBwcm9wcyksIHByb3BzLnJlc3BvbnNlKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHJhdyBgUmVzcG9uc2VgIGluc3RhbmNlIGluc3RlYWQgb2YgcGFyc2luZyB0aGUgcmVzcG9uc2VcbiAgICAgKiBkYXRhLlxuICAgICAqXG4gICAgICogSWYgeW91IHdhbnQgdG8gcGFyc2UgdGhlIHJlc3BvbnNlIGJvZHkgYnV0IHN0aWxsIGdldCB0aGUgYFJlc3BvbnNlYFxuICAgICAqIGluc3RhbmNlLCB5b3UgY2FuIHVzZSB7QGxpbmsgd2l0aFJlc3BvbnNlKCl9LlxuICAgICAqXG4gICAgICog8J+RiyBHZXR0aW5nIHRoZSB3cm9uZyBUeXBlU2NyaXB0IHR5cGUgZm9yIGBSZXNwb25zZWA/XG4gICAgICogVHJ5IHNldHRpbmcgYFwibW9kdWxlUmVzb2x1dGlvblwiOiBcIk5vZGVOZXh0XCJgIG9yIGFkZCBgXCJsaWJcIjogW1wiRE9NXCJdYFxuICAgICAqIHRvIHlvdXIgYHRzY29uZmlnLmpzb25gLlxuICAgICAqL1xuICAgIGFzUmVzcG9uc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc3BvbnNlUHJvbWlzZS50aGVuKChwKSA9PiBwLnJlc3BvbnNlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcGFyc2VkIHJlc3BvbnNlIGRhdGEsIHRoZSByYXcgYFJlc3BvbnNlYCBpbnN0YW5jZSBhbmQgdGhlIElEIG9mIHRoZSByZXF1ZXN0LFxuICAgICAqIHJldHVybmVkIHZpYSB0aGUgYHJlcXVlc3QtaWRgIGhlYWRlciB3aGljaCBpcyB1c2VmdWwgZm9yIGRlYnVnZ2luZyByZXF1ZXN0cyBhbmQgcmVzcG9ydGluZ1xuICAgICAqIGlzc3VlcyB0byBBbnRocm9waWMuXG4gICAgICpcbiAgICAgKiBJZiB5b3UganVzdCB3YW50IHRvIGdldCB0aGUgcmF3IGBSZXNwb25zZWAgaW5zdGFuY2Ugd2l0aG91dCBwYXJzaW5nIGl0LFxuICAgICAqIHlvdSBjYW4gdXNlIHtAbGluayBhc1Jlc3BvbnNlKCl9LlxuICAgICAqXG4gICAgICog8J+RiyBHZXR0aW5nIHRoZSB3cm9uZyBUeXBlU2NyaXB0IHR5cGUgZm9yIGBSZXNwb25zZWA/XG4gICAgICogVHJ5IHNldHRpbmcgYFwibW9kdWxlUmVzb2x1dGlvblwiOiBcIk5vZGVOZXh0XCJgIG9yIGFkZCBgXCJsaWJcIjogW1wiRE9NXCJdYFxuICAgICAqIHRvIHlvdXIgYHRzY29uZmlnLmpzb25gLlxuICAgICAqL1xuICAgIGFzeW5jIHdpdGhSZXNwb25zZSgpIHtcbiAgICAgICAgY29uc3QgW2RhdGEsIHJlc3BvbnNlXSA9IGF3YWl0IFByb21pc2UuYWxsKFt0aGlzLnBhcnNlKCksIHRoaXMuYXNSZXNwb25zZSgpXSk7XG4gICAgICAgIHJldHVybiB7IGRhdGEsIHJlc3BvbnNlLCByZXF1ZXN0X2lkOiByZXNwb25zZS5oZWFkZXJzLmdldCgncmVxdWVzdC1pZCcpIH07XG4gICAgfVxuICAgIHBhcnNlKCkge1xuICAgICAgICBpZiAoIXRoaXMucGFyc2VkUHJvbWlzZSkge1xuICAgICAgICAgICAgdGhpcy5wYXJzZWRQcm9taXNlID0gdGhpcy5yZXNwb25zZVByb21pc2UudGhlbigoZGF0YSkgPT4gdGhpcy5wYXJzZVJlc3BvbnNlKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FQSVByb21pc2VfY2xpZW50LCBcImZcIiksIGRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZWRQcm9taXNlO1xuICAgIH1cbiAgICB0aGVuKG9uZnVsZmlsbGVkLCBvbnJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlKCkudGhlbihvbmZ1bGZpbGxlZCwgb25yZWplY3RlZCk7XG4gICAgfVxuICAgIGNhdGNoKG9ucmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2UoKS5jYXRjaChvbnJlamVjdGVkKTtcbiAgICB9XG4gICAgZmluYWxseShvbmZpbmFsbHkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2UoKS5maW5hbGx5KG9uZmluYWxseSk7XG4gICAgfVxufVxuX0FQSVByb21pc2VfY2xpZW50ID0gbmV3IFdlYWtNYXAoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwaS1wcm9taXNlLm1qcy5tYXAiXSwibmFtZXMiOlsiX0FQSVByb21pc2VfY2xpZW50IiwiX19jbGFzc1ByaXZhdGVGaWVsZEdldCIsIl9fY2xhc3NQcml2YXRlRmllbGRTZXQiLCJkZWZhdWx0UGFyc2VSZXNwb25zZSIsImFkZFJlcXVlc3RJRCIsIkFQSVByb21pc2UiLCJQcm9taXNlIiwiY29uc3RydWN0b3IiLCJjbGllbnQiLCJyZXNwb25zZVByb21pc2UiLCJwYXJzZVJlc3BvbnNlIiwicmVzb2x2ZSIsInNldCIsIl90aGVuVW53cmFwIiwidHJhbnNmb3JtIiwicHJvcHMiLCJyZXNwb25zZSIsImFzUmVzcG9uc2UiLCJ0aGVuIiwicCIsIndpdGhSZXNwb25zZSIsImRhdGEiLCJhbGwiLCJwYXJzZSIsInJlcXVlc3RfaWQiLCJoZWFkZXJzIiwiZ2V0IiwicGFyc2VkUHJvbWlzZSIsIm9uZnVsZmlsbGVkIiwib25yZWplY3RlZCIsImNhdGNoIiwiZmluYWxseSIsIm9uZmluYWxseSIsIldlYWtNYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/core/api-promise.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/core/error.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/core/error.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIConnectionError: () => (/* binding */ APIConnectionError),\n/* harmony export */   APIConnectionTimeoutError: () => (/* binding */ APIConnectionTimeoutError),\n/* harmony export */   APIError: () => (/* binding */ APIError),\n/* harmony export */   APIUserAbortError: () => (/* binding */ APIUserAbortError),\n/* harmony export */   AnthropicError: () => (/* binding */ AnthropicError),\n/* harmony export */   AuthenticationError: () => (/* binding */ AuthenticationError),\n/* harmony export */   BadRequestError: () => (/* binding */ BadRequestError),\n/* harmony export */   ConflictError: () => (/* binding */ ConflictError),\n/* harmony export */   InternalServerError: () => (/* binding */ InternalServerError),\n/* harmony export */   NotFoundError: () => (/* binding */ NotFoundError),\n/* harmony export */   PermissionDeniedError: () => (/* binding */ PermissionDeniedError),\n/* harmony export */   RateLimitError: () => (/* binding */ RateLimitError),\n/* harmony export */   UnprocessableEntityError: () => (/* binding */ UnprocessableEntityError)\n/* harmony export */ });\n/* harmony import */ var _internal_errors_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/errors.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/errors.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass AnthropicError extends Error {\n}\nclass APIError extends AnthropicError {\n    constructor(status, error, message, headers){\n        super(`${APIError.makeMessage(status, error, message)}`);\n        this.status = status;\n        this.headers = headers;\n        this.requestID = headers?.get(\"request-id\");\n        this.error = error;\n    }\n    static makeMessage(status, error, message) {\n        const msg = error?.message ? typeof error.message === \"string\" ? error.message : JSON.stringify(error.message) : error ? JSON.stringify(error) : message;\n        if (status && msg) {\n            return `${status} ${msg}`;\n        }\n        if (status) {\n            return `${status} status code (no body)`;\n        }\n        if (msg) {\n            return msg;\n        }\n        return \"(no status code or body)\";\n    }\n    static generate(status, errorResponse, message, headers) {\n        if (!status || !headers) {\n            return new APIConnectionError({\n                message,\n                cause: (0,_internal_errors_mjs__WEBPACK_IMPORTED_MODULE_0__.castToError)(errorResponse)\n            });\n        }\n        const error = errorResponse;\n        if (status === 400) {\n            return new BadRequestError(status, error, message, headers);\n        }\n        if (status === 401) {\n            return new AuthenticationError(status, error, message, headers);\n        }\n        if (status === 403) {\n            return new PermissionDeniedError(status, error, message, headers);\n        }\n        if (status === 404) {\n            return new NotFoundError(status, error, message, headers);\n        }\n        if (status === 409) {\n            return new ConflictError(status, error, message, headers);\n        }\n        if (status === 422) {\n            return new UnprocessableEntityError(status, error, message, headers);\n        }\n        if (status === 429) {\n            return new RateLimitError(status, error, message, headers);\n        }\n        if (status >= 500) {\n            return new InternalServerError(status, error, message, headers);\n        }\n        return new APIError(status, error, message, headers);\n    }\n}\nclass APIUserAbortError extends APIError {\n    constructor({ message } = {}){\n        super(undefined, undefined, message || \"Request was aborted.\", undefined);\n    }\n}\nclass APIConnectionError extends APIError {\n    constructor({ message, cause }){\n        super(undefined, undefined, message || \"Connection error.\", undefined);\n        // in some environments the 'cause' property is already declared\n        // @ts-ignore\n        if (cause) this.cause = cause;\n    }\n}\nclass APIConnectionTimeoutError extends APIConnectionError {\n    constructor({ message } = {}){\n        super({\n            message: message ?? \"Request timed out.\"\n        });\n    }\n}\nclass BadRequestError extends APIError {\n}\nclass AuthenticationError extends APIError {\n}\nclass PermissionDeniedError extends APIError {\n}\nclass NotFoundError extends APIError {\n}\nclass ConflictError extends APIError {\n}\nclass UnprocessableEntityError extends APIError {\n}\nclass RateLimitError extends APIError {\n}\nclass InternalServerError extends APIError {\n} //# sourceMappingURL=error.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/core/error.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/core/pagination.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/core/pagination.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractPage: () => (/* binding */ AbstractPage),\n/* harmony export */   Page: () => (/* binding */ Page),\n/* harmony export */   PagePromise: () => (/* binding */ PagePromise)\n/* harmony export */ });\n/* harmony import */ var _internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/tslib.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/tslib.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/error.mjs\");\n/* harmony import */ var _internal_parse_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal/parse.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/parse.mjs\");\n/* harmony import */ var _api_promise_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./api-promise.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/api-promise.mjs\");\n/* harmony import */ var _internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../internal/utils/values.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/values.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _AbstractPage_client;\n\n\n\n\n\nclass AbstractPage {\n    constructor(client, response, body, options){\n        _AbstractPage_client.set(this, void 0);\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _AbstractPage_client, client, \"f\");\n        this.options = options;\n        this.response = response;\n        this.body = body;\n    }\n    hasNextPage() {\n        const items = this.getPaginatedItems();\n        if (!items.length) return false;\n        return this.nextPageRequestOptions() != null;\n    }\n    async getNextPage() {\n        const nextOptions = this.nextPageRequestOptions();\n        if (!nextOptions) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.AnthropicError(\"No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.\");\n        }\n        return await (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AbstractPage_client, \"f\").requestAPIList(this.constructor, nextOptions);\n    }\n    async *iterPages() {\n        let page = this;\n        yield page;\n        while(page.hasNextPage()){\n            page = await page.getNextPage();\n            yield page;\n        }\n    }\n    async *[(_AbstractPage_client = new WeakMap(), Symbol.asyncIterator)]() {\n        for await (const page of this.iterPages()){\n            for (const item of page.getPaginatedItems()){\n                yield item;\n            }\n        }\n    }\n}\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */ class PagePromise extends _api_promise_mjs__WEBPACK_IMPORTED_MODULE_3__.APIPromise {\n    constructor(client, request, Page){\n        super(client, request, async (client, props)=>new Page(client, props.response, await (0,_internal_parse_mjs__WEBPACK_IMPORTED_MODULE_2__.defaultParseResponse)(client, props), props.options));\n    }\n    /**\n     * Allow auto-paginating iteration on an unawaited list call, eg:\n     *\n     *    for await (const item of client.items.list()) {\n     *      console.log(item)\n     *    }\n     */ async *[Symbol.asyncIterator]() {\n        const page = await this;\n        for await (const item of page){\n            yield item;\n        }\n    }\n}\nclass Page extends AbstractPage {\n    constructor(client, response, body, options){\n        super(client, response, body, options);\n        this.data = body.data || [];\n        this.has_more = body.has_more || false;\n        this.first_id = body.first_id || null;\n        this.last_id = body.last_id || null;\n    }\n    getPaginatedItems() {\n        return this.data ?? [];\n    }\n    hasNextPage() {\n        if (this.has_more === false) {\n            return false;\n        }\n        return super.hasNextPage();\n    }\n    nextPageRequestOptions() {\n        if (this.options.query?.[\"before_id\"]) {\n            // in reverse\n            const first_id = this.first_id;\n            if (!first_id) {\n                return null;\n            }\n            return {\n                ...this.options,\n                query: {\n                    ...(0,_internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_4__.maybeObj)(this.options.query),\n                    before_id: first_id\n                }\n            };\n        }\n        const cursor = this.last_id;\n        if (!cursor) {\n            return null;\n        }\n        return {\n            ...this.options,\n            query: {\n                ...(0,_internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_4__.maybeObj)(this.options.query),\n                after_id: cursor\n            }\n        };\n    }\n} //# sourceMappingURL=pagination.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/core/pagination.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/core/resource.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/core/resource.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIResource: () => (/* binding */ APIResource)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nclass APIResource {\n    constructor(client){\n        this._client = client;\n    }\n} //# sourceMappingURL=resource.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvY29yZS9yZXNvdXJjZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHNGQUFzRjtBQUMvRSxNQUFNQTtJQUNUQyxZQUFZQyxNQUFNLENBQUU7UUFDaEIsSUFBSSxDQUFDQyxPQUFPLEdBQUdEO0lBQ25CO0FBQ0osRUFDQSxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcnRpZnktYWdlbnQvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvY29yZS9yZXNvdXJjZS5tanM/YTlkNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuZXhwb3J0IGNsYXNzIEFQSVJlc291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICAgICAgdGhpcy5fY2xpZW50ID0gY2xpZW50O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc291cmNlLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJjb25zdHJ1Y3RvciIsImNsaWVudCIsIl9jbGllbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/core/resource.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/core/streaming.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/core/streaming.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Stream: () => (/* binding */ Stream),\n/* harmony export */   _iterSSEMessages: () => (/* binding */ _iterSSEMessages)\n/* harmony export */ });\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/error.mjs\");\n/* harmony import */ var _internal_shims_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/shims.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/shims.mjs\");\n/* harmony import */ var _internal_decoders_line_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal/decoders/line.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/decoders/line.mjs\");\n/* harmony import */ var _internal_errors_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../internal/errors.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/errors.mjs\");\n/* harmony import */ var _internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../internal/utils/values.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/values.mjs\");\n/* harmony import */ var _internal_utils_bytes_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../internal/utils/bytes.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/bytes.mjs\");\n\n\n\n\n\n\n\n\nclass Stream {\n    constructor(iterator, controller){\n        this.iterator = iterator;\n        this.controller = controller;\n    }\n    static fromSSEResponse(response, controller) {\n        let consumed = false;\n        async function* iterator() {\n            if (consumed) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.AnthropicError(\"Cannot iterate over a consumed stream, use `.tee()` to split the stream.\");\n            }\n            consumed = true;\n            let done = false;\n            try {\n                for await (const sse of _iterSSEMessages(response, controller)){\n                    if (sse.event === \"completion\") {\n                        try {\n                            yield JSON.parse(sse.data);\n                        } catch (e) {\n                            console.error(`Could not parse message into JSON:`, sse.data);\n                            console.error(`From chunk:`, sse.raw);\n                            throw e;\n                        }\n                    }\n                    if (sse.event === \"message_start\" || sse.event === \"message_delta\" || sse.event === \"message_stop\" || sse.event === \"content_block_start\" || sse.event === \"content_block_delta\" || sse.event === \"content_block_stop\") {\n                        try {\n                            yield JSON.parse(sse.data);\n                        } catch (e) {\n                            console.error(`Could not parse message into JSON:`, sse.data);\n                            console.error(`From chunk:`, sse.raw);\n                            throw e;\n                        }\n                    }\n                    if (sse.event === \"ping\") {\n                        continue;\n                    }\n                    if (sse.event === \"error\") {\n                        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.APIError(undefined, (0,_internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_4__.safeJSON)(sse.data) ?? sse.data, undefined, response.headers);\n                    }\n                }\n                done = true;\n            } catch (e) {\n                // If the user calls `stream.controller.abort()`, we should exit without throwing.\n                if ((0,_internal_errors_mjs__WEBPACK_IMPORTED_MODULE_3__.isAbortError)(e)) return;\n                throw e;\n            } finally{\n                // If the user `break`s, abort the ongoing request.\n                if (!done) controller.abort();\n            }\n        }\n        return new Stream(iterator, controller);\n    }\n    /**\n     * Generates a Stream from a newline-separated ReadableStream\n     * where each item is a JSON value.\n     */ static fromReadableStream(readableStream, controller) {\n        let consumed = false;\n        async function* iterLines() {\n            const lineDecoder = new _internal_decoders_line_mjs__WEBPACK_IMPORTED_MODULE_2__.LineDecoder();\n            const iter = (0,_internal_shims_mjs__WEBPACK_IMPORTED_MODULE_1__.ReadableStreamToAsyncIterable)(readableStream);\n            for await (const chunk of iter){\n                for (const line of lineDecoder.decode(chunk)){\n                    yield line;\n                }\n            }\n            for (const line of lineDecoder.flush()){\n                yield line;\n            }\n        }\n        async function* iterator() {\n            if (consumed) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.AnthropicError(\"Cannot iterate over a consumed stream, use `.tee()` to split the stream.\");\n            }\n            consumed = true;\n            let done = false;\n            try {\n                for await (const line of iterLines()){\n                    if (done) continue;\n                    if (line) yield JSON.parse(line);\n                }\n                done = true;\n            } catch (e) {\n                // If the user calls `stream.controller.abort()`, we should exit without throwing.\n                if ((0,_internal_errors_mjs__WEBPACK_IMPORTED_MODULE_3__.isAbortError)(e)) return;\n                throw e;\n            } finally{\n                // If the user `break`s, abort the ongoing request.\n                if (!done) controller.abort();\n            }\n        }\n        return new Stream(iterator, controller);\n    }\n    [Symbol.asyncIterator]() {\n        return this.iterator();\n    }\n    /**\n     * Splits the stream into two streams which can be\n     * independently read from at different speeds.\n     */ tee() {\n        const left = [];\n        const right = [];\n        const iterator = this.iterator();\n        const teeIterator = (queue)=>{\n            return {\n                next: ()=>{\n                    if (queue.length === 0) {\n                        const result = iterator.next();\n                        left.push(result);\n                        right.push(result);\n                    }\n                    return queue.shift();\n                }\n            };\n        };\n        return [\n            new Stream(()=>teeIterator(left), this.controller),\n            new Stream(()=>teeIterator(right), this.controller)\n        ];\n    }\n    /**\n     * Converts this stream to a newline-separated ReadableStream of\n     * JSON stringified values in the stream\n     * which can be turned back into a Stream with `Stream.fromReadableStream()`.\n     */ toReadableStream() {\n        const self = this;\n        let iter;\n        return (0,_internal_shims_mjs__WEBPACK_IMPORTED_MODULE_1__.makeReadableStream)({\n            async start () {\n                iter = self[Symbol.asyncIterator]();\n            },\n            async pull (ctrl) {\n                try {\n                    const { value, done } = await iter.next();\n                    if (done) return ctrl.close();\n                    const bytes = (0,_internal_utils_bytes_mjs__WEBPACK_IMPORTED_MODULE_5__.encodeUTF8)(JSON.stringify(value) + \"\\n\");\n                    ctrl.enqueue(bytes);\n                } catch (err) {\n                    ctrl.error(err);\n                }\n            },\n            async cancel () {\n                await iter.return?.();\n            }\n        });\n    }\n}\nasync function* _iterSSEMessages(response, controller) {\n    if (!response.body) {\n        controller.abort();\n        if (typeof globalThis.navigator !== \"undefined\" && globalThis.navigator.product === \"ReactNative\") {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.AnthropicError(`The default react-native fetch implementation does not support streaming. Please use expo/fetch: https://docs.expo.dev/versions/latest/sdk/expo/#expofetch-api`);\n        }\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.AnthropicError(`Attempted to iterate over a response with no body`);\n    }\n    const sseDecoder = new SSEDecoder();\n    const lineDecoder = new _internal_decoders_line_mjs__WEBPACK_IMPORTED_MODULE_2__.LineDecoder();\n    const iter = (0,_internal_shims_mjs__WEBPACK_IMPORTED_MODULE_1__.ReadableStreamToAsyncIterable)(response.body);\n    for await (const sseChunk of iterSSEChunks(iter)){\n        for (const line of lineDecoder.decode(sseChunk)){\n            const sse = sseDecoder.decode(line);\n            if (sse) yield sse;\n        }\n    }\n    for (const line of lineDecoder.flush()){\n        const sse = sseDecoder.decode(line);\n        if (sse) yield sse;\n    }\n}\n/**\n * Given an async iterable iterator, iterates over it and yields full\n * SSE chunks, i.e. yields when a double new-line is encountered.\n */ async function* iterSSEChunks(iterator) {\n    let data = new Uint8Array();\n    for await (const chunk of iterator){\n        if (chunk == null) {\n            continue;\n        }\n        const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk) : typeof chunk === \"string\" ? (0,_internal_utils_bytes_mjs__WEBPACK_IMPORTED_MODULE_5__.encodeUTF8)(chunk) : chunk;\n        let newData = new Uint8Array(data.length + binaryChunk.length);\n        newData.set(data);\n        newData.set(binaryChunk, data.length);\n        data = newData;\n        let patternIndex;\n        while((patternIndex = (0,_internal_decoders_line_mjs__WEBPACK_IMPORTED_MODULE_2__.findDoubleNewlineIndex)(data)) !== -1){\n            yield data.slice(0, patternIndex);\n            data = data.slice(patternIndex);\n        }\n    }\n    if (data.length > 0) {\n        yield data;\n    }\n}\nclass SSEDecoder {\n    constructor(){\n        this.event = null;\n        this.data = [];\n        this.chunks = [];\n    }\n    decode(line) {\n        if (line.endsWith(\"\\r\")) {\n            line = line.substring(0, line.length - 1);\n        }\n        if (!line) {\n            // empty line and we didn't previously encounter any messages\n            if (!this.event && !this.data.length) return null;\n            const sse = {\n                event: this.event,\n                data: this.data.join(\"\\n\"),\n                raw: this.chunks\n            };\n            this.event = null;\n            this.data = [];\n            this.chunks = [];\n            return sse;\n        }\n        this.chunks.push(line);\n        if (line.startsWith(\":\")) {\n            return null;\n        }\n        let [fieldname, _, value] = partition(line, \":\");\n        if (value.startsWith(\" \")) {\n            value = value.substring(1);\n        }\n        if (fieldname === \"event\") {\n            this.event = value;\n        } else if (fieldname === \"data\") {\n            this.data.push(value);\n        }\n        return null;\n    }\n}\nfunction partition(str, delimiter) {\n    const index = str.indexOf(delimiter);\n    if (index !== -1) {\n        return [\n            str.substring(0, index),\n            delimiter,\n            str.substring(index + delimiter.length)\n        ];\n    }\n    return [\n        str,\n        \"\",\n        \"\"\n    ];\n} //# sourceMappingURL=streaming.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/core/streaming.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/core/uploads.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/core/uploads.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toFile: () => (/* reexport safe */ _internal_to_file_mjs__WEBPACK_IMPORTED_MODULE_0__.toFile)\n/* harmony export */ });\n/* harmony import */ var _internal_to_file_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/to-file.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/to-file.mjs\");\n //# sourceMappingURL=uploads.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvY29yZS91cGxvYWRzLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFpRCxDQUNqRCxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcnRpZnktYWdlbnQvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvY29yZS91cGxvYWRzLm1qcz9jYjZmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IHRvRmlsZSB9IGZyb20gXCIuLi9pbnRlcm5hbC90by1maWxlLm1qc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXBsb2Fkcy5tanMubWFwIl0sIm5hbWVzIjpbInRvRmlsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/core/uploads.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/error.mjs":
/*!**************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/error.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIConnectionError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.APIConnectionError),\n/* harmony export */   APIConnectionTimeoutError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.APIConnectionTimeoutError),\n/* harmony export */   APIError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.APIError),\n/* harmony export */   APIUserAbortError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.APIUserAbortError),\n/* harmony export */   AnthropicError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.AnthropicError),\n/* harmony export */   AuthenticationError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError),\n/* harmony export */   BadRequestError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.BadRequestError),\n/* harmony export */   ConflictError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.ConflictError),\n/* harmony export */   InternalServerError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.InternalServerError),\n/* harmony export */   NotFoundError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.NotFoundError),\n/* harmony export */   PermissionDeniedError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.PermissionDeniedError),\n/* harmony export */   RateLimitError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.RateLimitError),\n/* harmony export */   UnprocessableEntityError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.UnprocessableEntityError)\n/* harmony export */ });\n/* harmony import */ var _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/error.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/error.mjs\");\n //# sourceMappingURL=error.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvZXJyb3IubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWlDLENBQ2pDLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FydGlmeS1hZ2VudC8uL25vZGVfbW9kdWxlcy9AYW50aHJvcGljLWFpL3Nkay9lcnJvci5tanM/M2QzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9jb3JlL2Vycm9yLm1qc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3IubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/error.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/index.mjs":
/*!**************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/index.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AI_PROMPT: () => (/* reexport safe */ _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AI_PROMPT),\n/* harmony export */   APIConnectionError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.APIConnectionError),\n/* harmony export */   APIConnectionTimeoutError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.APIConnectionTimeoutError),\n/* harmony export */   APIError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.APIError),\n/* harmony export */   APIPromise: () => (/* reexport safe */ _core_api_promise_mjs__WEBPACK_IMPORTED_MODULE_2__.APIPromise),\n/* harmony export */   APIUserAbortError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.APIUserAbortError),\n/* harmony export */   Anthropic: () => (/* reexport safe */ _client_mjs__WEBPACK_IMPORTED_MODULE_0__.Anthropic),\n/* harmony export */   AnthropicError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.AnthropicError),\n/* harmony export */   AuthenticationError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.AuthenticationError),\n/* harmony export */   BadRequestError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.BadRequestError),\n/* harmony export */   BaseAnthropic: () => (/* reexport safe */ _client_mjs__WEBPACK_IMPORTED_MODULE_0__.BaseAnthropic),\n/* harmony export */   ConflictError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.ConflictError),\n/* harmony export */   HUMAN_PROMPT: () => (/* reexport safe */ _client_mjs__WEBPACK_IMPORTED_MODULE_0__.HUMAN_PROMPT),\n/* harmony export */   InternalServerError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.InternalServerError),\n/* harmony export */   NotFoundError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.NotFoundError),\n/* harmony export */   PagePromise: () => (/* reexport safe */ _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_3__.PagePromise),\n/* harmony export */   PermissionDeniedError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.PermissionDeniedError),\n/* harmony export */   RateLimitError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.RateLimitError),\n/* harmony export */   UnprocessableEntityError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.UnprocessableEntityError),\n/* harmony export */   \"default\": () => (/* reexport safe */ _client_mjs__WEBPACK_IMPORTED_MODULE_0__.Anthropic),\n/* harmony export */   toFile: () => (/* reexport safe */ _core_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.toFile)\n/* harmony export */ });\n/* harmony import */ var _client_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/client.mjs\");\n/* harmony import */ var _core_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/uploads.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/uploads.mjs\");\n/* harmony import */ var _core_api_promise_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/api-promise.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/api-promise.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/pagination.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/pagination.mjs\");\n/* harmony import */ var _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./core/error.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/error.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsc0ZBQXNGO0FBQ2xDO0FBQ1I7QUFDUTtBQUM2QjtBQUM3QjtBQUNxTyxDQUN6UixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcnRpZnktYWdlbnQvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW5kZXgubWpzPzkyN2YiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmV4cG9ydCB7IEFudGhyb3BpYyBhcyBkZWZhdWx0IH0gZnJvbSBcIi4vY2xpZW50Lm1qc1wiO1xuZXhwb3J0IHsgdG9GaWxlIH0gZnJvbSBcIi4vY29yZS91cGxvYWRzLm1qc1wiO1xuZXhwb3J0IHsgQVBJUHJvbWlzZSB9IGZyb20gXCIuL2NvcmUvYXBpLXByb21pc2UubWpzXCI7XG5leHBvcnQgeyBCYXNlQW50aHJvcGljLCBBbnRocm9waWMsIEhVTUFOX1BST01QVCwgQUlfUFJPTVBUIH0gZnJvbSBcIi4vY2xpZW50Lm1qc1wiO1xuZXhwb3J0IHsgUGFnZVByb21pc2UgfSBmcm9tIFwiLi9jb3JlL3BhZ2luYXRpb24ubWpzXCI7XG5leHBvcnQgeyBBbnRocm9waWNFcnJvciwgQVBJRXJyb3IsIEFQSUNvbm5lY3Rpb25FcnJvciwgQVBJQ29ubmVjdGlvblRpbWVvdXRFcnJvciwgQVBJVXNlckFib3J0RXJyb3IsIE5vdEZvdW5kRXJyb3IsIENvbmZsaWN0RXJyb3IsIFJhdGVMaW1pdEVycm9yLCBCYWRSZXF1ZXN0RXJyb3IsIEF1dGhlbnRpY2F0aW9uRXJyb3IsIEludGVybmFsU2VydmVyRXJyb3IsIFBlcm1pc3Npb25EZW5pZWRFcnJvciwgVW5wcm9jZXNzYWJsZUVudGl0eUVycm9yLCB9IGZyb20gXCIuL2NvcmUvZXJyb3IubWpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbIkFudGhyb3BpYyIsImRlZmF1bHQiLCJ0b0ZpbGUiLCJBUElQcm9taXNlIiwiQmFzZUFudGhyb3BpYyIsIkhVTUFOX1BST01QVCIsIkFJX1BST01QVCIsIlBhZ2VQcm9taXNlIiwiQW50aHJvcGljRXJyb3IiLCJBUElFcnJvciIsIkFQSUNvbm5lY3Rpb25FcnJvciIsIkFQSUNvbm5lY3Rpb25UaW1lb3V0RXJyb3IiLCJBUElVc2VyQWJvcnRFcnJvciIsIk5vdEZvdW5kRXJyb3IiLCJDb25mbGljdEVycm9yIiwiUmF0ZUxpbWl0RXJyb3IiLCJCYWRSZXF1ZXN0RXJyb3IiLCJBdXRoZW50aWNhdGlvbkVycm9yIiwiSW50ZXJuYWxTZXJ2ZXJFcnJvciIsIlBlcm1pc3Npb25EZW5pZWRFcnJvciIsIlVucHJvY2Vzc2FibGVFbnRpdHlFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/internal/constants.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/internal/constants.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MODEL_NONSTREAMING_TOKENS: () => (/* binding */ MODEL_NONSTREAMING_TOKENS)\n/* harmony export */ });\n// File containing shared constants\n/**\n * Model-specific timeout constraints for non-streaming requests\n */ const MODEL_NONSTREAMING_TOKENS = {\n    \"claude-opus-4-20250514\": 8192,\n    \"claude-opus-4-0\": 8192,\n    \"claude-4-opus-20250514\": 8192,\n    \"anthropic.claude-opus-4-20250514-v1:0\": 8192,\n    \"claude-opus-4@20250514\": 8192\n}; //# sourceMappingURL=constants.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvY29uc3RhbnRzLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsbUNBQW1DO0FBQ25DOztDQUVDLEdBQ00sTUFBTUEsNEJBQTRCO0lBQ3JDLDBCQUEwQjtJQUMxQixtQkFBbUI7SUFDbkIsMEJBQTBCO0lBQzFCLHlDQUF5QztJQUN6QywwQkFBMEI7QUFDOUIsRUFBRSxDQUNGLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FydGlmeS1hZ2VudC8uL25vZGVfbW9kdWxlcy9AYW50aHJvcGljLWFpL3Nkay9pbnRlcm5hbC9jb25zdGFudHMubWpzP2MzOGUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBjb250YWluaW5nIHNoYXJlZCBjb25zdGFudHNcbi8qKlxuICogTW9kZWwtc3BlY2lmaWMgdGltZW91dCBjb25zdHJhaW50cyBmb3Igbm9uLXN0cmVhbWluZyByZXF1ZXN0c1xuICovXG5leHBvcnQgY29uc3QgTU9ERUxfTk9OU1RSRUFNSU5HX1RPS0VOUyA9IHtcbiAgICAnY2xhdWRlLW9wdXMtNC0yMDI1MDUxNCc6IDgxOTIsXG4gICAgJ2NsYXVkZS1vcHVzLTQtMCc6IDgxOTIsXG4gICAgJ2NsYXVkZS00LW9wdXMtMjAyNTA1MTQnOiA4MTkyLFxuICAgICdhbnRocm9waWMuY2xhdWRlLW9wdXMtNC0yMDI1MDUxNC12MTowJzogODE5MixcbiAgICAnY2xhdWRlLW9wdXMtNEAyMDI1MDUxNCc6IDgxOTIsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLm1qcy5tYXAiXSwibmFtZXMiOlsiTU9ERUxfTk9OU1RSRUFNSU5HX1RPS0VOUyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/internal/constants.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/internal/decoders/jsonl.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/internal/decoders/jsonl.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JSONLDecoder: () => (/* binding */ JSONLDecoder)\n/* harmony export */ });\n/* harmony import */ var _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/error.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/error.mjs\");\n/* harmony import */ var _shims_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shims.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/shims.mjs\");\n/* harmony import */ var _line_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./line.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/decoders/line.mjs\");\n\n\n\nclass JSONLDecoder {\n    constructor(iterator, controller){\n        this.iterator = iterator;\n        this.controller = controller;\n    }\n    async *decoder() {\n        const lineDecoder = new _line_mjs__WEBPACK_IMPORTED_MODULE_2__.LineDecoder();\n        for await (const chunk of this.iterator){\n            for (const line of lineDecoder.decode(chunk)){\n                yield JSON.parse(line);\n            }\n        }\n        for (const line of lineDecoder.flush()){\n            yield JSON.parse(line);\n        }\n    }\n    [Symbol.asyncIterator]() {\n        return this.decoder();\n    }\n    static fromResponse(response, controller) {\n        if (!response.body) {\n            controller.abort();\n            if (typeof globalThis.navigator !== \"undefined\" && globalThis.navigator.product === \"ReactNative\") {\n                throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.AnthropicError(`The default react-native fetch implementation does not support streaming. Please use expo/fetch: https://docs.expo.dev/versions/latest/sdk/expo/#expofetch-api`);\n            }\n            throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.AnthropicError(`Attempted to iterate over a response with no body`);\n        }\n        return new JSONLDecoder((0,_shims_mjs__WEBPACK_IMPORTED_MODULE_1__.ReadableStreamToAsyncIterable)(response.body), controller);\n    }\n} //# sourceMappingURL=jsonl.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvZGVjb2RlcnMvanNvbmwubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBc0Q7QUFDTztBQUNwQjtBQUNsQyxNQUFNRztJQUNUQyxZQUFZQyxRQUFRLEVBQUVDLFVBQVUsQ0FBRTtRQUM5QixJQUFJLENBQUNELFFBQVEsR0FBR0E7UUFDaEIsSUFBSSxDQUFDQyxVQUFVLEdBQUdBO0lBQ3RCO0lBQ0EsT0FBT0MsVUFBVTtRQUNiLE1BQU1DLGNBQWMsSUFBSU4sa0RBQVdBO1FBQ25DLFdBQVcsTUFBTU8sU0FBUyxJQUFJLENBQUNKLFFBQVEsQ0FBRTtZQUNyQyxLQUFLLE1BQU1LLFFBQVFGLFlBQVlHLE1BQU0sQ0FBQ0YsT0FBUTtnQkFDMUMsTUFBTUcsS0FBS0MsS0FBSyxDQUFDSDtZQUNyQjtRQUNKO1FBQ0EsS0FBSyxNQUFNQSxRQUFRRixZQUFZTSxLQUFLLEdBQUk7WUFDcEMsTUFBTUYsS0FBS0MsS0FBSyxDQUFDSDtRQUNyQjtJQUNKO0lBQ0EsQ0FBQ0ssT0FBT0MsYUFBYSxDQUFDLEdBQUc7UUFDckIsT0FBTyxJQUFJLENBQUNULE9BQU87SUFDdkI7SUFDQSxPQUFPVSxhQUFhQyxRQUFRLEVBQUVaLFVBQVUsRUFBRTtRQUN0QyxJQUFJLENBQUNZLFNBQVNDLElBQUksRUFBRTtZQUNoQmIsV0FBV2MsS0FBSztZQUNoQixJQUFJLE9BQU9DLFdBQVdDLFNBQVMsS0FBSyxlQUNoQ0QsV0FBV0MsU0FBUyxDQUFDQyxPQUFPLEtBQUssZUFBZTtnQkFDaEQsTUFBTSxJQUFJdkIsMkRBQWNBLENBQUMsQ0FBQyw4SkFBOEosQ0FBQztZQUM3TDtZQUNBLE1BQU0sSUFBSUEsMkRBQWNBLENBQUMsQ0FBQyxpREFBaUQsQ0FBQztRQUNoRjtRQUNBLE9BQU8sSUFBSUcsYUFBYUYseUVBQTZCQSxDQUFDaUIsU0FBU0MsSUFBSSxHQUFHYjtJQUMxRTtBQUNKLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXJ0aWZ5LWFnZW50Ly4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL2RlY29kZXJzL2pzb25sLm1qcz8yOTU4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFudGhyb3BpY0Vycm9yIH0gZnJvbSBcIi4uLy4uL2NvcmUvZXJyb3IubWpzXCI7XG5pbXBvcnQgeyBSZWFkYWJsZVN0cmVhbVRvQXN5bmNJdGVyYWJsZSB9IGZyb20gXCIuLi9zaGltcy5tanNcIjtcbmltcG9ydCB7IExpbmVEZWNvZGVyIH0gZnJvbSBcIi4vbGluZS5tanNcIjtcbmV4cG9ydCBjbGFzcyBKU09OTERlY29kZXIge1xuICAgIGNvbnN0cnVjdG9yKGl0ZXJhdG9yLCBjb250cm9sbGVyKSB7XG4gICAgICAgIHRoaXMuaXRlcmF0b3IgPSBpdGVyYXRvcjtcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gY29udHJvbGxlcjtcbiAgICB9XG4gICAgYXN5bmMgKmRlY29kZXIoKSB7XG4gICAgICAgIGNvbnN0IGxpbmVEZWNvZGVyID0gbmV3IExpbmVEZWNvZGVyKCk7XG4gICAgICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2YgdGhpcy5pdGVyYXRvcikge1xuICAgICAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVEZWNvZGVyLmRlY29kZShjaHVuaykpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCBKU09OLnBhcnNlKGxpbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lRGVjb2Rlci5mbHVzaCgpKSB7XG4gICAgICAgICAgICB5aWVsZCBKU09OLnBhcnNlKGxpbmUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlY29kZXIoKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21SZXNwb25zZShyZXNwb25zZSwgY29udHJvbGxlcikge1xuICAgICAgICBpZiAoIXJlc3BvbnNlLmJvZHkpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcy5uYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgZ2xvYmFsVGhpcy5uYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBBbnRocm9waWNFcnJvcihgVGhlIGRlZmF1bHQgcmVhY3QtbmF0aXZlIGZldGNoIGltcGxlbWVudGF0aW9uIGRvZXMgbm90IHN1cHBvcnQgc3RyZWFtaW5nLiBQbGVhc2UgdXNlIGV4cG8vZmV0Y2g6IGh0dHBzOi8vZG9jcy5leHBvLmRldi92ZXJzaW9ucy9sYXRlc3Qvc2RrL2V4cG8vI2V4cG9mZXRjaC1hcGlgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBBbnRocm9waWNFcnJvcihgQXR0ZW1wdGVkIHRvIGl0ZXJhdGUgb3ZlciBhIHJlc3BvbnNlIHdpdGggbm8gYm9keWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgSlNPTkxEZWNvZGVyKFJlYWRhYmxlU3RyZWFtVG9Bc3luY0l0ZXJhYmxlKHJlc3BvbnNlLmJvZHkpLCBjb250cm9sbGVyKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qc29ubC5tanMubWFwIl0sIm5hbWVzIjpbIkFudGhyb3BpY0Vycm9yIiwiUmVhZGFibGVTdHJlYW1Ub0FzeW5jSXRlcmFibGUiLCJMaW5lRGVjb2RlciIsIkpTT05MRGVjb2RlciIsImNvbnN0cnVjdG9yIiwiaXRlcmF0b3IiLCJjb250cm9sbGVyIiwiZGVjb2RlciIsImxpbmVEZWNvZGVyIiwiY2h1bmsiLCJsaW5lIiwiZGVjb2RlIiwiSlNPTiIsInBhcnNlIiwiZmx1c2giLCJTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwiZnJvbVJlc3BvbnNlIiwicmVzcG9uc2UiLCJib2R5IiwiYWJvcnQiLCJnbG9iYWxUaGlzIiwibmF2aWdhdG9yIiwicHJvZHVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/internal/decoders/jsonl.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/internal/decoders/line.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/internal/decoders/line.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LineDecoder: () => (/* binding */ LineDecoder),\n/* harmony export */   findDoubleNewlineIndex: () => (/* binding */ findDoubleNewlineIndex)\n/* harmony export */ });\n/* harmony import */ var _tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tslib.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/tslib.mjs\");\n/* harmony import */ var _utils_bytes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/bytes.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/bytes.mjs\");\nvar _LineDecoder_buffer, _LineDecoder_carriageReturnIndex;\n\n\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */ class LineDecoder {\n    constructor(){\n        _LineDecoder_buffer.set(this, void 0);\n        _LineDecoder_carriageReturnIndex.set(this, void 0);\n        (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _LineDecoder_buffer, new Uint8Array(), \"f\");\n        (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _LineDecoder_carriageReturnIndex, null, \"f\");\n    }\n    decode(chunk) {\n        if (chunk == null) {\n            return [];\n        }\n        const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk) : typeof chunk === \"string\" ? (0,_utils_bytes_mjs__WEBPACK_IMPORTED_MODULE_1__.encodeUTF8)(chunk) : chunk;\n        (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _LineDecoder_buffer, (0,_utils_bytes_mjs__WEBPACK_IMPORTED_MODULE_1__.concatBytes)([\n            (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_buffer, \"f\"),\n            binaryChunk\n        ]), \"f\");\n        const lines = [];\n        let patternIndex;\n        while((patternIndex = findNewlineIndex((0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_buffer, \"f\"), (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_carriageReturnIndex, \"f\"))) != null){\n            if (patternIndex.carriage && (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_carriageReturnIndex, \"f\") == null) {\n                // skip until we either get a corresponding `\\n`, a new `\\r` or nothing\n                (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _LineDecoder_carriageReturnIndex, patternIndex.index, \"f\");\n                continue;\n            }\n            // we got double \\r or \\rtext\\n\n            if ((0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_carriageReturnIndex, \"f\") != null && (patternIndex.index !== (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_carriageReturnIndex, \"f\") + 1 || patternIndex.carriage)) {\n                lines.push((0,_utils_bytes_mjs__WEBPACK_IMPORTED_MODULE_1__.decodeUTF8)((0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_buffer, \"f\").subarray(0, (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_carriageReturnIndex, \"f\") - 1)));\n                (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _LineDecoder_buffer, (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_buffer, \"f\").subarray((0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_carriageReturnIndex, \"f\")), \"f\");\n                (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _LineDecoder_carriageReturnIndex, null, \"f\");\n                continue;\n            }\n            const endIndex = (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_carriageReturnIndex, \"f\") !== null ? patternIndex.preceding - 1 : patternIndex.preceding;\n            const line = (0,_utils_bytes_mjs__WEBPACK_IMPORTED_MODULE_1__.decodeUTF8)((0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_buffer, \"f\").subarray(0, endIndex));\n            lines.push(line);\n            (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _LineDecoder_buffer, (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_buffer, \"f\").subarray(patternIndex.index), \"f\");\n            (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _LineDecoder_carriageReturnIndex, null, \"f\");\n        }\n        return lines;\n    }\n    flush() {\n        if (!(0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_buffer, \"f\").length) {\n            return [];\n        }\n        return this.decode(\"\\n\");\n    }\n}\n_LineDecoder_buffer = new WeakMap(), _LineDecoder_carriageReturnIndex = new WeakMap();\n// prettier-ignore\nLineDecoder.NEWLINE_CHARS = new Set([\n    \"\\n\",\n    \"\\r\"\n]);\nLineDecoder.NEWLINE_REGEXP = /\\r\\n|[\\n\\r]/g;\n/**\n * This function searches the buffer for the end patterns, (\\r or \\n)\n * and returns an object with the index preceding the matched newline and the\n * index after the newline char. `null` is returned if no new line is found.\n *\n * ```ts\n * findNewLineIndex('abc\\ndef') -> { preceding: 2, index: 3 }\n * ```\n */ function findNewlineIndex(buffer, startIndex) {\n    const newline = 0x0a; // \\n\n    const carriage = 0x0d; // \\r\n    for(let i = startIndex ?? 0; i < buffer.length; i++){\n        if (buffer[i] === newline) {\n            return {\n                preceding: i,\n                index: i + 1,\n                carriage: false\n            };\n        }\n        if (buffer[i] === carriage) {\n            return {\n                preceding: i,\n                index: i + 1,\n                carriage: true\n            };\n        }\n    }\n    return null;\n}\nfunction findDoubleNewlineIndex(buffer) {\n    // This function searches the buffer for the end patterns (\\r\\r, \\n\\n, \\r\\n\\r\\n)\n    // and returns the index right after the first occurrence of any pattern,\n    // or -1 if none of the patterns are found.\n    const newline = 0x0a; // \\n\n    const carriage = 0x0d; // \\r\n    for(let i = 0; i < buffer.length - 1; i++){\n        if (buffer[i] === newline && buffer[i + 1] === newline) {\n            // \\n\\n\n            return i + 2;\n        }\n        if (buffer[i] === carriage && buffer[i + 1] === carriage) {\n            // \\r\\r\n            return i + 2;\n        }\n        if (buffer[i] === carriage && buffer[i + 1] === newline && i + 3 < buffer.length && buffer[i + 2] === carriage && buffer[i + 3] === newline) {\n            // \\r\\n\\r\\n\n            return i + 4;\n        }\n    }\n    return -1;\n} //# sourceMappingURL=line.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/internal/decoders/line.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/internal/detect-platform.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/internal/detect-platform.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPlatformHeaders: () => (/* binding */ getPlatformHeaders),\n/* harmony export */   isRunningInBrowser: () => (/* binding */ isRunningInBrowser)\n/* harmony export */ });\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../version.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/version.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nconst isRunningInBrowser = ()=>{\n    return(// @ts-ignore\n     false && // @ts-ignore\n    0);\n};\n/**\n * Note this does not detect 'browser'; for that, use getBrowserInfo().\n */ function getDetectedPlatform() {\n    if (typeof Deno !== \"undefined\" && Deno.build != null) {\n        return \"deno\";\n    }\n    if (typeof EdgeRuntime !== \"undefined\") {\n        return \"edge\";\n    }\n    if (Object.prototype.toString.call(typeof globalThis.process !== \"undefined\" ? globalThis.process : 0) === \"[object process]\") {\n        return \"node\";\n    }\n    return \"unknown\";\n}\nconst getPlatformProperties = ()=>{\n    const detectedPlatform = getDetectedPlatform();\n    if (detectedPlatform === \"deno\") {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION,\n            \"X-Stainless-OS\": normalizePlatform(Deno.build.os),\n            \"X-Stainless-Arch\": normalizeArch(Deno.build.arch),\n            \"X-Stainless-Runtime\": \"deno\",\n            \"X-Stainless-Runtime-Version\": typeof Deno.version === \"string\" ? Deno.version : Deno.version?.deno ?? \"unknown\"\n        };\n    }\n    if (typeof EdgeRuntime !== \"undefined\") {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION,\n            \"X-Stainless-OS\": \"Unknown\",\n            \"X-Stainless-Arch\": `other:${EdgeRuntime}`,\n            \"X-Stainless-Runtime\": \"edge\",\n            \"X-Stainless-Runtime-Version\": globalThis.process.version\n        };\n    }\n    // Check if Node.js\n    if (detectedPlatform === \"node\") {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION,\n            \"X-Stainless-OS\": normalizePlatform(globalThis.process.platform ?? \"unknown\"),\n            \"X-Stainless-Arch\": normalizeArch(globalThis.process.arch ?? \"unknown\"),\n            \"X-Stainless-Runtime\": \"node\",\n            \"X-Stainless-Runtime-Version\": globalThis.process.version ?? \"unknown\"\n        };\n    }\n    const browserInfo = getBrowserInfo();\n    if (browserInfo) {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION,\n            \"X-Stainless-OS\": \"Unknown\",\n            \"X-Stainless-Arch\": \"unknown\",\n            \"X-Stainless-Runtime\": `browser:${browserInfo.browser}`,\n            \"X-Stainless-Runtime-Version\": browserInfo.version\n        };\n    }\n    // TODO add support for Cloudflare workers, etc.\n    return {\n        \"X-Stainless-Lang\": \"js\",\n        \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION,\n        \"X-Stainless-OS\": \"Unknown\",\n        \"X-Stainless-Arch\": \"unknown\",\n        \"X-Stainless-Runtime\": \"unknown\",\n        \"X-Stainless-Runtime-Version\": \"unknown\"\n    };\n};\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo() {\n    if (typeof navigator === \"undefined\" || !navigator) {\n        return null;\n    }\n    // NOTE: The order matters here!\n    const browserPatterns = [\n        {\n            key: \"edge\",\n            pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"ie\",\n            pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"ie\",\n            pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"chrome\",\n            pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"firefox\",\n            pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"safari\",\n            pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/\n        }\n    ];\n    // Find the FIRST matching browser\n    for (const { key, pattern } of browserPatterns){\n        const match = pattern.exec(navigator.userAgent);\n        if (match) {\n            const major = match[1] || 0;\n            const minor = match[2] || 0;\n            const patch = match[3] || 0;\n            return {\n                browser: key,\n                version: `${major}.${minor}.${patch}`\n            };\n        }\n    }\n    return null;\n}\nconst normalizeArch = (arch)=>{\n    // Node docs:\n    // - https://nodejs.org/api/process.html#processarch\n    // Deno docs:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    if (arch === \"x32\") return \"x32\";\n    if (arch === \"x86_64\" || arch === \"x64\") return \"x64\";\n    if (arch === \"arm\") return \"arm\";\n    if (arch === \"aarch64\" || arch === \"arm64\") return \"arm64\";\n    if (arch) return `other:${arch}`;\n    return \"unknown\";\n};\nconst normalizePlatform = (platform)=>{\n    // Node platforms:\n    // - https://nodejs.org/api/process.html#processplatform\n    // Deno platforms:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    // - https://github.com/denoland/deno/issues/14799\n    platform = platform.toLowerCase();\n    // NOTE: this iOS check is untested and may not work\n    // Node does not work natively on IOS, there is a fork at\n    // https://github.com/nodejs-mobile/nodejs-mobile\n    // however it is unknown at the time of writing how to detect if it is running\n    if (platform.includes(\"ios\")) return \"iOS\";\n    if (platform === \"android\") return \"Android\";\n    if (platform === \"darwin\") return \"MacOS\";\n    if (platform === \"win32\") return \"Windows\";\n    if (platform === \"freebsd\") return \"FreeBSD\";\n    if (platform === \"openbsd\") return \"OpenBSD\";\n    if (platform === \"linux\") return \"Linux\";\n    if (platform) return `Other:${platform}`;\n    return \"Unknown\";\n};\nlet _platformHeaders;\nconst getPlatformHeaders = ()=>{\n    return _platformHeaders ?? (_platformHeaders = getPlatformProperties());\n}; //# sourceMappingURL=detect-platform.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/internal/detect-platform.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/internal/errors.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/internal/errors.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   castToError: () => (/* binding */ castToError),\n/* harmony export */   isAbortError: () => (/* binding */ isAbortError)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nfunction isAbortError(err) {\n    return typeof err === \"object\" && err !== null && // Spec-compliant fetch implementations\n    (\"name\" in err && err.name === \"AbortError\" || // Expo fetch\n    \"message\" in err && String(err.message).includes(\"FetchRequestCanceledException\"));\n}\nconst castToError = (err)=>{\n    if (err instanceof Error) return err;\n    if (typeof err === \"object\" && err !== null) {\n        try {\n            if (Object.prototype.toString.call(err) === \"[object Error]\") {\n                // @ts-ignore - not all envs have native support for cause yet\n                const error = new Error(err.message, err.cause ? {\n                    cause: err.cause\n                } : {});\n                if (err.stack) error.stack = err.stack;\n                // @ts-ignore - not all envs have native support for cause yet\n                if (err.cause && !error.cause) error.cause = err.cause;\n                if (err.name) error.name = err.name;\n                return error;\n            }\n        } catch  {}\n        try {\n            return new Error(JSON.stringify(err));\n        } catch  {}\n    }\n    return new Error(err);\n}; //# sourceMappingURL=errors.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvZXJyb3JzLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHNGQUFzRjtBQUMvRSxTQUFTQSxhQUFhQyxHQUFHO0lBQzVCLE9BQVEsT0FBT0EsUUFBUSxZQUNuQkEsUUFBUSxRQUNSLHVDQUF1QztJQUN0QyxXQUFXQSxPQUFPQSxJQUFJQyxJQUFJLEtBQUssZ0JBQzVCLGFBQWE7SUFDWixhQUFhRCxPQUFPRSxPQUFPRixJQUFJRyxPQUFPLEVBQUVDLFFBQVEsQ0FBQyxnQ0FBZ0M7QUFDOUY7QUFDTyxNQUFNQyxjQUFjLENBQUNMO0lBQ3hCLElBQUlBLGVBQWVNLE9BQ2YsT0FBT047SUFDWCxJQUFJLE9BQU9BLFFBQVEsWUFBWUEsUUFBUSxNQUFNO1FBQ3pDLElBQUk7WUFDQSxJQUFJTyxPQUFPQyxTQUFTLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDVixTQUFTLGtCQUFrQjtnQkFDMUQsOERBQThEO2dCQUM5RCxNQUFNVyxRQUFRLElBQUlMLE1BQU1OLElBQUlHLE9BQU8sRUFBRUgsSUFBSVksS0FBSyxHQUFHO29CQUFFQSxPQUFPWixJQUFJWSxLQUFLO2dCQUFDLElBQUksQ0FBQztnQkFDekUsSUFBSVosSUFBSWEsS0FBSyxFQUNURixNQUFNRSxLQUFLLEdBQUdiLElBQUlhLEtBQUs7Z0JBQzNCLDhEQUE4RDtnQkFDOUQsSUFBSWIsSUFBSVksS0FBSyxJQUFJLENBQUNELE1BQU1DLEtBQUssRUFDekJELE1BQU1DLEtBQUssR0FBR1osSUFBSVksS0FBSztnQkFDM0IsSUFBSVosSUFBSUMsSUFBSSxFQUNSVSxNQUFNVixJQUFJLEdBQUdELElBQUlDLElBQUk7Z0JBQ3pCLE9BQU9VO1lBQ1g7UUFDSixFQUNBLE9BQU0sQ0FBRTtRQUNSLElBQUk7WUFDQSxPQUFPLElBQUlMLE1BQU1RLEtBQUtDLFNBQVMsQ0FBQ2Y7UUFDcEMsRUFDQSxPQUFNLENBQUU7SUFDWjtJQUNBLE9BQU8sSUFBSU0sTUFBTU47QUFDckIsRUFBRSxDQUNGLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FydGlmeS1hZ2VudC8uL25vZGVfbW9kdWxlcy9AYW50aHJvcGljLWFpL3Nkay9pbnRlcm5hbC9lcnJvcnMubWpzP2UxNzYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmV4cG9ydCBmdW5jdGlvbiBpc0Fib3J0RXJyb3IoZXJyKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgZXJyID09PSAnb2JqZWN0JyAmJlxuICAgICAgICBlcnIgIT09IG51bGwgJiZcbiAgICAgICAgLy8gU3BlYy1jb21wbGlhbnQgZmV0Y2ggaW1wbGVtZW50YXRpb25zXG4gICAgICAgICgoJ25hbWUnIGluIGVyciAmJiBlcnIubmFtZSA9PT0gJ0Fib3J0RXJyb3InKSB8fFxuICAgICAgICAgICAgLy8gRXhwbyBmZXRjaFxuICAgICAgICAgICAgKCdtZXNzYWdlJyBpbiBlcnIgJiYgU3RyaW5nKGVyci5tZXNzYWdlKS5pbmNsdWRlcygnRmV0Y2hSZXF1ZXN0Q2FuY2VsZWRFeGNlcHRpb24nKSkpKTtcbn1cbmV4cG9ydCBjb25zdCBjYXN0VG9FcnJvciA9IChlcnIpID0+IHtcbiAgICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpXG4gICAgICAgIHJldHVybiBlcnI7XG4gICAgaWYgKHR5cGVvZiBlcnIgPT09ICdvYmplY3QnICYmIGVyciAhPT0gbnVsbCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlcnIpID09PSAnW29iamVjdCBFcnJvcl0nKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSAtIG5vdCBhbGwgZW52cyBoYXZlIG5hdGl2ZSBzdXBwb3J0IGZvciBjYXVzZSB5ZXRcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihlcnIubWVzc2FnZSwgZXJyLmNhdXNlID8geyBjYXVzZTogZXJyLmNhdXNlIH0gOiB7fSk7XG4gICAgICAgICAgICAgICAgaWYgKGVyci5zdGFjaylcbiAgICAgICAgICAgICAgICAgICAgZXJyb3Iuc3RhY2sgPSBlcnIuc3RhY2s7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSAtIG5vdCBhbGwgZW52cyBoYXZlIG5hdGl2ZSBzdXBwb3J0IGZvciBjYXVzZSB5ZXRcbiAgICAgICAgICAgICAgICBpZiAoZXJyLmNhdXNlICYmICFlcnJvci5jYXVzZSlcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IuY2F1c2UgPSBlcnIuY2F1c2U7XG4gICAgICAgICAgICAgICAgaWYgKGVyci5uYW1lKVxuICAgICAgICAgICAgICAgICAgICBlcnJvci5uYW1lID0gZXJyLm5hbWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIHsgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihKU09OLnN0cmluZ2lmeShlcnIpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCB7IH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBFcnJvcihlcnIpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5tanMubWFwIl0sIm5hbWVzIjpbImlzQWJvcnRFcnJvciIsImVyciIsIm5hbWUiLCJTdHJpbmciLCJtZXNzYWdlIiwiaW5jbHVkZXMiLCJjYXN0VG9FcnJvciIsIkVycm9yIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiZXJyb3IiLCJjYXVzZSIsInN0YWNrIiwiSlNPTiIsInN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/internal/errors.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/internal/headers.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/internal/headers.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildHeaders: () => (/* binding */ buildHeaders),\n/* harmony export */   isEmptyHeaders: () => (/* binding */ isEmptyHeaders)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nconst brand_privateNullableHeaders = Symbol.for(\"brand.privateNullableHeaders\");\nconst isArray = Array.isArray;\nfunction* iterateHeaders(headers) {\n    if (!headers) return;\n    if (brand_privateNullableHeaders in headers) {\n        const { values, nulls } = headers;\n        yield* values.entries();\n        for (const name of nulls){\n            yield [\n                name,\n                null\n            ];\n        }\n        return;\n    }\n    let shouldClear = false;\n    let iter;\n    if (headers instanceof Headers) {\n        iter = headers.entries();\n    } else if (isArray(headers)) {\n        iter = headers;\n    } else {\n        shouldClear = true;\n        iter = Object.entries(headers ?? {});\n    }\n    for (let row of iter){\n        const name = row[0];\n        if (typeof name !== \"string\") throw new TypeError(\"expected header name to be a string\");\n        const values = isArray(row[1]) ? row[1] : [\n            row[1]\n        ];\n        let didClear = false;\n        for (const value of values){\n            if (value === undefined) continue;\n            // Objects keys always overwrite older headers, they never append.\n            // Yield a null to clear the header before adding the new values.\n            if (shouldClear && !didClear) {\n                didClear = true;\n                yield [\n                    name,\n                    null\n                ];\n            }\n            yield [\n                name,\n                value\n            ];\n        }\n    }\n}\nconst buildHeaders = (newHeaders)=>{\n    const targetHeaders = new Headers();\n    const nullHeaders = new Set();\n    for (const headers of newHeaders){\n        const seenHeaders = new Set();\n        for (const [name, value] of iterateHeaders(headers)){\n            const lowerName = name.toLowerCase();\n            if (!seenHeaders.has(lowerName)) {\n                targetHeaders.delete(name);\n                seenHeaders.add(lowerName);\n            }\n            if (value === null) {\n                targetHeaders.delete(name);\n                nullHeaders.add(lowerName);\n            } else {\n                targetHeaders.append(name, value);\n                nullHeaders.delete(lowerName);\n            }\n        }\n    }\n    return {\n        [brand_privateNullableHeaders]: true,\n        values: targetHeaders,\n        nulls: nullHeaders\n    };\n};\nconst isEmptyHeaders = (headers)=>{\n    for (const _ of iterateHeaders(headers))return false;\n    return true;\n}; //# sourceMappingURL=headers.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvaGVhZGVycy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxzRkFBc0Y7QUFDdEYsTUFBTUEsK0JBQStCQyxPQUFPQyxHQUFHLENBQUM7QUFDaEQsTUFBTUMsVUFBVUMsTUFBTUQsT0FBTztBQUM3QixVQUFVRSxlQUFlQyxPQUFPO0lBQzVCLElBQUksQ0FBQ0EsU0FDRDtJQUNKLElBQUlOLGdDQUFnQ00sU0FBUztRQUN6QyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsS0FBSyxFQUFFLEdBQUdGO1FBQzFCLE9BQU9DLE9BQU9FLE9BQU87UUFDckIsS0FBSyxNQUFNQyxRQUFRRixNQUFPO1lBQ3RCLE1BQU07Z0JBQUNFO2dCQUFNO2FBQUs7UUFDdEI7UUFDQTtJQUNKO0lBQ0EsSUFBSUMsY0FBYztJQUNsQixJQUFJQztJQUNKLElBQUlOLG1CQUFtQk8sU0FBUztRQUM1QkQsT0FBT04sUUFBUUcsT0FBTztJQUMxQixPQUNLLElBQUlOLFFBQVFHLFVBQVU7UUFDdkJNLE9BQU9OO0lBQ1gsT0FDSztRQUNESyxjQUFjO1FBQ2RDLE9BQU9FLE9BQU9MLE9BQU8sQ0FBQ0gsV0FBVyxDQUFDO0lBQ3RDO0lBQ0EsS0FBSyxJQUFJUyxPQUFPSCxLQUFNO1FBQ2xCLE1BQU1GLE9BQU9LLEdBQUcsQ0FBQyxFQUFFO1FBQ25CLElBQUksT0FBT0wsU0FBUyxVQUNoQixNQUFNLElBQUlNLFVBQVU7UUFDeEIsTUFBTVQsU0FBU0osUUFBUVksR0FBRyxDQUFDLEVBQUUsSUFBSUEsR0FBRyxDQUFDLEVBQUUsR0FBRztZQUFDQSxHQUFHLENBQUMsRUFBRTtTQUFDO1FBQ2xELElBQUlFLFdBQVc7UUFDZixLQUFLLE1BQU1DLFNBQVNYLE9BQVE7WUFDeEIsSUFBSVcsVUFBVUMsV0FDVjtZQUNKLGtFQUFrRTtZQUNsRSxpRUFBaUU7WUFDakUsSUFBSVIsZUFBZSxDQUFDTSxVQUFVO2dCQUMxQkEsV0FBVztnQkFDWCxNQUFNO29CQUFDUDtvQkFBTTtpQkFBSztZQUN0QjtZQUNBLE1BQU07Z0JBQUNBO2dCQUFNUTthQUFNO1FBQ3ZCO0lBQ0o7QUFDSjtBQUNPLE1BQU1FLGVBQWUsQ0FBQ0M7SUFDekIsTUFBTUMsZ0JBQWdCLElBQUlUO0lBQzFCLE1BQU1VLGNBQWMsSUFBSUM7SUFDeEIsS0FBSyxNQUFNbEIsV0FBV2UsV0FBWTtRQUM5QixNQUFNSSxjQUFjLElBQUlEO1FBQ3hCLEtBQUssTUFBTSxDQUFDZCxNQUFNUSxNQUFNLElBQUliLGVBQWVDLFNBQVU7WUFDakQsTUFBTW9CLFlBQVloQixLQUFLaUIsV0FBVztZQUNsQyxJQUFJLENBQUNGLFlBQVlHLEdBQUcsQ0FBQ0YsWUFBWTtnQkFDN0JKLGNBQWNPLE1BQU0sQ0FBQ25CO2dCQUNyQmUsWUFBWUssR0FBRyxDQUFDSjtZQUNwQjtZQUNBLElBQUlSLFVBQVUsTUFBTTtnQkFDaEJJLGNBQWNPLE1BQU0sQ0FBQ25CO2dCQUNyQmEsWUFBWU8sR0FBRyxDQUFDSjtZQUNwQixPQUNLO2dCQUNESixjQUFjUyxNQUFNLENBQUNyQixNQUFNUTtnQkFDM0JLLFlBQVlNLE1BQU0sQ0FBQ0g7WUFDdkI7UUFDSjtJQUNKO0lBQ0EsT0FBTztRQUFFLENBQUMxQiw2QkFBNkIsRUFBRTtRQUFNTyxRQUFRZTtRQUFlZCxPQUFPZTtJQUFZO0FBQzdGLEVBQUU7QUFDSyxNQUFNUyxpQkFBaUIsQ0FBQzFCO0lBQzNCLEtBQUssTUFBTTJCLEtBQUs1QixlQUFlQyxTQUMzQixPQUFPO0lBQ1gsT0FBTztBQUNYLEVBQUUsQ0FDRixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcnRpZnktYWdlbnQvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvaGVhZGVycy5tanM/YjNhMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuY29uc3QgYnJhbmRfcHJpdmF0ZU51bGxhYmxlSGVhZGVycyA9IFN5bWJvbC5mb3IoJ2JyYW5kLnByaXZhdGVOdWxsYWJsZUhlYWRlcnMnKTtcbmNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuZnVuY3Rpb24qIGl0ZXJhdGVIZWFkZXJzKGhlYWRlcnMpIHtcbiAgICBpZiAoIWhlYWRlcnMpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAoYnJhbmRfcHJpdmF0ZU51bGxhYmxlSGVhZGVycyBpbiBoZWFkZXJzKSB7XG4gICAgICAgIGNvbnN0IHsgdmFsdWVzLCBudWxscyB9ID0gaGVhZGVycztcbiAgICAgICAgeWllbGQqIHZhbHVlcy5lbnRyaWVzKCk7XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBudWxscykge1xuICAgICAgICAgICAgeWllbGQgW25hbWUsIG51bGxdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHNob3VsZENsZWFyID0gZmFsc2U7XG4gICAgbGV0IGl0ZXI7XG4gICAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgICAgIGl0ZXIgPSBoZWFkZXJzLmVudHJpZXMoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNBcnJheShoZWFkZXJzKSkge1xuICAgICAgICBpdGVyID0gaGVhZGVycztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHNob3VsZENsZWFyID0gdHJ1ZTtcbiAgICAgICAgaXRlciA9IE9iamVjdC5lbnRyaWVzKGhlYWRlcnMgPz8ge30pO1xuICAgIH1cbiAgICBmb3IgKGxldCByb3cgb2YgaXRlcikge1xuICAgICAgICBjb25zdCBuYW1lID0gcm93WzBdO1xuICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhwZWN0ZWQgaGVhZGVyIG5hbWUgdG8gYmUgYSBzdHJpbmcnKTtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gaXNBcnJheShyb3dbMV0pID8gcm93WzFdIDogW3Jvd1sxXV07XG4gICAgICAgIGxldCBkaWRDbGVhciA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAvLyBPYmplY3RzIGtleXMgYWx3YXlzIG92ZXJ3cml0ZSBvbGRlciBoZWFkZXJzLCB0aGV5IG5ldmVyIGFwcGVuZC5cbiAgICAgICAgICAgIC8vIFlpZWxkIGEgbnVsbCB0byBjbGVhciB0aGUgaGVhZGVyIGJlZm9yZSBhZGRpbmcgdGhlIG5ldyB2YWx1ZXMuXG4gICAgICAgICAgICBpZiAoc2hvdWxkQ2xlYXIgJiYgIWRpZENsZWFyKSB7XG4gICAgICAgICAgICAgICAgZGlkQ2xlYXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHlpZWxkIFtuYW1lLCBudWxsXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHlpZWxkIFtuYW1lLCB2YWx1ZV07XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgY29uc3QgYnVpbGRIZWFkZXJzID0gKG5ld0hlYWRlcnMpID0+IHtcbiAgICBjb25zdCB0YXJnZXRIZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcbiAgICBjb25zdCBudWxsSGVhZGVycyA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGNvbnN0IGhlYWRlcnMgb2YgbmV3SGVhZGVycykge1xuICAgICAgICBjb25zdCBzZWVuSGVhZGVycyA9IG5ldyBTZXQoKTtcbiAgICAgICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIGl0ZXJhdGVIZWFkZXJzKGhlYWRlcnMpKSB7XG4gICAgICAgICAgICBjb25zdCBsb3dlck5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBpZiAoIXNlZW5IZWFkZXJzLmhhcyhsb3dlck5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0SGVhZGVycy5kZWxldGUobmFtZSk7XG4gICAgICAgICAgICAgICAgc2VlbkhlYWRlcnMuYWRkKGxvd2VyTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRIZWFkZXJzLmRlbGV0ZShuYW1lKTtcbiAgICAgICAgICAgICAgICBudWxsSGVhZGVycy5hZGQobG93ZXJOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldEhlYWRlcnMuYXBwZW5kKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBudWxsSGVhZGVycy5kZWxldGUobG93ZXJOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyBbYnJhbmRfcHJpdmF0ZU51bGxhYmxlSGVhZGVyc106IHRydWUsIHZhbHVlczogdGFyZ2V0SGVhZGVycywgbnVsbHM6IG51bGxIZWFkZXJzIH07XG59O1xuZXhwb3J0IGNvbnN0IGlzRW1wdHlIZWFkZXJzID0gKGhlYWRlcnMpID0+IHtcbiAgICBmb3IgKGNvbnN0IF8gb2YgaXRlcmF0ZUhlYWRlcnMoaGVhZGVycykpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWFkZXJzLm1qcy5tYXAiXSwibmFtZXMiOlsiYnJhbmRfcHJpdmF0ZU51bGxhYmxlSGVhZGVycyIsIlN5bWJvbCIsImZvciIsImlzQXJyYXkiLCJBcnJheSIsIml0ZXJhdGVIZWFkZXJzIiwiaGVhZGVycyIsInZhbHVlcyIsIm51bGxzIiwiZW50cmllcyIsIm5hbWUiLCJzaG91bGRDbGVhciIsIml0ZXIiLCJIZWFkZXJzIiwiT2JqZWN0Iiwicm93IiwiVHlwZUVycm9yIiwiZGlkQ2xlYXIiLCJ2YWx1ZSIsInVuZGVmaW5lZCIsImJ1aWxkSGVhZGVycyIsIm5ld0hlYWRlcnMiLCJ0YXJnZXRIZWFkZXJzIiwibnVsbEhlYWRlcnMiLCJTZXQiLCJzZWVuSGVhZGVycyIsImxvd2VyTmFtZSIsInRvTG93ZXJDYXNlIiwiaGFzIiwiZGVsZXRlIiwiYWRkIiwiYXBwZW5kIiwiaXNFbXB0eUhlYWRlcnMiLCJfIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/internal/headers.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/internal/parse.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/internal/parse.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addRequestID: () => (/* binding */ addRequestID),\n/* harmony export */   defaultParseResponse: () => (/* binding */ defaultParseResponse)\n/* harmony export */ });\n/* harmony import */ var _core_streaming_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/streaming.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/streaming.mjs\");\n/* harmony import */ var _utils_log_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/log.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/log.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nasync function defaultParseResponse(client, props) {\n    const { response, requestLogID, retryOfRequestLogID, startTime } = props;\n    const body = await (async ()=>{\n        if (props.options.stream) {\n            (0,_utils_log_mjs__WEBPACK_IMPORTED_MODULE_1__.loggerFor)(client).debug(\"response\", response.status, response.url, response.headers, response.body);\n            // Note: there is an invariant here that isn't represented in the type system\n            // that if you set `stream: true` the response type must also be `Stream<T>`\n            if (props.options.__streamClass) {\n                return props.options.__streamClass.fromSSEResponse(response, props.controller);\n            }\n            return _core_streaming_mjs__WEBPACK_IMPORTED_MODULE_0__.Stream.fromSSEResponse(response, props.controller);\n        }\n        // fetch refuses to read the body when the status code is 204.\n        if (response.status === 204) {\n            return null;\n        }\n        if (props.options.__binaryResponse) {\n            return response;\n        }\n        const contentType = response.headers.get(\"content-type\");\n        const mediaType = contentType?.split(\";\")[0]?.trim();\n        const isJSON = mediaType?.includes(\"application/json\") || mediaType?.endsWith(\"+json\");\n        if (isJSON) {\n            const json = await response.json();\n            return addRequestID(json, response);\n        }\n        const text = await response.text();\n        return text;\n    })();\n    (0,_utils_log_mjs__WEBPACK_IMPORTED_MODULE_1__.loggerFor)(client).debug(`[${requestLogID}] response parsed`, (0,_utils_log_mjs__WEBPACK_IMPORTED_MODULE_1__.formatRequestDetails)({\n        retryOfRequestLogID,\n        url: response.url,\n        status: response.status,\n        body,\n        durationMs: Date.now() - startTime\n    }));\n    return body;\n}\nfunction addRequestID(value, response) {\n    if (!value || typeof value !== \"object\" || Array.isArray(value)) {\n        return value;\n    }\n    return Object.defineProperty(value, \"_request_id\", {\n        value: response.headers.get(\"request-id\"),\n        enumerable: false\n    });\n} //# sourceMappingURL=parse.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvcGFyc2UubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxzRkFBc0Y7QUFDdkM7QUFDbUI7QUFDM0QsZUFBZUcscUJBQXFCQyxNQUFNLEVBQUVDLEtBQUs7SUFDcEQsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLFlBQVksRUFBRUMsbUJBQW1CLEVBQUVDLFNBQVMsRUFBRSxHQUFHSjtJQUNuRSxNQUFNSyxPQUFPLE1BQU0sQ0FBQztRQUNoQixJQUFJTCxNQUFNTSxPQUFPLENBQUNDLE1BQU0sRUFBRTtZQUN0QlYseURBQVNBLENBQUNFLFFBQVFTLEtBQUssQ0FBQyxZQUFZUCxTQUFTUSxNQUFNLEVBQUVSLFNBQVNTLEdBQUcsRUFBRVQsU0FBU1UsT0FBTyxFQUFFVixTQUFTSSxJQUFJO1lBQ2xHLDZFQUE2RTtZQUM3RSw0RUFBNEU7WUFDNUUsSUFBSUwsTUFBTU0sT0FBTyxDQUFDTSxhQUFhLEVBQUU7Z0JBQzdCLE9BQU9aLE1BQU1NLE9BQU8sQ0FBQ00sYUFBYSxDQUFDQyxlQUFlLENBQUNaLFVBQVVELE1BQU1jLFVBQVU7WUFDakY7WUFDQSxPQUFPbkIsdURBQU1BLENBQUNrQixlQUFlLENBQUNaLFVBQVVELE1BQU1jLFVBQVU7UUFDNUQ7UUFDQSw4REFBOEQ7UUFDOUQsSUFBSWIsU0FBU1EsTUFBTSxLQUFLLEtBQUs7WUFDekIsT0FBTztRQUNYO1FBQ0EsSUFBSVQsTUFBTU0sT0FBTyxDQUFDUyxnQkFBZ0IsRUFBRTtZQUNoQyxPQUFPZDtRQUNYO1FBQ0EsTUFBTWUsY0FBY2YsU0FBU1UsT0FBTyxDQUFDTSxHQUFHLENBQUM7UUFDekMsTUFBTUMsWUFBWUYsYUFBYUcsTUFBTSxJQUFJLENBQUMsRUFBRSxFQUFFQztRQUM5QyxNQUFNQyxTQUFTSCxXQUFXSSxTQUFTLHVCQUF1QkosV0FBV0ssU0FBUztRQUM5RSxJQUFJRixRQUFRO1lBQ1IsTUFBTUcsT0FBTyxNQUFNdkIsU0FBU3VCLElBQUk7WUFDaEMsT0FBT0MsYUFBYUQsTUFBTXZCO1FBQzlCO1FBQ0EsTUFBTXlCLE9BQU8sTUFBTXpCLFNBQVN5QixJQUFJO1FBQ2hDLE9BQU9BO0lBQ1g7SUFDQTdCLHlEQUFTQSxDQUFDRSxRQUFRUyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUVOLGFBQWEsaUJBQWlCLENBQUMsRUFBRU4sb0VBQW9CQSxDQUFDO1FBQzlFTztRQUNBTyxLQUFLVCxTQUFTUyxHQUFHO1FBQ2pCRCxRQUFRUixTQUFTUSxNQUFNO1FBQ3ZCSjtRQUNBc0IsWUFBWUMsS0FBS0MsR0FBRyxLQUFLekI7SUFDN0I7SUFDQSxPQUFPQztBQUNYO0FBQ08sU0FBU29CLGFBQWFLLEtBQUssRUFBRTdCLFFBQVE7SUFDeEMsSUFBSSxDQUFDNkIsU0FBUyxPQUFPQSxVQUFVLFlBQVlDLE1BQU1DLE9BQU8sQ0FBQ0YsUUFBUTtRQUM3RCxPQUFPQTtJQUNYO0lBQ0EsT0FBT0csT0FBT0MsY0FBYyxDQUFDSixPQUFPLGVBQWU7UUFDL0NBLE9BQU83QixTQUFTVSxPQUFPLENBQUNNLEdBQUcsQ0FBQztRQUM1QmtCLFlBQVk7SUFDaEI7QUFDSixFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FydGlmeS1hZ2VudC8uL25vZGVfbW9kdWxlcy9AYW50aHJvcGljLWFpL3Nkay9pbnRlcm5hbC9wYXJzZS5tanM/NzI4OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgU3RyZWFtIH0gZnJvbSBcIi4uL2NvcmUvc3RyZWFtaW5nLm1qc1wiO1xuaW1wb3J0IHsgZm9ybWF0UmVxdWVzdERldGFpbHMsIGxvZ2dlckZvciB9IGZyb20gXCIuL3V0aWxzL2xvZy5tanNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWZhdWx0UGFyc2VSZXNwb25zZShjbGllbnQsIHByb3BzKSB7XG4gICAgY29uc3QgeyByZXNwb25zZSwgcmVxdWVzdExvZ0lELCByZXRyeU9mUmVxdWVzdExvZ0lELCBzdGFydFRpbWUgfSA9IHByb3BzO1xuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCAoYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAocHJvcHMub3B0aW9ucy5zdHJlYW0pIHtcbiAgICAgICAgICAgIGxvZ2dlckZvcihjbGllbnQpLmRlYnVnKCdyZXNwb25zZScsIHJlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2UudXJsLCByZXNwb25zZS5oZWFkZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIC8vIE5vdGU6IHRoZXJlIGlzIGFuIGludmFyaWFudCBoZXJlIHRoYXQgaXNuJ3QgcmVwcmVzZW50ZWQgaW4gdGhlIHR5cGUgc3lzdGVtXG4gICAgICAgICAgICAvLyB0aGF0IGlmIHlvdSBzZXQgYHN0cmVhbTogdHJ1ZWAgdGhlIHJlc3BvbnNlIHR5cGUgbXVzdCBhbHNvIGJlIGBTdHJlYW08VD5gXG4gICAgICAgICAgICBpZiAocHJvcHMub3B0aW9ucy5fX3N0cmVhbUNsYXNzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3BzLm9wdGlvbnMuX19zdHJlYW1DbGFzcy5mcm9tU1NFUmVzcG9uc2UocmVzcG9uc2UsIHByb3BzLmNvbnRyb2xsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFN0cmVhbS5mcm9tU1NFUmVzcG9uc2UocmVzcG9uc2UsIHByb3BzLmNvbnRyb2xsZXIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGZldGNoIHJlZnVzZXMgdG8gcmVhZCB0aGUgYm9keSB3aGVuIHRoZSBzdGF0dXMgY29kZSBpcyAyMDQuXG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwNCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BzLm9wdGlvbnMuX19iaW5hcnlSZXNwb25zZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpO1xuICAgICAgICBjb25zdCBtZWRpYVR5cGUgPSBjb250ZW50VHlwZT8uc3BsaXQoJzsnKVswXT8udHJpbSgpO1xuICAgICAgICBjb25zdCBpc0pTT04gPSBtZWRpYVR5cGU/LmluY2x1ZGVzKCdhcHBsaWNhdGlvbi9qc29uJykgfHwgbWVkaWFUeXBlPy5lbmRzV2l0aCgnK2pzb24nKTtcbiAgICAgICAgaWYgKGlzSlNPTikge1xuICAgICAgICAgICAgY29uc3QganNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgIHJldHVybiBhZGRSZXF1ZXN0SUQoanNvbiwgcmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIH0pKCk7XG4gICAgbG9nZ2VyRm9yKGNsaWVudCkuZGVidWcoYFske3JlcXVlc3RMb2dJRH1dIHJlc3BvbnNlIHBhcnNlZGAsIGZvcm1hdFJlcXVlc3REZXRhaWxzKHtcbiAgICAgICAgcmV0cnlPZlJlcXVlc3RMb2dJRCxcbiAgICAgICAgdXJsOiByZXNwb25zZS51cmwsXG4gICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICBib2R5LFxuICAgICAgICBkdXJhdGlvbk1zOiBEYXRlLm5vdygpIC0gc3RhcnRUaW1lLFxuICAgIH0pKTtcbiAgICByZXR1cm4gYm9keTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhZGRSZXF1ZXN0SUQodmFsdWUsIHJlc3BvbnNlKSB7XG4gICAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgJ19yZXF1ZXN0X2lkJywge1xuICAgICAgICB2YWx1ZTogcmVzcG9uc2UuaGVhZGVycy5nZXQoJ3JlcXVlc3QtaWQnKSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZS5tanMubWFwIl0sIm5hbWVzIjpbIlN0cmVhbSIsImZvcm1hdFJlcXVlc3REZXRhaWxzIiwibG9nZ2VyRm9yIiwiZGVmYXVsdFBhcnNlUmVzcG9uc2UiLCJjbGllbnQiLCJwcm9wcyIsInJlc3BvbnNlIiwicmVxdWVzdExvZ0lEIiwicmV0cnlPZlJlcXVlc3RMb2dJRCIsInN0YXJ0VGltZSIsImJvZHkiLCJvcHRpb25zIiwic3RyZWFtIiwiZGVidWciLCJzdGF0dXMiLCJ1cmwiLCJoZWFkZXJzIiwiX19zdHJlYW1DbGFzcyIsImZyb21TU0VSZXNwb25zZSIsImNvbnRyb2xsZXIiLCJfX2JpbmFyeVJlc3BvbnNlIiwiY29udGVudFR5cGUiLCJnZXQiLCJtZWRpYVR5cGUiLCJzcGxpdCIsInRyaW0iLCJpc0pTT04iLCJpbmNsdWRlcyIsImVuZHNXaXRoIiwianNvbiIsImFkZFJlcXVlc3RJRCIsInRleHQiLCJkdXJhdGlvbk1zIiwiRGF0ZSIsIm5vdyIsInZhbHVlIiwiQXJyYXkiLCJpc0FycmF5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/internal/parse.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/internal/request-options.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/internal/request-options.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FallbackEncoder: () => (/* binding */ FallbackEncoder)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nconst FallbackEncoder = ({ headers, body })=>{\n    return {\n        bodyHeaders: {\n            \"content-type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n    };\n}; //# sourceMappingURL=request-options.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvcmVxdWVzdC1vcHRpb25zLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsc0ZBQXNGO0FBQy9FLE1BQU1BLGtCQUFrQixDQUFDLEVBQUVDLE9BQU8sRUFBRUMsSUFBSSxFQUFFO0lBQzdDLE9BQU87UUFDSEMsYUFBYTtZQUNULGdCQUFnQjtRQUNwQjtRQUNBRCxNQUFNRSxLQUFLQyxTQUFTLENBQUNIO0lBQ3pCO0FBQ0osRUFBRSxDQUNGLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2FydGlmeS1hZ2VudC8uL25vZGVfbW9kdWxlcy9AYW50aHJvcGljLWFpL3Nkay9pbnRlcm5hbC9yZXF1ZXN0LW9wdGlvbnMubWpzP2FiYTYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmV4cG9ydCBjb25zdCBGYWxsYmFja0VuY29kZXIgPSAoeyBoZWFkZXJzLCBib2R5IH0pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBib2R5SGVhZGVyczoge1xuICAgICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSksXG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXF1ZXN0LW9wdGlvbnMubWpzLm1hcCJdLCJuYW1lcyI6WyJGYWxsYmFja0VuY29kZXIiLCJoZWFkZXJzIiwiYm9keSIsImJvZHlIZWFkZXJzIiwiSlNPTiIsInN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/internal/request-options.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/internal/shims.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/internal/shims.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CancelReadableStream: () => (/* binding */ CancelReadableStream),\n/* harmony export */   ReadableStreamFrom: () => (/* binding */ ReadableStreamFrom),\n/* harmony export */   ReadableStreamToAsyncIterable: () => (/* binding */ ReadableStreamToAsyncIterable),\n/* harmony export */   getDefaultFetch: () => (/* binding */ getDefaultFetch),\n/* harmony export */   makeReadableStream: () => (/* binding */ makeReadableStream)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nfunction getDefaultFetch() {\n    if (typeof fetch !== \"undefined\") {\n        return fetch;\n    }\n    throw new Error(\"`fetch` is not defined as a global; Either pass `fetch` to the client, `new Anthropic({ fetch })` or polyfill the global, `globalThis.fetch = fetch`\");\n}\nfunction makeReadableStream(...args) {\n    const ReadableStream = globalThis.ReadableStream;\n    if (typeof ReadableStream === \"undefined\") {\n        // Note: All of the platforms / runtimes we officially support already define\n        // `ReadableStream` as a global, so this should only ever be hit on unsupported runtimes.\n        throw new Error(\"`ReadableStream` is not defined as a global; You will need to polyfill it, `globalThis.ReadableStream = ReadableStream`\");\n    }\n    return new ReadableStream(...args);\n}\nfunction ReadableStreamFrom(iterable) {\n    let iter = Symbol.asyncIterator in iterable ? iterable[Symbol.asyncIterator]() : iterable[Symbol.iterator]();\n    return makeReadableStream({\n        start () {},\n        async pull (controller) {\n            const { done, value } = await iter.next();\n            if (done) {\n                controller.close();\n            } else {\n                controller.enqueue(value);\n            }\n        },\n        async cancel () {\n            await iter.return?.();\n        }\n    });\n}\n/**\n * Most browsers don't yet have async iterable support for ReadableStream,\n * and Node has a very different way of reading bytes from its \"ReadableStream\".\n *\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */ function ReadableStreamToAsyncIterable(stream) {\n    if (stream[Symbol.asyncIterator]) return stream;\n    const reader = stream.getReader();\n    return {\n        async next () {\n            try {\n                const result = await reader.read();\n                if (result?.done) reader.releaseLock(); // release lock when stream becomes closed\n                return result;\n            } catch (e) {\n                reader.releaseLock(); // release lock when stream becomes errored\n                throw e;\n            }\n        },\n        async return () {\n            const cancelPromise = reader.cancel();\n            reader.releaseLock();\n            await cancelPromise;\n            return {\n                done: true,\n                value: undefined\n            };\n        },\n        [Symbol.asyncIterator] () {\n            return this;\n        }\n    };\n}\n/**\n * Cancels a ReadableStream we don't need to consume.\n * See https://undici.nodejs.org/#/?id=garbage-collection\n */ async function CancelReadableStream(stream) {\n    if (stream === null || typeof stream !== \"object\") return;\n    if (stream[Symbol.asyncIterator]) {\n        await stream[Symbol.asyncIterator]().return?.();\n        return;\n    }\n    const reader = stream.getReader();\n    const cancelPromise = reader.cancel();\n    reader.releaseLock();\n    await cancelPromise;\n} //# sourceMappingURL=shims.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvc2hpbXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsc0ZBQXNGO0FBQy9FLFNBQVNBO0lBQ1osSUFBSSxPQUFPQyxVQUFVLGFBQWE7UUFDOUIsT0FBT0E7SUFDWDtJQUNBLE1BQU0sSUFBSUMsTUFBTTtBQUNwQjtBQUNPLFNBQVNDLG1CQUFtQixHQUFHQyxJQUFJO0lBQ3RDLE1BQU1DLGlCQUFpQkMsV0FBV0QsY0FBYztJQUNoRCxJQUFJLE9BQU9BLG1CQUFtQixhQUFhO1FBQ3ZDLDZFQUE2RTtRQUM3RSx5RkFBeUY7UUFDekYsTUFBTSxJQUFJSCxNQUFNO0lBQ3BCO0lBQ0EsT0FBTyxJQUFJRyxrQkFBa0JEO0FBQ2pDO0FBQ08sU0FBU0csbUJBQW1CQyxRQUFRO0lBQ3ZDLElBQUlDLE9BQU9DLE9BQU9DLGFBQWEsSUFBSUgsV0FBV0EsUUFBUSxDQUFDRSxPQUFPQyxhQUFhLENBQUMsS0FBS0gsUUFBUSxDQUFDRSxPQUFPRSxRQUFRLENBQUM7SUFDMUcsT0FBT1QsbUJBQW1CO1FBQ3RCVSxVQUFVO1FBQ1YsTUFBTUMsTUFBS0MsVUFBVTtZQUNqQixNQUFNLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFFLEdBQUcsTUFBTVIsS0FBS1MsSUFBSTtZQUN2QyxJQUFJRixNQUFNO2dCQUNORCxXQUFXSSxLQUFLO1lBQ3BCLE9BQ0s7Z0JBQ0RKLFdBQVdLLE9BQU8sQ0FBQ0g7WUFDdkI7UUFDSjtRQUNBLE1BQU1JO1lBQ0YsTUFBTVosS0FBS2EsTUFBTTtRQUNyQjtJQUNKO0FBQ0o7QUFDQTs7Ozs7Q0FLQyxHQUNNLFNBQVNDLDhCQUE4QkMsTUFBTTtJQUNoRCxJQUFJQSxNQUFNLENBQUNkLE9BQU9DLGFBQWEsQ0FBQyxFQUM1QixPQUFPYTtJQUNYLE1BQU1DLFNBQVNELE9BQU9FLFNBQVM7SUFDL0IsT0FBTztRQUNILE1BQU1SO1lBQ0YsSUFBSTtnQkFDQSxNQUFNUyxTQUFTLE1BQU1GLE9BQU9HLElBQUk7Z0JBQ2hDLElBQUlELFFBQVFYLE1BQ1JTLE9BQU9JLFdBQVcsSUFBSSwwQ0FBMEM7Z0JBQ3BFLE9BQU9GO1lBQ1gsRUFDQSxPQUFPRyxHQUFHO2dCQUNOTCxPQUFPSSxXQUFXLElBQUksMkNBQTJDO2dCQUNqRSxNQUFNQztZQUNWO1FBQ0o7UUFDQSxNQUFNUjtZQUNGLE1BQU1TLGdCQUFnQk4sT0FBT0osTUFBTTtZQUNuQ0ksT0FBT0ksV0FBVztZQUNsQixNQUFNRTtZQUNOLE9BQU87Z0JBQUVmLE1BQU07Z0JBQU1DLE9BQU9lO1lBQVU7UUFDMUM7UUFDQSxDQUFDdEIsT0FBT0MsYUFBYSxDQUFDO1lBQ2xCLE9BQU8sSUFBSTtRQUNmO0lBQ0o7QUFDSjtBQUNBOzs7Q0FHQyxHQUNNLGVBQWVzQixxQkFBcUJULE1BQU07SUFDN0MsSUFBSUEsV0FBVyxRQUFRLE9BQU9BLFdBQVcsVUFDckM7SUFDSixJQUFJQSxNQUFNLENBQUNkLE9BQU9DLGFBQWEsQ0FBQyxFQUFFO1FBQzlCLE1BQU1hLE1BQU0sQ0FBQ2QsT0FBT0MsYUFBYSxDQUFDLEdBQUdXLE1BQU07UUFDM0M7SUFDSjtJQUNBLE1BQU1HLFNBQVNELE9BQU9FLFNBQVM7SUFDL0IsTUFBTUssZ0JBQWdCTixPQUFPSixNQUFNO0lBQ25DSSxPQUFPSSxXQUFXO0lBQ2xCLE1BQU1FO0FBQ1YsRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcnRpZnktYWdlbnQvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvc2hpbXMubWpzP2VjNjMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0RmV0Y2goKSB7XG4gICAgaWYgKHR5cGVvZiBmZXRjaCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGZldGNoO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2BmZXRjaGAgaXMgbm90IGRlZmluZWQgYXMgYSBnbG9iYWw7IEVpdGhlciBwYXNzIGBmZXRjaGAgdG8gdGhlIGNsaWVudCwgYG5ldyBBbnRocm9waWMoeyBmZXRjaCB9KWAgb3IgcG9seWZpbGwgdGhlIGdsb2JhbCwgYGdsb2JhbFRoaXMuZmV0Y2ggPSBmZXRjaGAnKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYWtlUmVhZGFibGVTdHJlYW0oLi4uYXJncykge1xuICAgIGNvbnN0IFJlYWRhYmxlU3RyZWFtID0gZ2xvYmFsVGhpcy5SZWFkYWJsZVN0cmVhbTtcbiAgICBpZiAodHlwZW9mIFJlYWRhYmxlU3RyZWFtID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyBOb3RlOiBBbGwgb2YgdGhlIHBsYXRmb3JtcyAvIHJ1bnRpbWVzIHdlIG9mZmljaWFsbHkgc3VwcG9ydCBhbHJlYWR5IGRlZmluZVxuICAgICAgICAvLyBgUmVhZGFibGVTdHJlYW1gIGFzIGEgZ2xvYmFsLCBzbyB0aGlzIHNob3VsZCBvbmx5IGV2ZXIgYmUgaGl0IG9uIHVuc3VwcG9ydGVkIHJ1bnRpbWVzLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BSZWFkYWJsZVN0cmVhbWAgaXMgbm90IGRlZmluZWQgYXMgYSBnbG9iYWw7IFlvdSB3aWxsIG5lZWQgdG8gcG9seWZpbGwgaXQsIGBnbG9iYWxUaGlzLlJlYWRhYmxlU3RyZWFtID0gUmVhZGFibGVTdHJlYW1gJyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUmVhZGFibGVTdHJlYW0oLi4uYXJncyk7XG59XG5leHBvcnQgZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1Gcm9tKGl0ZXJhYmxlKSB7XG4gICAgbGV0IGl0ZXIgPSBTeW1ib2wuYXN5bmNJdGVyYXRvciBpbiBpdGVyYWJsZSA/IGl0ZXJhYmxlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIDogaXRlcmFibGVbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgIHJldHVybiBtYWtlUmVhZGFibGVTdHJlYW0oe1xuICAgICAgICBzdGFydCgpIHsgfSxcbiAgICAgICAgYXN5bmMgcHVsbChjb250cm9sbGVyKSB7XG4gICAgICAgICAgICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCBpdGVyLm5leHQoKTtcbiAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgY2FuY2VsKCkge1xuICAgICAgICAgICAgYXdhaXQgaXRlci5yZXR1cm4/LigpO1xuICAgICAgICB9LFxuICAgIH0pO1xufVxuLyoqXG4gKiBNb3N0IGJyb3dzZXJzIGRvbid0IHlldCBoYXZlIGFzeW5jIGl0ZXJhYmxlIHN1cHBvcnQgZm9yIFJlYWRhYmxlU3RyZWFtLFxuICogYW5kIE5vZGUgaGFzIGEgdmVyeSBkaWZmZXJlbnQgd2F5IG9mIHJlYWRpbmcgYnl0ZXMgZnJvbSBpdHMgXCJSZWFkYWJsZVN0cmVhbVwiLlxuICpcbiAqIFRoaXMgcG9seWZpbGwgd2FzIHB1bGxlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9NYXR0aWFzQnVlbGVucy93ZWItc3RyZWFtcy1wb2x5ZmlsbC9wdWxsLzEyMiNpc3N1ZWNvbW1lbnQtMTYyNzM1NDQ5MFxuICovXG5leHBvcnQgZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1Ub0FzeW5jSXRlcmFibGUoc3RyZWFtKSB7XG4gICAgaWYgKHN0cmVhbVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0pXG4gICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgY29uc3QgcmVhZGVyID0gc3RyZWFtLmdldFJlYWRlcigpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGFzeW5jIG5leHQoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlYWRlci5yZWFkKCk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdD8uZG9uZSlcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7IC8vIHJlbGVhc2UgbG9jayB3aGVuIHN0cmVhbSBiZWNvbWVzIGNsb3NlZFxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJlYWRlci5yZWxlYXNlTG9jaygpOyAvLyByZWxlYXNlIGxvY2sgd2hlbiBzdHJlYW0gYmVjb21lcyBlcnJvcmVkXG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgcmV0dXJuKCkge1xuICAgICAgICAgICAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IHJlYWRlci5jYW5jZWwoKTtcbiAgICAgICAgICAgIHJlYWRlci5yZWxlYXNlTG9jaygpO1xuICAgICAgICAgICAgYXdhaXQgY2FuY2VsUHJvbWlzZTtcbiAgICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiB1bmRlZmluZWQgfTtcbiAgICAgICAgfSxcbiAgICAgICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vKipcbiAqIENhbmNlbHMgYSBSZWFkYWJsZVN0cmVhbSB3ZSBkb24ndCBuZWVkIHRvIGNvbnN1bWUuXG4gKiBTZWUgaHR0cHM6Ly91bmRpY2kubm9kZWpzLm9yZy8jLz9pZD1nYXJiYWdlLWNvbGxlY3Rpb25cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIENhbmNlbFJlYWRhYmxlU3RyZWFtKHN0cmVhbSkge1xuICAgIGlmIChzdHJlYW0gPT09IG51bGwgfHwgdHlwZW9mIHN0cmVhbSAhPT0gJ29iamVjdCcpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAoc3RyZWFtW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSkge1xuICAgICAgICBhd2FpdCBzdHJlYW1bU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkucmV0dXJuPy4oKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByZWFkZXIgPSBzdHJlYW0uZ2V0UmVhZGVyKCk7XG4gICAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IHJlYWRlci5jYW5jZWwoKTtcbiAgICByZWFkZXIucmVsZWFzZUxvY2soKTtcbiAgICBhd2FpdCBjYW5jZWxQcm9taXNlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hpbXMubWpzLm1hcCJdLCJuYW1lcyI6WyJnZXREZWZhdWx0RmV0Y2giLCJmZXRjaCIsIkVycm9yIiwibWFrZVJlYWRhYmxlU3RyZWFtIiwiYXJncyIsIlJlYWRhYmxlU3RyZWFtIiwiZ2xvYmFsVGhpcyIsIlJlYWRhYmxlU3RyZWFtRnJvbSIsIml0ZXJhYmxlIiwiaXRlciIsIlN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJpdGVyYXRvciIsInN0YXJ0IiwicHVsbCIsImNvbnRyb2xsZXIiLCJkb25lIiwidmFsdWUiLCJuZXh0IiwiY2xvc2UiLCJlbnF1ZXVlIiwiY2FuY2VsIiwicmV0dXJuIiwiUmVhZGFibGVTdHJlYW1Ub0FzeW5jSXRlcmFibGUiLCJzdHJlYW0iLCJyZWFkZXIiLCJnZXRSZWFkZXIiLCJyZXN1bHQiLCJyZWFkIiwicmVsZWFzZUxvY2siLCJlIiwiY2FuY2VsUHJvbWlzZSIsInVuZGVmaW5lZCIsIkNhbmNlbFJlYWRhYmxlU3RyZWFtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/internal/shims.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/internal/to-file.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/internal/to-file.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toFile: () => (/* binding */ toFile)\n/* harmony export */ });\n/* harmony import */ var _uploads_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./uploads.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/uploads.mjs\");\n\n\n/**\n * This check adds the arrayBuffer() method type because it is available and used at runtime\n */ const isBlobLike = (value)=>value != null && typeof value === \"object\" && typeof value.size === \"number\" && typeof value.type === \"string\" && typeof value.text === \"function\" && typeof value.slice === \"function\" && typeof value.arrayBuffer === \"function\";\n/**\n * This check adds the arrayBuffer() method type because it is available and used at runtime\n */ const isFileLike = (value)=>value != null && typeof value === \"object\" && typeof value.name === \"string\" && typeof value.lastModified === \"number\" && isBlobLike(value);\nconst isResponseLike = (value)=>value != null && typeof value === \"object\" && typeof value.url === \"string\" && typeof value.blob === \"function\";\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */ async function toFile(value, name, options) {\n    (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_0__.checkFileSupport)();\n    // If it's a promise, resolve it.\n    value = await value;\n    name || (name = (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_0__.getName)(value));\n    // If we've been given a `File` we don't need to do anything if the name / options\n    // have not been customised.\n    if (isFileLike(value)) {\n        if (value instanceof File && name == null && options == null) {\n            return value;\n        }\n        return (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_0__.makeFile)([\n            await value.arrayBuffer()\n        ], name ?? value.name, {\n            type: value.type,\n            lastModified: value.lastModified,\n            ...options\n        });\n    }\n    if (isResponseLike(value)) {\n        const blob = await value.blob();\n        name || (name = new URL(value.url).pathname.split(/[\\\\/]/).pop());\n        return (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_0__.makeFile)(await getBytes(blob), name, options);\n    }\n    const parts = await getBytes(value);\n    if (!options?.type) {\n        const type = parts.find((part)=>typeof part === \"object\" && \"type\" in part && part.type);\n        if (typeof type === \"string\") {\n            options = {\n                ...options,\n                type\n            };\n        }\n    }\n    return (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_0__.makeFile)(parts, name, options);\n}\nasync function getBytes(value) {\n    let parts = [];\n    if (typeof value === \"string\" || ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.\n    value instanceof ArrayBuffer) {\n        parts.push(value);\n    } else if (isBlobLike(value)) {\n        parts.push(value instanceof Blob ? value : await value.arrayBuffer());\n    } else if ((0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable)(value) // includes Readable, ReadableStream, etc.\n    ) {\n        for await (const chunk of value){\n            parts.push(...await getBytes(chunk)); // TODO, consider validating?\n        }\n    } else {\n        const constructor = value?.constructor?.name;\n        throw new Error(`Unexpected data type: ${typeof value}${constructor ? `; constructor: ${constructor}` : \"\"}${propsForError(value)}`);\n    }\n    return parts;\n}\nfunction propsForError(value) {\n    if (typeof value !== \"object\" || value === null) return \"\";\n    const props = Object.getOwnPropertyNames(value);\n    return `; props: [${props.map((p)=>`\"${p}\"`).join(\", \")}]`;\n} //# sourceMappingURL=to-file.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/internal/to-file.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/internal/tslib.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/internal/tslib.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet)\n/* harmony export */ });\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n}\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvdHNsaWIubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsU0FBU0EsdUJBQXVCQyxRQUFRLEVBQUVDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLENBQUM7SUFDM0QsSUFBSUQsU0FBUyxLQUNULE1BQU0sSUFBSUUsVUFBVTtJQUN4QixJQUFJRixTQUFTLE9BQU8sQ0FBQ0MsR0FDakIsTUFBTSxJQUFJQyxVQUFVO0lBQ3hCLElBQUksT0FBT0osVUFBVSxhQUFhRCxhQUFhQyxTQUFTLENBQUNHLElBQUksQ0FBQ0gsTUFBTUssR0FBRyxDQUFDTixXQUNwRSxNQUFNLElBQUlLLFVBQVU7SUFDeEIsT0FBT0YsU0FBUyxNQUFNQyxFQUFFRyxJQUFJLENBQUNQLFVBQVVFLFNBQVNFLElBQUtBLEVBQUVGLEtBQUssR0FBR0EsUUFBU0QsTUFBTU8sR0FBRyxDQUFDUixVQUFVRSxRQUFRQTtBQUN4RztBQUNBLFNBQVNPLHVCQUF1QlQsUUFBUSxFQUFFQyxLQUFLLEVBQUVFLElBQUksRUFBRUMsQ0FBQztJQUNwRCxJQUFJRCxTQUFTLE9BQU8sQ0FBQ0MsR0FDakIsTUFBTSxJQUFJQyxVQUFVO0lBQ3hCLElBQUksT0FBT0osVUFBVSxhQUFhRCxhQUFhQyxTQUFTLENBQUNHLElBQUksQ0FBQ0gsTUFBTUssR0FBRyxDQUFDTixXQUNwRSxNQUFNLElBQUlLLFVBQVU7SUFDeEIsT0FBT0YsU0FBUyxNQUFNQyxJQUFJRCxTQUFTLE1BQU1DLEVBQUVHLElBQUksQ0FBQ1AsWUFBWUksSUFBSUEsRUFBRUYsS0FBSyxHQUFHRCxNQUFNUyxHQUFHLENBQUNWO0FBQ3hGO0FBQzBEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXJ0aWZ5LWFnZW50Ly4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL3RzbGliLm1qcz9jZmYwIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIilcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyAoZi52YWx1ZSA9IHZhbHVlKSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpLCB2YWx1ZTtcbn1cbmZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59XG5leHBvcnQgeyBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0LCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0IH07XG4iXSwibmFtZXMiOlsiX19jbGFzc1ByaXZhdGVGaWVsZFNldCIsInJlY2VpdmVyIiwic3RhdGUiLCJ2YWx1ZSIsImtpbmQiLCJmIiwiVHlwZUVycm9yIiwiaGFzIiwiY2FsbCIsInNldCIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJnZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/internal/tslib.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/internal/uploads.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/internal/uploads.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkFileSupport: () => (/* binding */ checkFileSupport),\n/* harmony export */   createForm: () => (/* binding */ createForm),\n/* harmony export */   getName: () => (/* binding */ getName),\n/* harmony export */   isAsyncIterable: () => (/* binding */ isAsyncIterable),\n/* harmony export */   makeFile: () => (/* binding */ makeFile),\n/* harmony export */   maybeMultipartFormRequestOptions: () => (/* binding */ maybeMultipartFormRequestOptions),\n/* harmony export */   multipartFormRequestOptions: () => (/* binding */ multipartFormRequestOptions)\n/* harmony export */ });\n/* harmony import */ var _shims_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shims.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/shims.mjs\");\n\nconst checkFileSupport = ()=>{\n    if (typeof File === \"undefined\") {\n        const { process } = globalThis;\n        const isOldNode = typeof process?.versions?.node === \"string\" && parseInt(process.versions.node.split(\".\")) < 20;\n        throw new Error(\"`File` is not defined as a global, which is required for file uploads.\" + (isOldNode ? \" Update to Node 20 LTS or newer, or set `globalThis.File` to `import('node:buffer').File`.\" : \"\"));\n    }\n};\n/**\n * Construct a `File` instance. This is used to ensure a helpful error is thrown\n * for environments that don't define a global `File` yet.\n */ function makeFile(fileBits, fileName, options) {\n    checkFileSupport();\n    return new File(fileBits, fileName ?? \"unknown_file\", options);\n}\nfunction getName(value) {\n    return (typeof value === \"object\" && value !== null && (\"name\" in value && value.name && String(value.name) || \"url\" in value && value.url && String(value.url) || \"filename\" in value && value.filename && String(value.filename) || \"path\" in value && value.path && String(value.path)) || \"\").split(/[\\\\/]/).pop() || undefined;\n}\nconst isAsyncIterable = (value)=>value != null && typeof value === \"object\" && typeof value[Symbol.asyncIterator] === \"function\";\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */ const maybeMultipartFormRequestOptions = async (opts, fetch)=>{\n    if (!hasUploadableValue(opts.body)) return opts;\n    return {\n        ...opts,\n        body: await createForm(opts.body, fetch)\n    };\n};\nconst multipartFormRequestOptions = async (opts, fetch)=>{\n    return {\n        ...opts,\n        body: await createForm(opts.body, fetch)\n    };\n};\nconst supportsFormDataMap = new WeakMap();\n/**\n * node-fetch doesn't support the global FormData object in recent node versions. Instead of sending\n * properly-encoded form data, it just stringifies the object, resulting in a request body of \"[object FormData]\".\n * This function detects if the fetch function provided supports the global FormData object to avoid\n * confusing error messages later on.\n */ function supportsFormData(fetchObject) {\n    const fetch = typeof fetchObject === \"function\" ? fetchObject : fetchObject.fetch;\n    const cached = supportsFormDataMap.get(fetch);\n    if (cached) return cached;\n    const promise = (async ()=>{\n        try {\n            const FetchResponse = \"Response\" in fetch ? fetch.Response : (await fetch(\"data:,\")).constructor;\n            const data = new FormData();\n            if (data.toString() === await new FetchResponse(data).text()) {\n                return false;\n            }\n            return true;\n        } catch  {\n            // avoid false negatives\n            return true;\n        }\n    })();\n    supportsFormDataMap.set(fetch, promise);\n    return promise;\n}\nconst createForm = async (body, fetch)=>{\n    if (!await supportsFormData(fetch)) {\n        throw new TypeError(\"The provided fetch function does not support file uploads with the current global FormData class.\");\n    }\n    const form = new FormData();\n    await Promise.all(Object.entries(body || {}).map(([key, value])=>addFormValue(form, key, value)));\n    return form;\n};\n// We check for Blob not File because Bun.File doesn't inherit from File,\n// but they both inherit from Blob and have a `name` property at runtime.\nconst isNamedBlob = (value)=>value instanceof Blob && \"name\" in value;\nconst isUploadable = (value)=>typeof value === \"object\" && value !== null && (value instanceof Response || isAsyncIterable(value) || isNamedBlob(value));\nconst hasUploadableValue = (value)=>{\n    if (isUploadable(value)) return true;\n    if (Array.isArray(value)) return value.some(hasUploadableValue);\n    if (value && typeof value === \"object\") {\n        for(const k in value){\n            if (hasUploadableValue(value[k])) return true;\n        }\n    }\n    return false;\n};\nconst addFormValue = async (form, key, value)=>{\n    if (value === undefined) return;\n    if (value == null) {\n        throw new TypeError(`Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`);\n    }\n    // TODO: make nested formats configurable\n    if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n        form.append(key, String(value));\n    } else if (value instanceof Response) {\n        let options = {};\n        const contentType = value.headers.get(\"Content-Type\");\n        if (contentType) {\n            options = {\n                type: contentType\n            };\n        }\n        form.append(key, makeFile([\n            await value.blob()\n        ], getName(value), options));\n    } else if (isAsyncIterable(value)) {\n        form.append(key, makeFile([\n            await new Response((0,_shims_mjs__WEBPACK_IMPORTED_MODULE_0__.ReadableStreamFrom)(value)).blob()\n        ], getName(value)));\n    } else if (isNamedBlob(value)) {\n        form.append(key, makeFile([\n            value\n        ], getName(value), {\n            type: value.type\n        }));\n    } else if (Array.isArray(value)) {\n        await Promise.all(value.map((entry)=>addFormValue(form, key + \"[]\", entry)));\n    } else if (typeof value === \"object\") {\n        await Promise.all(Object.entries(value).map(([name, prop])=>addFormValue(form, `${key}[${name}]`, prop)));\n    } else {\n        throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`);\n    }\n}; //# sourceMappingURL=uploads.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/internal/uploads.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/bytes.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/internal/utils/bytes.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   decodeUTF8: () => (/* binding */ decodeUTF8),\n/* harmony export */   encodeUTF8: () => (/* binding */ encodeUTF8)\n/* harmony export */ });\nfunction concatBytes(buffers) {\n    let length = 0;\n    for (const buffer of buffers){\n        length += buffer.length;\n    }\n    const output = new Uint8Array(length);\n    let index = 0;\n    for (const buffer of buffers){\n        output.set(buffer, index);\n        index += buffer.length;\n    }\n    return output;\n}\nlet encodeUTF8_;\nfunction encodeUTF8(str) {\n    let encoder;\n    return (encodeUTF8_ ?? (encoder = new globalThis.TextEncoder(), encodeUTF8_ = encoder.encode.bind(encoder)))(str);\n}\nlet decodeUTF8_;\nfunction decodeUTF8(bytes) {\n    let decoder;\n    return (decodeUTF8_ ?? (decoder = new globalThis.TextDecoder(), decodeUTF8_ = decoder.decode.bind(decoder)))(bytes);\n} //# sourceMappingURL=bytes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvdXRpbHMvYnl0ZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFPLFNBQVNBLFlBQVlDLE9BQU87SUFDL0IsSUFBSUMsU0FBUztJQUNiLEtBQUssTUFBTUMsVUFBVUYsUUFBUztRQUMxQkMsVUFBVUMsT0FBT0QsTUFBTTtJQUMzQjtJQUNBLE1BQU1FLFNBQVMsSUFBSUMsV0FBV0g7SUFDOUIsSUFBSUksUUFBUTtJQUNaLEtBQUssTUFBTUgsVUFBVUYsUUFBUztRQUMxQkcsT0FBT0csR0FBRyxDQUFDSixRQUFRRztRQUNuQkEsU0FBU0gsT0FBT0QsTUFBTTtJQUMxQjtJQUNBLE9BQU9FO0FBQ1g7QUFDQSxJQUFJSTtBQUNHLFNBQVNDLFdBQVdDLEdBQUc7SUFDMUIsSUFBSUM7SUFDSixPQUFPLENBQUNILGVBQ0gsV0FBVyxJQUFJSSxXQUFXQyxXQUFXLElBQU1MLGNBQWNHLFFBQVFHLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDSixRQUFRLENBQUMsRUFBR0Q7QUFDbEc7QUFDQSxJQUFJTTtBQUNHLFNBQVNDLFdBQVdDLEtBQUs7SUFDNUIsSUFBSUM7SUFDSixPQUFPLENBQUNILGVBQ0gsV0FBVyxJQUFJSixXQUFXUSxXQUFXLElBQU1KLGNBQWNHLFFBQVFFLE1BQU0sQ0FBQ04sSUFBSSxDQUFDSSxRQUFRLENBQUMsRUFBR0Q7QUFDbEcsRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcnRpZnktYWdlbnQvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvdXRpbHMvYnl0ZXMubWpzP2FmYzUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdEJ5dGVzKGJ1ZmZlcnMpIHtcbiAgICBsZXQgbGVuZ3RoID0gMDtcbiAgICBmb3IgKGNvbnN0IGJ1ZmZlciBvZiBidWZmZXJzKSB7XG4gICAgICAgIGxlbmd0aCArPSBidWZmZXIubGVuZ3RoO1xuICAgIH1cbiAgICBjb25zdCBvdXRwdXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIGxldCBpbmRleCA9IDA7XG4gICAgZm9yIChjb25zdCBidWZmZXIgb2YgYnVmZmVycykge1xuICAgICAgICBvdXRwdXQuc2V0KGJ1ZmZlciwgaW5kZXgpO1xuICAgICAgICBpbmRleCArPSBidWZmZXIubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xufVxubGV0IGVuY29kZVVURjhfO1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZVVURjgoc3RyKSB7XG4gICAgbGV0IGVuY29kZXI7XG4gICAgcmV0dXJuIChlbmNvZGVVVEY4XyA/P1xuICAgICAgICAoKGVuY29kZXIgPSBuZXcgZ2xvYmFsVGhpcy5UZXh0RW5jb2RlcigpKSwgKGVuY29kZVVURjhfID0gZW5jb2Rlci5lbmNvZGUuYmluZChlbmNvZGVyKSkpKShzdHIpO1xufVxubGV0IGRlY29kZVVURjhfO1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZVVURjgoYnl0ZXMpIHtcbiAgICBsZXQgZGVjb2RlcjtcbiAgICByZXR1cm4gKGRlY29kZVVURjhfID8/XG4gICAgICAgICgoZGVjb2RlciA9IG5ldyBnbG9iYWxUaGlzLlRleHREZWNvZGVyKCkpLCAoZGVjb2RlVVRGOF8gPSBkZWNvZGVyLmRlY29kZS5iaW5kKGRlY29kZXIpKSkpKGJ5dGVzKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ5dGVzLm1qcy5tYXAiXSwibmFtZXMiOlsiY29uY2F0Qnl0ZXMiLCJidWZmZXJzIiwibGVuZ3RoIiwiYnVmZmVyIiwib3V0cHV0IiwiVWludDhBcnJheSIsImluZGV4Iiwic2V0IiwiZW5jb2RlVVRGOF8iLCJlbmNvZGVVVEY4Iiwic3RyIiwiZW5jb2RlciIsImdsb2JhbFRoaXMiLCJUZXh0RW5jb2RlciIsImVuY29kZSIsImJpbmQiLCJkZWNvZGVVVEY4XyIsImRlY29kZVVURjgiLCJieXRlcyIsImRlY29kZXIiLCJUZXh0RGVjb2RlciIsImRlY29kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/bytes.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/env.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/internal/utils/env.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   readEnv: () => (/* binding */ readEnv)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n/**\n * Read an environment variable.\n *\n * Trims beginning and trailing whitespace.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */ const readEnv = (env)=>{\n    if (typeof globalThis.process !== \"undefined\") {\n        return globalThis.process.env?.[env]?.trim() ?? undefined;\n    }\n    if (typeof globalThis.Deno !== \"undefined\") {\n        return globalThis.Deno.env?.get?.(env)?.trim();\n    }\n    return undefined;\n}; //# sourceMappingURL=env.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvdXRpbHMvZW52Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsc0ZBQXNGO0FBQ3RGOzs7Ozs7Q0FNQyxHQUNNLE1BQU1BLFVBQVUsQ0FBQ0M7SUFDcEIsSUFBSSxPQUFPQyxXQUFXQyxPQUFPLEtBQUssYUFBYTtRQUMzQyxPQUFPRCxXQUFXQyxPQUFPLENBQUNGLEdBQUcsRUFBRSxDQUFDQSxJQUFJLEVBQUVHLFVBQVVDO0lBQ3BEO0lBQ0EsSUFBSSxPQUFPSCxXQUFXSSxJQUFJLEtBQUssYUFBYTtRQUN4QyxPQUFPSixXQUFXSSxJQUFJLENBQUNMLEdBQUcsRUFBRU0sTUFBTU4sTUFBTUc7SUFDNUM7SUFDQSxPQUFPQztBQUNYLEVBQUUsQ0FDRixnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcnRpZnktYWdlbnQvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvdXRpbHMvZW52Lm1qcz8yYTg2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG4vKipcbiAqIFJlYWQgYW4gZW52aXJvbm1lbnQgdmFyaWFibGUuXG4gKlxuICogVHJpbXMgYmVnaW5uaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLlxuICpcbiAqIFdpbGwgcmV0dXJuIHVuZGVmaW5lZCBpZiB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUgZG9lc24ndCBleGlzdCBvciBjYW5ub3QgYmUgYWNjZXNzZWQuXG4gKi9cbmV4cG9ydCBjb25zdCByZWFkRW52ID0gKGVudikgPT4ge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcy5wcm9jZXNzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gZ2xvYmFsVGhpcy5wcm9jZXNzLmVudj8uW2Vudl0/LnRyaW0oKSA/PyB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcy5EZW5vICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gZ2xvYmFsVGhpcy5EZW5vLmVudj8uZ2V0Py4oZW52KT8udHJpbSgpO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudi5tanMubWFwIl0sIm5hbWVzIjpbInJlYWRFbnYiLCJlbnYiLCJnbG9iYWxUaGlzIiwicHJvY2VzcyIsInRyaW0iLCJ1bmRlZmluZWQiLCJEZW5vIiwiZ2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/env.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/log.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/internal/utils/log.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatRequestDetails: () => (/* binding */ formatRequestDetails),\n/* harmony export */   loggerFor: () => (/* binding */ loggerFor),\n/* harmony export */   parseLogLevel: () => (/* binding */ parseLogLevel)\n/* harmony export */ });\n/* harmony import */ var _values_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./values.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/values.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nconst levelNumbers = {\n    off: 0,\n    error: 200,\n    warn: 300,\n    info: 400,\n    debug: 500\n};\nconst parseLogLevel = (maybeLevel, sourceName, client)=>{\n    if (!maybeLevel) {\n        return undefined;\n    }\n    if ((0,_values_mjs__WEBPACK_IMPORTED_MODULE_0__.hasOwn)(levelNumbers, maybeLevel)) {\n        return maybeLevel;\n    }\n    loggerFor(client).warn(`${sourceName} was set to ${JSON.stringify(maybeLevel)}, expected one of ${JSON.stringify(Object.keys(levelNumbers))}`);\n    return undefined;\n};\nfunction noop() {}\nfunction makeLogFn(fnLevel, logger, logLevel) {\n    if (!logger || levelNumbers[fnLevel] > levelNumbers[logLevel]) {\n        return noop;\n    } else {\n        // Don't wrap logger functions, we want the stacktrace intact!\n        return logger[fnLevel].bind(logger);\n    }\n}\nconst noopLogger = {\n    error: noop,\n    warn: noop,\n    info: noop,\n    debug: noop\n};\nlet cachedLoggers = new WeakMap();\nfunction loggerFor(client) {\n    const logger = client.logger;\n    const logLevel = client.logLevel ?? \"off\";\n    if (!logger) {\n        return noopLogger;\n    }\n    const cachedLogger = cachedLoggers.get(logger);\n    if (cachedLogger && cachedLogger[0] === logLevel) {\n        return cachedLogger[1];\n    }\n    const levelLogger = {\n        error: makeLogFn(\"error\", logger, logLevel),\n        warn: makeLogFn(\"warn\", logger, logLevel),\n        info: makeLogFn(\"info\", logger, logLevel),\n        debug: makeLogFn(\"debug\", logger, logLevel)\n    };\n    cachedLoggers.set(logger, [\n        logLevel,\n        levelLogger\n    ]);\n    return levelLogger;\n}\nconst formatRequestDetails = (details)=>{\n    if (details.options) {\n        details.options = {\n            ...details.options\n        };\n        delete details.options[\"headers\"]; // redundant + leaks internals\n    }\n    if (details.headers) {\n        details.headers = Object.fromEntries((details.headers instanceof Headers ? [\n            ...details.headers\n        ] : Object.entries(details.headers)).map(([name, value])=>[\n                name,\n                name.toLowerCase() === \"x-api-key\" || name.toLowerCase() === \"authorization\" || name.toLowerCase() === \"cookie\" || name.toLowerCase() === \"set-cookie\" ? \"***\" : value\n            ]));\n    }\n    if (\"retryOfRequestLogID\" in details) {\n        if (details.retryOfRequestLogID) {\n            details.retryOf = details.retryOfRequestLogID;\n        }\n        delete details.retryOfRequestLogID;\n    }\n    return details;\n}; //# sourceMappingURL=log.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvdXRpbHMvbG9nLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsc0ZBQXNGO0FBQ2hEO0FBQ3RDLE1BQU1DLGVBQWU7SUFDakJDLEtBQUs7SUFDTEMsT0FBTztJQUNQQyxNQUFNO0lBQ05DLE1BQU07SUFDTkMsT0FBTztBQUNYO0FBQ08sTUFBTUMsZ0JBQWdCLENBQUNDLFlBQVlDLFlBQVlDO0lBQ2xELElBQUksQ0FBQ0YsWUFBWTtRQUNiLE9BQU9HO0lBQ1g7SUFDQSxJQUFJWCxtREFBTUEsQ0FBQ0MsY0FBY08sYUFBYTtRQUNsQyxPQUFPQTtJQUNYO0lBQ0FJLFVBQVVGLFFBQVFOLElBQUksQ0FBQyxDQUFDLEVBQUVLLFdBQVcsWUFBWSxFQUFFSSxLQUFLQyxTQUFTLENBQUNOLFlBQVksa0JBQWtCLEVBQUVLLEtBQUtDLFNBQVMsQ0FBQ0MsT0FBT0MsSUFBSSxDQUFDZixlQUFlLENBQUM7SUFDN0ksT0FBT1U7QUFDWCxFQUFFO0FBQ0YsU0FBU00sUUFBUztBQUNsQixTQUFTQyxVQUFVQyxPQUFPLEVBQUVDLE1BQU0sRUFBRUMsUUFBUTtJQUN4QyxJQUFJLENBQUNELFVBQVVuQixZQUFZLENBQUNrQixRQUFRLEdBQUdsQixZQUFZLENBQUNvQixTQUFTLEVBQUU7UUFDM0QsT0FBT0o7SUFDWCxPQUNLO1FBQ0QsOERBQThEO1FBQzlELE9BQU9HLE1BQU0sQ0FBQ0QsUUFBUSxDQUFDRyxJQUFJLENBQUNGO0lBQ2hDO0FBQ0o7QUFDQSxNQUFNRyxhQUFhO0lBQ2ZwQixPQUFPYztJQUNQYixNQUFNYTtJQUNOWixNQUFNWTtJQUNOWCxPQUFPVztBQUNYO0FBQ0EsSUFBSU8sZ0JBQWdCLElBQUlDO0FBQ2pCLFNBQVNiLFVBQVVGLE1BQU07SUFDNUIsTUFBTVUsU0FBU1YsT0FBT1UsTUFBTTtJQUM1QixNQUFNQyxXQUFXWCxPQUFPVyxRQUFRLElBQUk7SUFDcEMsSUFBSSxDQUFDRCxRQUFRO1FBQ1QsT0FBT0c7SUFDWDtJQUNBLE1BQU1HLGVBQWVGLGNBQWNHLEdBQUcsQ0FBQ1A7SUFDdkMsSUFBSU0sZ0JBQWdCQSxZQUFZLENBQUMsRUFBRSxLQUFLTCxVQUFVO1FBQzlDLE9BQU9LLFlBQVksQ0FBQyxFQUFFO0lBQzFCO0lBQ0EsTUFBTUUsY0FBYztRQUNoQnpCLE9BQU9lLFVBQVUsU0FBU0UsUUFBUUM7UUFDbENqQixNQUFNYyxVQUFVLFFBQVFFLFFBQVFDO1FBQ2hDaEIsTUFBTWEsVUFBVSxRQUFRRSxRQUFRQztRQUNoQ2YsT0FBT1ksVUFBVSxTQUFTRSxRQUFRQztJQUN0QztJQUNBRyxjQUFjSyxHQUFHLENBQUNULFFBQVE7UUFBQ0M7UUFBVU87S0FBWTtJQUNqRCxPQUFPQTtBQUNYO0FBQ08sTUFBTUUsdUJBQXVCLENBQUNDO0lBQ2pDLElBQUlBLFFBQVFDLE9BQU8sRUFBRTtRQUNqQkQsUUFBUUMsT0FBTyxHQUFHO1lBQUUsR0FBR0QsUUFBUUMsT0FBTztRQUFDO1FBQ3ZDLE9BQU9ELFFBQVFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsOEJBQThCO0lBQ3JFO0lBQ0EsSUFBSUQsUUFBUUUsT0FBTyxFQUFFO1FBQ2pCRixRQUFRRSxPQUFPLEdBQUdsQixPQUFPbUIsV0FBVyxDQUFDLENBQUNILFFBQVFFLE9BQU8sWUFBWUUsVUFBVTtlQUFJSixRQUFRRSxPQUFPO1NBQUMsR0FBR2xCLE9BQU9xQixPQUFPLENBQUNMLFFBQVFFLE9BQU8sR0FBR0ksR0FBRyxDQUFDLENBQUMsQ0FBQ0MsTUFBTUMsTUFBTSxHQUFLO2dCQUN0SkQ7Z0JBQ0NBLEtBQUtFLFdBQVcsT0FBTyxlQUNwQkYsS0FBS0UsV0FBVyxPQUFPLG1CQUN2QkYsS0FBS0UsV0FBVyxPQUFPLFlBQ3ZCRixLQUFLRSxXQUFXLE9BQU8sZUFDdkIsUUFDRUQ7YUFDVDtJQUNMO0lBQ0EsSUFBSSx5QkFBeUJSLFNBQVM7UUFDbEMsSUFBSUEsUUFBUVUsbUJBQW1CLEVBQUU7WUFDN0JWLFFBQVFXLE9BQU8sR0FBR1gsUUFBUVUsbUJBQW1CO1FBQ2pEO1FBQ0EsT0FBT1YsUUFBUVUsbUJBQW1CO0lBQ3RDO0lBQ0EsT0FBT1Y7QUFDWCxFQUFFLENBQ0YsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXJ0aWZ5LWFnZW50Ly4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL3V0aWxzL2xvZy5tanM/OTMxNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgaGFzT3duIH0gZnJvbSBcIi4vdmFsdWVzLm1qc1wiO1xuY29uc3QgbGV2ZWxOdW1iZXJzID0ge1xuICAgIG9mZjogMCxcbiAgICBlcnJvcjogMjAwLFxuICAgIHdhcm46IDMwMCxcbiAgICBpbmZvOiA0MDAsXG4gICAgZGVidWc6IDUwMCxcbn07XG5leHBvcnQgY29uc3QgcGFyc2VMb2dMZXZlbCA9IChtYXliZUxldmVsLCBzb3VyY2VOYW1lLCBjbGllbnQpID0+IHtcbiAgICBpZiAoIW1heWJlTGV2ZWwpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKGhhc093bihsZXZlbE51bWJlcnMsIG1heWJlTGV2ZWwpKSB7XG4gICAgICAgIHJldHVybiBtYXliZUxldmVsO1xuICAgIH1cbiAgICBsb2dnZXJGb3IoY2xpZW50KS53YXJuKGAke3NvdXJjZU5hbWV9IHdhcyBzZXQgdG8gJHtKU09OLnN0cmluZ2lmeShtYXliZUxldmVsKX0sIGV4cGVjdGVkIG9uZSBvZiAke0pTT04uc3RyaW5naWZ5KE9iamVjdC5rZXlzKGxldmVsTnVtYmVycykpfWApO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG59O1xuZnVuY3Rpb24gbm9vcCgpIHsgfVxuZnVuY3Rpb24gbWFrZUxvZ0ZuKGZuTGV2ZWwsIGxvZ2dlciwgbG9nTGV2ZWwpIHtcbiAgICBpZiAoIWxvZ2dlciB8fCBsZXZlbE51bWJlcnNbZm5MZXZlbF0gPiBsZXZlbE51bWJlcnNbbG9nTGV2ZWxdKSB7XG4gICAgICAgIHJldHVybiBub29wO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gRG9uJ3Qgd3JhcCBsb2dnZXIgZnVuY3Rpb25zLCB3ZSB3YW50IHRoZSBzdGFja3RyYWNlIGludGFjdCFcbiAgICAgICAgcmV0dXJuIGxvZ2dlcltmbkxldmVsXS5iaW5kKGxvZ2dlcik7XG4gICAgfVxufVxuY29uc3Qgbm9vcExvZ2dlciA9IHtcbiAgICBlcnJvcjogbm9vcCxcbiAgICB3YXJuOiBub29wLFxuICAgIGluZm86IG5vb3AsXG4gICAgZGVidWc6IG5vb3AsXG59O1xubGV0IGNhY2hlZExvZ2dlcnMgPSBuZXcgV2Vha01hcCgpO1xuZXhwb3J0IGZ1bmN0aW9uIGxvZ2dlckZvcihjbGllbnQpIHtcbiAgICBjb25zdCBsb2dnZXIgPSBjbGllbnQubG9nZ2VyO1xuICAgIGNvbnN0IGxvZ0xldmVsID0gY2xpZW50LmxvZ0xldmVsID8/ICdvZmYnO1xuICAgIGlmICghbG9nZ2VyKSB7XG4gICAgICAgIHJldHVybiBub29wTG9nZ2VyO1xuICAgIH1cbiAgICBjb25zdCBjYWNoZWRMb2dnZXIgPSBjYWNoZWRMb2dnZXJzLmdldChsb2dnZXIpO1xuICAgIGlmIChjYWNoZWRMb2dnZXIgJiYgY2FjaGVkTG9nZ2VyWzBdID09PSBsb2dMZXZlbCkge1xuICAgICAgICByZXR1cm4gY2FjaGVkTG9nZ2VyWzFdO1xuICAgIH1cbiAgICBjb25zdCBsZXZlbExvZ2dlciA9IHtcbiAgICAgICAgZXJyb3I6IG1ha2VMb2dGbignZXJyb3InLCBsb2dnZXIsIGxvZ0xldmVsKSxcbiAgICAgICAgd2FybjogbWFrZUxvZ0ZuKCd3YXJuJywgbG9nZ2VyLCBsb2dMZXZlbCksXG4gICAgICAgIGluZm86IG1ha2VMb2dGbignaW5mbycsIGxvZ2dlciwgbG9nTGV2ZWwpLFxuICAgICAgICBkZWJ1ZzogbWFrZUxvZ0ZuKCdkZWJ1ZycsIGxvZ2dlciwgbG9nTGV2ZWwpLFxuICAgIH07XG4gICAgY2FjaGVkTG9nZ2Vycy5zZXQobG9nZ2VyLCBbbG9nTGV2ZWwsIGxldmVsTG9nZ2VyXSk7XG4gICAgcmV0dXJuIGxldmVsTG9nZ2VyO1xufVxuZXhwb3J0IGNvbnN0IGZvcm1hdFJlcXVlc3REZXRhaWxzID0gKGRldGFpbHMpID0+IHtcbiAgICBpZiAoZGV0YWlscy5vcHRpb25zKSB7XG4gICAgICAgIGRldGFpbHMub3B0aW9ucyA9IHsgLi4uZGV0YWlscy5vcHRpb25zIH07XG4gICAgICAgIGRlbGV0ZSBkZXRhaWxzLm9wdGlvbnNbJ2hlYWRlcnMnXTsgLy8gcmVkdW5kYW50ICsgbGVha3MgaW50ZXJuYWxzXG4gICAgfVxuICAgIGlmIChkZXRhaWxzLmhlYWRlcnMpIHtcbiAgICAgICAgZGV0YWlscy5oZWFkZXJzID0gT2JqZWN0LmZyb21FbnRyaWVzKChkZXRhaWxzLmhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzID8gWy4uLmRldGFpbHMuaGVhZGVyc10gOiBPYmplY3QuZW50cmllcyhkZXRhaWxzLmhlYWRlcnMpKS5tYXAoKFtuYW1lLCB2YWx1ZV0pID0+IFtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAobmFtZS50b0xvd2VyQ2FzZSgpID09PSAneC1hcGkta2V5JyB8fFxuICAgICAgICAgICAgICAgIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2F1dGhvcml6YXRpb24nIHx8XG4gICAgICAgICAgICAgICAgbmFtZS50b0xvd2VyQ2FzZSgpID09PSAnY29va2llJyB8fFxuICAgICAgICAgICAgICAgIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3NldC1jb29raWUnKSA/XG4gICAgICAgICAgICAgICAgJyoqKidcbiAgICAgICAgICAgICAgICA6IHZhbHVlLFxuICAgICAgICBdKSk7XG4gICAgfVxuICAgIGlmICgncmV0cnlPZlJlcXVlc3RMb2dJRCcgaW4gZGV0YWlscykge1xuICAgICAgICBpZiAoZGV0YWlscy5yZXRyeU9mUmVxdWVzdExvZ0lEKSB7XG4gICAgICAgICAgICBkZXRhaWxzLnJldHJ5T2YgPSBkZXRhaWxzLnJldHJ5T2ZSZXF1ZXN0TG9nSUQ7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIGRldGFpbHMucmV0cnlPZlJlcXVlc3RMb2dJRDtcbiAgICB9XG4gICAgcmV0dXJuIGRldGFpbHM7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nLm1qcy5tYXAiXSwibmFtZXMiOlsiaGFzT3duIiwibGV2ZWxOdW1iZXJzIiwib2ZmIiwiZXJyb3IiLCJ3YXJuIiwiaW5mbyIsImRlYnVnIiwicGFyc2VMb2dMZXZlbCIsIm1heWJlTGV2ZWwiLCJzb3VyY2VOYW1lIiwiY2xpZW50IiwidW5kZWZpbmVkIiwibG9nZ2VyRm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsIk9iamVjdCIsImtleXMiLCJub29wIiwibWFrZUxvZ0ZuIiwiZm5MZXZlbCIsImxvZ2dlciIsImxvZ0xldmVsIiwiYmluZCIsIm5vb3BMb2dnZXIiLCJjYWNoZWRMb2dnZXJzIiwiV2Vha01hcCIsImNhY2hlZExvZ2dlciIsImdldCIsImxldmVsTG9nZ2VyIiwic2V0IiwiZm9ybWF0UmVxdWVzdERldGFpbHMiLCJkZXRhaWxzIiwib3B0aW9ucyIsImhlYWRlcnMiLCJmcm9tRW50cmllcyIsIkhlYWRlcnMiLCJlbnRyaWVzIiwibWFwIiwibmFtZSIsInZhbHVlIiwidG9Mb3dlckNhc2UiLCJyZXRyeU9mUmVxdWVzdExvZ0lEIiwicmV0cnlPZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/log.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/path.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/internal/utils/path.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPathTagFunction: () => (/* binding */ createPathTagFunction),\n/* harmony export */   encodeURIPath: () => (/* binding */ encodeURIPath),\n/* harmony export */   path: () => (/* binding */ path)\n/* harmony export */ });\n/* harmony import */ var _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/error.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/error.mjs\");\n\n/**\n * Percent-encode everything that isn't safe to have in a path without encoding safe chars.\n *\n * Taken from https://datatracker.ietf.org/doc/html/rfc3986#section-3.3:\n * > unreserved  = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n * > sub-delims  = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\" / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n * > pchar       = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n */ function encodeURIPath(str) {\n    return str.replace(/[^A-Za-z0-9\\-._~!$&'()*+,;=:@]+/g, encodeURIComponent);\n}\nconst createPathTagFunction = (pathEncoder = encodeURIPath)=>function path(statics, ...params) {\n        // If there are no params, no processing is needed.\n        if (statics.length === 1) return statics[0];\n        let postPath = false;\n        const path1 = statics.reduce((previousValue, currentValue, index)=>{\n            if (/[?#]/.test(currentValue)) {\n                postPath = true;\n            }\n            return previousValue + currentValue + (index === params.length ? \"\" : (postPath ? encodeURIComponent : pathEncoder)(String(params[index])));\n        }, \"\");\n        const pathOnly = path1.split(/[?#]/, 1)[0];\n        const invalidSegments = [];\n        const invalidSegmentPattern = /(?<=^|\\/)(?:\\.|%2e){1,2}(?=\\/|$)/gi;\n        let match;\n        // Find all invalid segments\n        while((match = invalidSegmentPattern.exec(pathOnly)) !== null){\n            invalidSegments.push({\n                start: match.index,\n                length: match[0].length\n            });\n        }\n        if (invalidSegments.length > 0) {\n            let lastEnd = 0;\n            const underline = invalidSegments.reduce((acc, segment)=>{\n                const spaces = \" \".repeat(segment.start - lastEnd);\n                const arrows = \"^\".repeat(segment.length);\n                lastEnd = segment.start + segment.length;\n                return acc + spaces + arrows;\n            }, \"\");\n            throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.AnthropicError(`Path parameters result in path with invalid segments:\\n${path1}\\n${underline}`);\n        }\n        return path1;\n    };\n/**\n * URI-encodes path params and ensures no unsafe /./ or /../ path segments are introduced.\n */ const path = createPathTagFunction(encodeURIPath); //# sourceMappingURL=path.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvdXRpbHMvcGF0aC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFzRDtBQUN0RDs7Ozs7OztDQU9DLEdBQ00sU0FBU0MsY0FBY0MsR0FBRztJQUM3QixPQUFPQSxJQUFJQyxPQUFPLENBQUMsb0NBQW9DQztBQUMzRDtBQUNPLE1BQU1DLHdCQUF3QixDQUFDQyxjQUFjTCxhQUFhLEdBQUssU0FBU00sS0FBS0MsT0FBTyxFQUFFLEdBQUdDLE1BQU07UUFDbEcsbURBQW1EO1FBQ25ELElBQUlELFFBQVFFLE1BQU0sS0FBSyxHQUNuQixPQUFPRixPQUFPLENBQUMsRUFBRTtRQUNyQixJQUFJRyxXQUFXO1FBQ2YsTUFBTUosUUFBT0MsUUFBUUksTUFBTSxDQUFDLENBQUNDLGVBQWVDLGNBQWNDO1lBQ3RELElBQUksT0FBT0MsSUFBSSxDQUFDRixlQUFlO2dCQUMzQkgsV0FBVztZQUNmO1lBQ0EsT0FBUUUsZ0JBQ0pDLGVBQ0NDLENBQUFBLFVBQVVOLE9BQU9DLE1BQU0sR0FBRyxLQUFLLENBQUNDLFdBQVdQLHFCQUFxQkUsV0FBVSxFQUFHVyxPQUFPUixNQUFNLENBQUNNLE1BQU0sRUFBQztRQUMzRyxHQUFHO1FBQ0gsTUFBTUcsV0FBV1gsTUFBS1ksS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUU7UUFDekMsTUFBTUMsa0JBQWtCLEVBQUU7UUFDMUIsTUFBTUMsd0JBQXdCO1FBQzlCLElBQUlDO1FBQ0osNEJBQTRCO1FBQzVCLE1BQU8sQ0FBQ0EsUUFBUUQsc0JBQXNCRSxJQUFJLENBQUNMLFNBQVEsTUFBTyxLQUFNO1lBQzVERSxnQkFBZ0JJLElBQUksQ0FBQztnQkFDakJDLE9BQU9ILE1BQU1QLEtBQUs7Z0JBQ2xCTCxRQUFRWSxLQUFLLENBQUMsRUFBRSxDQUFDWixNQUFNO1lBQzNCO1FBQ0o7UUFDQSxJQUFJVSxnQkFBZ0JWLE1BQU0sR0FBRyxHQUFHO1lBQzVCLElBQUlnQixVQUFVO1lBQ2QsTUFBTUMsWUFBWVAsZ0JBQWdCUixNQUFNLENBQUMsQ0FBQ2dCLEtBQUtDO2dCQUMzQyxNQUFNQyxTQUFTLElBQUlDLE1BQU0sQ0FBQ0YsUUFBUUosS0FBSyxHQUFHQztnQkFDMUMsTUFBTU0sU0FBUyxJQUFJRCxNQUFNLENBQUNGLFFBQVFuQixNQUFNO2dCQUN4Q2dCLFVBQVVHLFFBQVFKLEtBQUssR0FBR0ksUUFBUW5CLE1BQU07Z0JBQ3hDLE9BQU9rQixNQUFNRSxTQUFTRTtZQUMxQixHQUFHO1lBQ0gsTUFBTSxJQUFJaEMsMkRBQWNBLENBQUMsQ0FBQyx1REFBdUQsRUFBRU8sTUFBSyxFQUFFLEVBQUVvQixVQUFVLENBQUM7UUFDM0c7UUFDQSxPQUFPcEI7SUFDWCxFQUFFO0FBQ0Y7O0NBRUMsR0FDTSxNQUFNQSxPQUFPRixzQkFBc0JKLGVBQWUsQ0FDekQsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXJ0aWZ5LWFnZW50Ly4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL3V0aWxzL3BhdGgubWpzPzJiYjciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW50aHJvcGljRXJyb3IgfSBmcm9tIFwiLi4vLi4vY29yZS9lcnJvci5tanNcIjtcbi8qKlxuICogUGVyY2VudC1lbmNvZGUgZXZlcnl0aGluZyB0aGF0IGlzbid0IHNhZmUgdG8gaGF2ZSBpbiBhIHBhdGggd2l0aG91dCBlbmNvZGluZyBzYWZlIGNoYXJzLlxuICpcbiAqIFRha2VuIGZyb20gaHR0cHM6Ly9kYXRhdHJhY2tlci5pZXRmLm9yZy9kb2MvaHRtbC9yZmMzOTg2I3NlY3Rpb24tMy4zOlxuICogPiB1bnJlc2VydmVkICA9IEFMUEhBIC8gRElHSVQgLyBcIi1cIiAvIFwiLlwiIC8gXCJfXCIgLyBcIn5cIlxuICogPiBzdWItZGVsaW1zICA9IFwiIVwiIC8gXCIkXCIgLyBcIiZcIiAvIFwiJ1wiIC8gXCIoXCIgLyBcIilcIiAvIFwiKlwiIC8gXCIrXCIgLyBcIixcIiAvIFwiO1wiIC8gXCI9XCJcbiAqID4gcGNoYXIgICAgICAgPSB1bnJlc2VydmVkIC8gcGN0LWVuY29kZWQgLyBzdWItZGVsaW1zIC8gXCI6XCIgLyBcIkBcIlxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlVVJJUGF0aChzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoL1teQS1aYS16MC05XFwtLl9+ISQmJygpKissOz06QF0rL2csIGVuY29kZVVSSUNvbXBvbmVudCk7XG59XG5leHBvcnQgY29uc3QgY3JlYXRlUGF0aFRhZ0Z1bmN0aW9uID0gKHBhdGhFbmNvZGVyID0gZW5jb2RlVVJJUGF0aCkgPT4gZnVuY3Rpb24gcGF0aChzdGF0aWNzLCAuLi5wYXJhbXMpIHtcbiAgICAvLyBJZiB0aGVyZSBhcmUgbm8gcGFyYW1zLCBubyBwcm9jZXNzaW5nIGlzIG5lZWRlZC5cbiAgICBpZiAoc3RhdGljcy5sZW5ndGggPT09IDEpXG4gICAgICAgIHJldHVybiBzdGF0aWNzWzBdO1xuICAgIGxldCBwb3N0UGF0aCA9IGZhbHNlO1xuICAgIGNvbnN0IHBhdGggPSBzdGF0aWNzLnJlZHVjZSgocHJldmlvdXNWYWx1ZSwgY3VycmVudFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICBpZiAoL1s/I10vLnRlc3QoY3VycmVudFZhbHVlKSkge1xuICAgICAgICAgICAgcG9zdFBhdGggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAocHJldmlvdXNWYWx1ZSArXG4gICAgICAgICAgICBjdXJyZW50VmFsdWUgK1xuICAgICAgICAgICAgKGluZGV4ID09PSBwYXJhbXMubGVuZ3RoID8gJycgOiAocG9zdFBhdGggPyBlbmNvZGVVUklDb21wb25lbnQgOiBwYXRoRW5jb2RlcikoU3RyaW5nKHBhcmFtc1tpbmRleF0pKSkpO1xuICAgIH0sICcnKTtcbiAgICBjb25zdCBwYXRoT25seSA9IHBhdGguc3BsaXQoL1s/I10vLCAxKVswXTtcbiAgICBjb25zdCBpbnZhbGlkU2VnbWVudHMgPSBbXTtcbiAgICBjb25zdCBpbnZhbGlkU2VnbWVudFBhdHRlcm4gPSAvKD88PV58XFwvKSg/OlxcLnwlMmUpezEsMn0oPz1cXC98JCkvZ2k7XG4gICAgbGV0IG1hdGNoO1xuICAgIC8vIEZpbmQgYWxsIGludmFsaWQgc2VnbWVudHNcbiAgICB3aGlsZSAoKG1hdGNoID0gaW52YWxpZFNlZ21lbnRQYXR0ZXJuLmV4ZWMocGF0aE9ubHkpKSAhPT0gbnVsbCkge1xuICAgICAgICBpbnZhbGlkU2VnbWVudHMucHVzaCh7XG4gICAgICAgICAgICBzdGFydDogbWF0Y2guaW5kZXgsXG4gICAgICAgICAgICBsZW5ndGg6IG1hdGNoWzBdLmxlbmd0aCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnZhbGlkU2VnbWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICBsZXQgbGFzdEVuZCA9IDA7XG4gICAgICAgIGNvbnN0IHVuZGVybGluZSA9IGludmFsaWRTZWdtZW50cy5yZWR1Y2UoKGFjYywgc2VnbWVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3BhY2VzID0gJyAnLnJlcGVhdChzZWdtZW50LnN0YXJ0IC0gbGFzdEVuZCk7XG4gICAgICAgICAgICBjb25zdCBhcnJvd3MgPSAnXicucmVwZWF0KHNlZ21lbnQubGVuZ3RoKTtcbiAgICAgICAgICAgIGxhc3RFbmQgPSBzZWdtZW50LnN0YXJ0ICsgc2VnbWVudC5sZW5ndGg7XG4gICAgICAgICAgICByZXR1cm4gYWNjICsgc3BhY2VzICsgYXJyb3dzO1xuICAgICAgICB9LCAnJyk7XG4gICAgICAgIHRocm93IG5ldyBBbnRocm9waWNFcnJvcihgUGF0aCBwYXJhbWV0ZXJzIHJlc3VsdCBpbiBwYXRoIHdpdGggaW52YWxpZCBzZWdtZW50czpcXG4ke3BhdGh9XFxuJHt1bmRlcmxpbmV9YCk7XG4gICAgfVxuICAgIHJldHVybiBwYXRoO1xufTtcbi8qKlxuICogVVJJLWVuY29kZXMgcGF0aCBwYXJhbXMgYW5kIGVuc3VyZXMgbm8gdW5zYWZlIC8uLyBvciAvLi4vIHBhdGggc2VnbWVudHMgYXJlIGludHJvZHVjZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBwYXRoID0gY3JlYXRlUGF0aFRhZ0Z1bmN0aW9uKGVuY29kZVVSSVBhdGgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGF0aC5tanMubWFwIl0sIm5hbWVzIjpbIkFudGhyb3BpY0Vycm9yIiwiZW5jb2RlVVJJUGF0aCIsInN0ciIsInJlcGxhY2UiLCJlbmNvZGVVUklDb21wb25lbnQiLCJjcmVhdGVQYXRoVGFnRnVuY3Rpb24iLCJwYXRoRW5jb2RlciIsInBhdGgiLCJzdGF0aWNzIiwicGFyYW1zIiwibGVuZ3RoIiwicG9zdFBhdGgiLCJyZWR1Y2UiLCJwcmV2aW91c1ZhbHVlIiwiY3VycmVudFZhbHVlIiwiaW5kZXgiLCJ0ZXN0IiwiU3RyaW5nIiwicGF0aE9ubHkiLCJzcGxpdCIsImludmFsaWRTZWdtZW50cyIsImludmFsaWRTZWdtZW50UGF0dGVybiIsIm1hdGNoIiwiZXhlYyIsInB1c2giLCJzdGFydCIsImxhc3RFbmQiLCJ1bmRlcmxpbmUiLCJhY2MiLCJzZWdtZW50Iiwic3BhY2VzIiwicmVwZWF0IiwiYXJyb3dzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/path.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/sleep.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/internal/utils/sleep.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sleep: () => (/* binding */ sleep)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nconst sleep = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms)); //# sourceMappingURL=sleep.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvdXRpbHMvc2xlZXAubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxzRkFBc0Y7QUFDL0UsTUFBTUEsUUFBUSxDQUFDQyxLQUFPLElBQUlDLFFBQVEsQ0FBQ0MsVUFBWUMsV0FBV0QsU0FBU0YsS0FBSyxDQUMvRSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcnRpZnktYWdlbnQvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvdXRpbHMvc2xlZXAubWpzPzI2MmQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmV4cG9ydCBjb25zdCBzbGVlcCA9IChtcykgPT4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNsZWVwLm1qcy5tYXAiXSwibmFtZXMiOlsic2xlZXAiLCJtcyIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/sleep.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/uuid.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/internal/utils/uuid.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   uuid4: () => (/* binding */ uuid4)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n/**\n * https://stackoverflow.com/a/2117523\n */ let uuid4 = function() {\n    const { crypto } = globalThis;\n    if (crypto?.randomUUID) {\n        uuid4 = crypto.randomUUID.bind(crypto);\n        return crypto.randomUUID();\n    }\n    const u8 = new Uint8Array(1);\n    const randomByte = crypto ? ()=>crypto.getRandomValues(u8)[0] : ()=>Math.random() * 0xff & 0xff;\n    return \"10000000-1000-4000-8000-100000000000\".replace(/[018]/g, (c)=>(+c ^ randomByte() & 15 >> +c / 4).toString(16));\n}; //# sourceMappingURL=uuid.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvdXRpbHMvdXVpZC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHNGQUFzRjtBQUN0Rjs7Q0FFQyxHQUNNLElBQUlBLFFBQVE7SUFDZixNQUFNLEVBQUVDLE1BQU0sRUFBRSxHQUFHQztJQUNuQixJQUFJRCxRQUFRRSxZQUFZO1FBQ3BCSCxRQUFRQyxPQUFPRSxVQUFVLENBQUNDLElBQUksQ0FBQ0g7UUFDL0IsT0FBT0EsT0FBT0UsVUFBVTtJQUM1QjtJQUNBLE1BQU1FLEtBQUssSUFBSUMsV0FBVztJQUMxQixNQUFNQyxhQUFhTixTQUFTLElBQU1BLE9BQU9PLGVBQWUsQ0FBQ0gsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFNLEtBQU1LLE1BQU0sS0FBSyxPQUFRO0lBQ2pHLE9BQU8sdUNBQXVDQyxPQUFPLENBQUMsVUFBVSxDQUFDQyxJQUFNLENBQUMsQ0FBQ0EsSUFBS0wsZUFBZ0IsTUFBTyxDQUFDSyxJQUFJLENBQUcsRUFBR0MsUUFBUSxDQUFDO0FBQzdILEVBQUUsQ0FDRixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcnRpZnktYWdlbnQvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvdXRpbHMvdXVpZC5tanM/ZTRlZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuLyoqXG4gKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjExNzUyM1xuICovXG5leHBvcnQgbGV0IHV1aWQ0ID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHsgY3J5cHRvIH0gPSBnbG9iYWxUaGlzO1xuICAgIGlmIChjcnlwdG8/LnJhbmRvbVVVSUQpIHtcbiAgICAgICAgdXVpZDQgPSBjcnlwdG8ucmFuZG9tVVVJRC5iaW5kKGNyeXB0byk7XG4gICAgICAgIHJldHVybiBjcnlwdG8ucmFuZG9tVVVJRCgpO1xuICAgIH1cbiAgICBjb25zdCB1OCA9IG5ldyBVaW50OEFycmF5KDEpO1xuICAgIGNvbnN0IHJhbmRvbUJ5dGUgPSBjcnlwdG8gPyAoKSA9PiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHU4KVswXSA6ICgpID0+IChNYXRoLnJhbmRvbSgpICogMHhmZikgJiAweGZmO1xuICAgIHJldHVybiAnMTAwMDAwMDAtMTAwMC00MDAwLTgwMDAtMTAwMDAwMDAwMDAwJy5yZXBsYWNlKC9bMDE4XS9nLCAoYykgPT4gKCtjIF4gKHJhbmRvbUJ5dGUoKSAmICgxNSA+PiAoK2MgLyA0KSkpKS50b1N0cmluZygxNikpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV1aWQubWpzLm1hcCJdLCJuYW1lcyI6WyJ1dWlkNCIsImNyeXB0byIsImdsb2JhbFRoaXMiLCJyYW5kb21VVUlEIiwiYmluZCIsInU4IiwiVWludDhBcnJheSIsInJhbmRvbUJ5dGUiLCJnZXRSYW5kb21WYWx1ZXMiLCJNYXRoIiwicmFuZG9tIiwicmVwbGFjZSIsImMiLCJ0b1N0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/uuid.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/values.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/internal/utils/values.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   coerceBoolean: () => (/* binding */ coerceBoolean),\n/* harmony export */   coerceFloat: () => (/* binding */ coerceFloat),\n/* harmony export */   coerceInteger: () => (/* binding */ coerceInteger),\n/* harmony export */   ensurePresent: () => (/* binding */ ensurePresent),\n/* harmony export */   hasOwn: () => (/* binding */ hasOwn),\n/* harmony export */   isAbsoluteURL: () => (/* binding */ isAbsoluteURL),\n/* harmony export */   isEmptyObj: () => (/* binding */ isEmptyObj),\n/* harmony export */   isObj: () => (/* binding */ isObj),\n/* harmony export */   maybeCoerceBoolean: () => (/* binding */ maybeCoerceBoolean),\n/* harmony export */   maybeCoerceFloat: () => (/* binding */ maybeCoerceFloat),\n/* harmony export */   maybeCoerceInteger: () => (/* binding */ maybeCoerceInteger),\n/* harmony export */   maybeObj: () => (/* binding */ maybeObj),\n/* harmony export */   safeJSON: () => (/* binding */ safeJSON),\n/* harmony export */   validatePositiveInteger: () => (/* binding */ validatePositiveInteger)\n/* harmony export */ });\n/* harmony import */ var _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/error.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/error.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n// https://url.spec.whatwg.org/#url-scheme-string\nconst startsWithSchemeRegexp = /^[a-z][a-z0-9+.-]*:/i;\nconst isAbsoluteURL = (url)=>{\n    return startsWithSchemeRegexp.test(url);\n};\n/** Returns an object if the given value isn't an object, otherwise returns as-is */ function maybeObj(x) {\n    if (typeof x !== \"object\") {\n        return {};\n    }\n    return x ?? {};\n}\n// https://stackoverflow.com/a/34491287\nfunction isEmptyObj(obj) {\n    if (!obj) return true;\n    for(const _k in obj)return false;\n    return true;\n}\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nfunction hasOwn(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction isObj(obj) {\n    return obj != null && typeof obj === \"object\" && !Array.isArray(obj);\n}\nconst ensurePresent = (value)=>{\n    if (value == null) {\n        throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.AnthropicError(`Expected a value to be given but received ${value} instead.`);\n    }\n    return value;\n};\nconst validatePositiveInteger = (name, n)=>{\n    if (typeof n !== \"number\" || !Number.isInteger(n)) {\n        throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.AnthropicError(`${name} must be an integer`);\n    }\n    if (n < 0) {\n        throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.AnthropicError(`${name} must be a positive integer`);\n    }\n    return n;\n};\nconst coerceInteger = (value)=>{\n    if (typeof value === \"number\") return Math.round(value);\n    if (typeof value === \"string\") return parseInt(value, 10);\n    throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.AnthropicError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nconst coerceFloat = (value)=>{\n    if (typeof value === \"number\") return value;\n    if (typeof value === \"string\") return parseFloat(value);\n    throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.AnthropicError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nconst coerceBoolean = (value)=>{\n    if (typeof value === \"boolean\") return value;\n    if (typeof value === \"string\") return value === \"true\";\n    return Boolean(value);\n};\nconst maybeCoerceInteger = (value)=>{\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceInteger(value);\n};\nconst maybeCoerceFloat = (value)=>{\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceFloat(value);\n};\nconst maybeCoerceBoolean = (value)=>{\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceBoolean(value);\n};\nconst safeJSON = (text)=>{\n    try {\n        return JSON.parse(text);\n    } catch (err) {\n        return undefined;\n    }\n}; //# sourceMappingURL=values.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvdXRpbHMvdmFsdWVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxzRkFBc0Y7QUFDaEM7QUFDdEQsaURBQWlEO0FBQ2pELE1BQU1DLHlCQUF5QjtBQUN4QixNQUFNQyxnQkFBZ0IsQ0FBQ0M7SUFDMUIsT0FBT0YsdUJBQXVCRyxJQUFJLENBQUNEO0FBQ3ZDLEVBQUU7QUFDRixrRkFBa0YsR0FDM0UsU0FBU0UsU0FBU0MsQ0FBQztJQUN0QixJQUFJLE9BQU9BLE1BQU0sVUFBVTtRQUN2QixPQUFPLENBQUM7SUFDWjtJQUNBLE9BQU9BLEtBQUssQ0FBQztBQUNqQjtBQUNBLHVDQUF1QztBQUNoQyxTQUFTQyxXQUFXQyxHQUFHO0lBQzFCLElBQUksQ0FBQ0EsS0FDRCxPQUFPO0lBQ1gsSUFBSyxNQUFNQyxNQUFNRCxJQUNiLE9BQU87SUFDWCxPQUFPO0FBQ1g7QUFDQSw2REFBNkQ7QUFDdEQsU0FBU0UsT0FBT0YsR0FBRyxFQUFFRyxHQUFHO0lBQzNCLE9BQU9DLE9BQU9DLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNQLEtBQUtHO0FBQ3JEO0FBQ08sU0FBU0ssTUFBTVIsR0FBRztJQUNyQixPQUFPQSxPQUFPLFFBQVEsT0FBT0EsUUFBUSxZQUFZLENBQUNTLE1BQU1DLE9BQU8sQ0FBQ1Y7QUFDcEU7QUFDTyxNQUFNVyxnQkFBZ0IsQ0FBQ0M7SUFDMUIsSUFBSUEsU0FBUyxNQUFNO1FBQ2YsTUFBTSxJQUFJcEIsMkRBQWNBLENBQUMsQ0FBQywwQ0FBMEMsRUFBRW9CLE1BQU0sU0FBUyxDQUFDO0lBQzFGO0lBQ0EsT0FBT0E7QUFDWCxFQUFFO0FBQ0ssTUFBTUMsMEJBQTBCLENBQUNDLE1BQU1DO0lBQzFDLElBQUksT0FBT0EsTUFBTSxZQUFZLENBQUNDLE9BQU9DLFNBQVMsQ0FBQ0YsSUFBSTtRQUMvQyxNQUFNLElBQUl2QiwyREFBY0EsQ0FBQyxDQUFDLEVBQUVzQixLQUFLLG1CQUFtQixDQUFDO0lBQ3pEO0lBQ0EsSUFBSUMsSUFBSSxHQUFHO1FBQ1AsTUFBTSxJQUFJdkIsMkRBQWNBLENBQUMsQ0FBQyxFQUFFc0IsS0FBSywyQkFBMkIsQ0FBQztJQUNqRTtJQUNBLE9BQU9DO0FBQ1gsRUFBRTtBQUNLLE1BQU1HLGdCQUFnQixDQUFDTjtJQUMxQixJQUFJLE9BQU9BLFVBQVUsVUFDakIsT0FBT08sS0FBS0MsS0FBSyxDQUFDUjtJQUN0QixJQUFJLE9BQU9BLFVBQVUsVUFDakIsT0FBT1MsU0FBU1QsT0FBTztJQUMzQixNQUFNLElBQUlwQiwyREFBY0EsQ0FBQyxDQUFDLGlCQUFpQixFQUFFb0IsTUFBTSxRQUFRLEVBQUUsT0FBT0EsTUFBTSxlQUFlLENBQUM7QUFDOUYsRUFBRTtBQUNLLE1BQU1VLGNBQWMsQ0FBQ1Y7SUFDeEIsSUFBSSxPQUFPQSxVQUFVLFVBQ2pCLE9BQU9BO0lBQ1gsSUFBSSxPQUFPQSxVQUFVLFVBQ2pCLE9BQU9XLFdBQVdYO0lBQ3RCLE1BQU0sSUFBSXBCLDJEQUFjQSxDQUFDLENBQUMsaUJBQWlCLEVBQUVvQixNQUFNLFFBQVEsRUFBRSxPQUFPQSxNQUFNLGVBQWUsQ0FBQztBQUM5RixFQUFFO0FBQ0ssTUFBTVksZ0JBQWdCLENBQUNaO0lBQzFCLElBQUksT0FBT0EsVUFBVSxXQUNqQixPQUFPQTtJQUNYLElBQUksT0FBT0EsVUFBVSxVQUNqQixPQUFPQSxVQUFVO0lBQ3JCLE9BQU9hLFFBQVFiO0FBQ25CLEVBQUU7QUFDSyxNQUFNYyxxQkFBcUIsQ0FBQ2Q7SUFDL0IsSUFBSUEsVUFBVWUsV0FBVztRQUNyQixPQUFPQTtJQUNYO0lBQ0EsT0FBT1QsY0FBY047QUFDekIsRUFBRTtBQUNLLE1BQU1nQixtQkFBbUIsQ0FBQ2hCO0lBQzdCLElBQUlBLFVBQVVlLFdBQVc7UUFDckIsT0FBT0E7SUFDWDtJQUNBLE9BQU9MLFlBQVlWO0FBQ3ZCLEVBQUU7QUFDSyxNQUFNaUIscUJBQXFCLENBQUNqQjtJQUMvQixJQUFJQSxVQUFVZSxXQUFXO1FBQ3JCLE9BQU9BO0lBQ1g7SUFDQSxPQUFPSCxjQUFjWjtBQUN6QixFQUFFO0FBQ0ssTUFBTWtCLFdBQVcsQ0FBQ0M7SUFDckIsSUFBSTtRQUNBLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ0Y7SUFDdEIsRUFDQSxPQUFPRyxLQUFLO1FBQ1IsT0FBT1A7SUFDWDtBQUNKLEVBQUUsQ0FDRixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcnRpZnktYWdlbnQvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvdXRpbHMvdmFsdWVzLm1qcz9hMDQxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBbnRocm9waWNFcnJvciB9IGZyb20gXCIuLi8uLi9jb3JlL2Vycm9yLm1qc1wiO1xuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmwtc2NoZW1lLXN0cmluZ1xuY29uc3Qgc3RhcnRzV2l0aFNjaGVtZVJlZ2V4cCA9IC9eW2Etel1bYS16MC05Ky4tXSo6L2k7XG5leHBvcnQgY29uc3QgaXNBYnNvbHV0ZVVSTCA9ICh1cmwpID0+IHtcbiAgICByZXR1cm4gc3RhcnRzV2l0aFNjaGVtZVJlZ2V4cC50ZXN0KHVybCk7XG59O1xuLyoqIFJldHVybnMgYW4gb2JqZWN0IGlmIHRoZSBnaXZlbiB2YWx1ZSBpc24ndCBhbiBvYmplY3QsIG90aGVyd2lzZSByZXR1cm5zIGFzLWlzICovXG5leHBvcnQgZnVuY3Rpb24gbWF5YmVPYmooeCkge1xuICAgIGlmICh0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICByZXR1cm4geCA/PyB7fTtcbn1cbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zNDQ5MTI4N1xuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHlPYmoob2JqKSB7XG4gICAgaWYgKCFvYmopXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGZvciAoY29uc3QgX2sgaW4gb2JqKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG59XG4vLyBodHRwczovL2VzbGludC5vcmcvZG9jcy9sYXRlc3QvcnVsZXMvbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5leHBvcnQgZnVuY3Rpb24gaGFzT3duKG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNPYmoob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KG9iaik7XG59XG5leHBvcnQgY29uc3QgZW5zdXJlUHJlc2VudCA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBBbnRocm9waWNFcnJvcihgRXhwZWN0ZWQgYSB2YWx1ZSB0byBiZSBnaXZlbiBidXQgcmVjZWl2ZWQgJHt2YWx1ZX0gaW5zdGVhZC5gKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufTtcbmV4cG9ydCBjb25zdCB2YWxpZGF0ZVBvc2l0aXZlSW50ZWdlciA9IChuYW1lLCBuKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCAhTnVtYmVyLmlzSW50ZWdlcihuKSkge1xuICAgICAgICB0aHJvdyBuZXcgQW50aHJvcGljRXJyb3IoYCR7bmFtZX0gbXVzdCBiZSBhbiBpbnRlZ2VyYCk7XG4gICAgfVxuICAgIGlmIChuIDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgQW50aHJvcGljRXJyb3IoYCR7bmFtZX0gbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXJgKTtcbiAgICB9XG4gICAgcmV0dXJuIG47XG59O1xuZXhwb3J0IGNvbnN0IGNvZXJjZUludGVnZXIgPSAodmFsdWUpID0+IHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUpO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKVxuICAgICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB0aHJvdyBuZXcgQW50aHJvcGljRXJyb3IoYENvdWxkIG5vdCBjb2VyY2UgJHt2YWx1ZX0gKHR5cGU6ICR7dHlwZW9mIHZhbHVlfSkgaW50byBhIG51bWJlcmApO1xufTtcbmV4cG9ydCBjb25zdCBjb2VyY2VGbG9hdCA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpXG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICB0aHJvdyBuZXcgQW50aHJvcGljRXJyb3IoYENvdWxkIG5vdCBjb2VyY2UgJHt2YWx1ZX0gKHR5cGU6ICR7dHlwZW9mIHZhbHVlfSkgaW50byBhIG51bWJlcmApO1xufTtcbmV4cG9ydCBjb25zdCBjb2VyY2VCb29sZWFuID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpXG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gJ3RydWUnO1xuICAgIHJldHVybiBCb29sZWFuKHZhbHVlKTtcbn07XG5leHBvcnQgY29uc3QgbWF5YmVDb2VyY2VJbnRlZ2VyID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIGNvZXJjZUludGVnZXIodmFsdWUpO1xufTtcbmV4cG9ydCBjb25zdCBtYXliZUNvZXJjZUZsb2F0ID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIGNvZXJjZUZsb2F0KHZhbHVlKTtcbn07XG5leHBvcnQgY29uc3QgbWF5YmVDb2VyY2VCb29sZWFuID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIGNvZXJjZUJvb2xlYW4odmFsdWUpO1xufTtcbmV4cG9ydCBjb25zdCBzYWZlSlNPTiA9ICh0ZXh0KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodGV4dCk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsdWVzLm1qcy5tYXAiXSwibmFtZXMiOlsiQW50aHJvcGljRXJyb3IiLCJzdGFydHNXaXRoU2NoZW1lUmVnZXhwIiwiaXNBYnNvbHV0ZVVSTCIsInVybCIsInRlc3QiLCJtYXliZU9iaiIsIngiLCJpc0VtcHR5T2JqIiwib2JqIiwiX2siLCJoYXNPd24iLCJrZXkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpc09iaiIsIkFycmF5IiwiaXNBcnJheSIsImVuc3VyZVByZXNlbnQiLCJ2YWx1ZSIsInZhbGlkYXRlUG9zaXRpdmVJbnRlZ2VyIiwibmFtZSIsIm4iLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJjb2VyY2VJbnRlZ2VyIiwiTWF0aCIsInJvdW5kIiwicGFyc2VJbnQiLCJjb2VyY2VGbG9hdCIsInBhcnNlRmxvYXQiLCJjb2VyY2VCb29sZWFuIiwiQm9vbGVhbiIsIm1heWJlQ29lcmNlSW50ZWdlciIsInVuZGVmaW5lZCIsIm1heWJlQ29lcmNlRmxvYXQiLCJtYXliZUNvZXJjZUJvb2xlYW4iLCJzYWZlSlNPTiIsInRleHQiLCJKU09OIiwicGFyc2UiLCJlcnIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/values.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/lib/BetaMessageStream.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/lib/BetaMessageStream.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BetaMessageStream: () => (/* binding */ BetaMessageStream)\n/* harmony export */ });\n/* harmony import */ var _internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/tslib.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/tslib.mjs\");\n/* harmony import */ var _internal_errors_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/errors.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/errors.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/error.mjs\");\n/* harmony import */ var _streaming_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../streaming.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/streaming.mjs\");\n/* harmony import */ var _vendor_partial_json_parser_parser_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../_vendor/partial-json-parser/parser.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/_vendor/partial-json-parser/parser.mjs\");\nvar _BetaMessageStream_instances, _BetaMessageStream_currentMessageSnapshot, _BetaMessageStream_connectedPromise, _BetaMessageStream_resolveConnectedPromise, _BetaMessageStream_rejectConnectedPromise, _BetaMessageStream_endPromise, _BetaMessageStream_resolveEndPromise, _BetaMessageStream_rejectEndPromise, _BetaMessageStream_listeners, _BetaMessageStream_ended, _BetaMessageStream_errored, _BetaMessageStream_aborted, _BetaMessageStream_catchingPromiseCreated, _BetaMessageStream_response, _BetaMessageStream_request_id, _BetaMessageStream_getFinalMessage, _BetaMessageStream_getFinalText, _BetaMessageStream_handleError, _BetaMessageStream_beginRequest, _BetaMessageStream_addStreamEvent, _BetaMessageStream_endRequest, _BetaMessageStream_accumulateMessage;\n\n\n\n\n\nconst JSON_BUF_PROPERTY = \"__json_buf\";\nfunction tracksToolInput(content) {\n    return content.type === \"tool_use\" || content.type === \"server_tool_use\" || content.type === \"mcp_tool_use\";\n}\nclass BetaMessageStream {\n    constructor(){\n        _BetaMessageStream_instances.add(this);\n        this.messages = [];\n        this.receivedMessages = [];\n        _BetaMessageStream_currentMessageSnapshot.set(this, void 0);\n        this.controller = new AbortController();\n        _BetaMessageStream_connectedPromise.set(this, void 0);\n        _BetaMessageStream_resolveConnectedPromise.set(this, ()=>{});\n        _BetaMessageStream_rejectConnectedPromise.set(this, ()=>{});\n        _BetaMessageStream_endPromise.set(this, void 0);\n        _BetaMessageStream_resolveEndPromise.set(this, ()=>{});\n        _BetaMessageStream_rejectEndPromise.set(this, ()=>{});\n        _BetaMessageStream_listeners.set(this, {});\n        _BetaMessageStream_ended.set(this, false);\n        _BetaMessageStream_errored.set(this, false);\n        _BetaMessageStream_aborted.set(this, false);\n        _BetaMessageStream_catchingPromiseCreated.set(this, false);\n        _BetaMessageStream_response.set(this, void 0);\n        _BetaMessageStream_request_id.set(this, void 0);\n        _BetaMessageStream_handleError.set(this, (error)=>{\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_errored, true, \"f\");\n            if ((0,_internal_errors_mjs__WEBPACK_IMPORTED_MODULE_1__.isAbortError)(error)) {\n                error = new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n            }\n            if (error instanceof _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError) {\n                (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_aborted, true, \"f\");\n                return this._emit(\"abort\", error);\n            }\n            if (error instanceof _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError) {\n                return this._emit(\"error\", error);\n            }\n            if (error instanceof Error) {\n                const anthropicError = new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(error.message);\n                // @ts-ignore\n                anthropicError.cause = error;\n                return this._emit(\"error\", anthropicError);\n            }\n            return this._emit(\"error\", new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(String(error)));\n        });\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_connectedPromise, new Promise((resolve, reject)=>{\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_resolveConnectedPromise, resolve, \"f\");\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_rejectConnectedPromise, reject, \"f\");\n        }), \"f\");\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_endPromise, new Promise((resolve, reject)=>{\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_resolveEndPromise, resolve, \"f\");\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_rejectEndPromise, reject, \"f\");\n        }), \"f\");\n        // Don't let these promises cause unhandled rejection errors.\n        // we will manually cause an unhandled rejection error later\n        // if the user hasn't registered any error listener or called\n        // any promise-returning method.\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_connectedPromise, \"f\").catch(()=>{});\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_endPromise, \"f\").catch(()=>{});\n    }\n    get response() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_response, \"f\");\n    }\n    get request_id() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_request_id, \"f\");\n    }\n    /**\n     * Returns the `MessageStream` data, the raw `Response` instance and the ID of the request,\n     * returned vie the `request-id` header which is useful for debugging requests and resporting\n     * issues to Anthropic.\n     *\n     * This is the same as the `APIPromise.withResponse()` method.\n     *\n     * This method will raise an error if you created the stream using `MessageStream.fromReadableStream`\n     * as no `Response` is available.\n     */ async withResponse() {\n        const response = await (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_connectedPromise, \"f\");\n        if (!response) {\n            throw new Error(\"Could not resolve a `Response` object\");\n        }\n        return {\n            data: this,\n            response,\n            request_id: response.headers.get(\"request-id\")\n        };\n    }\n    /**\n     * Intended for use on the frontend, consuming a stream produced with\n     * `.toReadableStream()` on the backend.\n     *\n     * Note that messages sent to the model do not appear in `.on('message')`\n     * in this context.\n     */ static fromReadableStream(stream) {\n        const runner = new BetaMessageStream();\n        runner._run(()=>runner._fromReadableStream(stream));\n        return runner;\n    }\n    static createMessage(messages, params, options) {\n        const runner = new BetaMessageStream();\n        for (const message of params.messages){\n            runner._addMessageParam(message);\n        }\n        runner._run(()=>runner._createMessage(messages, {\n                ...params,\n                stream: true\n            }, {\n                ...options,\n                headers: {\n                    ...options?.headers,\n                    \"X-Stainless-Helper-Method\": \"stream\"\n                }\n            }));\n        return runner;\n    }\n    _run(executor) {\n        executor().then(()=>{\n            this._emitFinal();\n            this._emit(\"end\");\n        }, (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_handleError, \"f\"));\n    }\n    _addMessageParam(message) {\n        this.messages.push(message);\n    }\n    _addMessage(message, emit = true) {\n        this.receivedMessages.push(message);\n        if (emit) {\n            this._emit(\"message\", message);\n        }\n    }\n    async _createMessage(messages, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_instances, \"m\", _BetaMessageStream_beginRequest).call(this);\n        const { response, data: stream } = await messages.create({\n            ...params,\n            stream: true\n        }, {\n            ...options,\n            signal: this.controller.signal\n        }).withResponse();\n        this._connected(response);\n        for await (const event of stream){\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_instances, \"m\", _BetaMessageStream_addStreamEvent).call(this, event);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n        }\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_instances, \"m\", _BetaMessageStream_endRequest).call(this);\n    }\n    _connected(response) {\n        if (this.ended) return;\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_response, response, \"f\");\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_request_id, response?.headers.get(\"request-id\"), \"f\");\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_resolveConnectedPromise, \"f\").call(this, response);\n        this._emit(\"connect\");\n    }\n    get ended() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_ended, \"f\");\n    }\n    get errored() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_errored, \"f\");\n    }\n    get aborted() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_aborted, \"f\");\n    }\n    abort() {\n        this.controller.abort();\n    }\n    /**\n     * Adds the listener function to the end of the listeners array for the event.\n     * No checks are made to see if the listener has already been added. Multiple calls passing\n     * the same combination of event and listener will result in the listener being added, and\n     * called, multiple times.\n     * @returns this MessageStream, so that calls can be chained\n     */ on(event, listener) {\n        const listeners = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_listeners, \"f\")[event] || ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_listeners, \"f\")[event] = []);\n        listeners.push({\n            listener\n        });\n        return this;\n    }\n    /**\n     * Removes the specified listener from the listener array for the event.\n     * off() will remove, at most, one instance of a listener from the listener array. If any single\n     * listener has been added multiple times to the listener array for the specified event, then\n     * off() must be called multiple times to remove each instance.\n     * @returns this MessageStream, so that calls can be chained\n     */ off(event, listener) {\n        const listeners = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_listeners, \"f\")[event];\n        if (!listeners) return this;\n        const index = listeners.findIndex((l)=>l.listener === listener);\n        if (index >= 0) listeners.splice(index, 1);\n        return this;\n    }\n    /**\n     * Adds a one-time listener function for the event. The next time the event is triggered,\n     * this listener is removed and then invoked.\n     * @returns this MessageStream, so that calls can be chained\n     */ once(event, listener) {\n        const listeners = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_listeners, \"f\")[event] || ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_listeners, \"f\")[event] = []);\n        listeners.push({\n            listener,\n            once: true\n        });\n        return this;\n    }\n    /**\n     * This is similar to `.once()`, but returns a Promise that resolves the next time\n     * the event is triggered, instead of calling a listener callback.\n     * @returns a Promise that resolves the next time given event is triggered,\n     * or rejects if an error is emitted.  (If you request the 'error' event,\n     * returns a promise that resolves with the error).\n     *\n     * Example:\n     *\n     *   const message = await stream.emitted('message') // rejects if the stream errors\n     */ emitted(event) {\n        return new Promise((resolve, reject)=>{\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_catchingPromiseCreated, true, \"f\");\n            if (event !== \"error\") this.once(\"error\", reject);\n            this.once(event, resolve);\n        });\n    }\n    async done() {\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_catchingPromiseCreated, true, \"f\");\n        await (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_endPromise, \"f\");\n    }\n    get currentMessage() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_currentMessageSnapshot, \"f\");\n    }\n    /**\n     * @returns a promise that resolves with the the final assistant Message response,\n     * or rejects if an error occurred or the stream ended prematurely without producing a Message.\n     */ async finalMessage() {\n        await this.done();\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_instances, \"m\", _BetaMessageStream_getFinalMessage).call(this);\n    }\n    /**\n     * @returns a promise that resolves with the the final assistant Message's text response, concatenated\n     * together if there are more than one text blocks.\n     * Rejects if an error occurred or the stream ended prematurely without producing a Message.\n     */ async finalText() {\n        await this.done();\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_instances, \"m\", _BetaMessageStream_getFinalText).call(this);\n    }\n    _emit(event, ...args) {\n        // make sure we don't emit any MessageStreamEvents after end\n        if ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_ended, \"f\")) return;\n        if (event === \"end\") {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_ended, true, \"f\");\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_resolveEndPromise, \"f\").call(this);\n        }\n        const listeners = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_listeners, \"f\")[event];\n        if (listeners) {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_listeners, \"f\")[event] = listeners.filter((l)=>!l.once);\n            listeners.forEach(({ listener })=>listener(...args));\n        }\n        if (event === \"abort\") {\n            const error = args[0];\n            if (!(0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_catchingPromiseCreated, \"f\") && !listeners?.length) {\n                Promise.reject(error);\n            }\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_rejectConnectedPromise, \"f\").call(this, error);\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_rejectEndPromise, \"f\").call(this, error);\n            this._emit(\"end\");\n            return;\n        }\n        if (event === \"error\") {\n            // NOTE: _emit('error', error) should only be called from #handleError().\n            const error = args[0];\n            if (!(0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_catchingPromiseCreated, \"f\") && !listeners?.length) {\n                // Trigger an unhandled rejection if the user hasn't registered any error handlers.\n                // If you are seeing stack traces here, make sure to handle errors via either:\n                // - runner.on('error', () => ...)\n                // - await runner.done()\n                // - await runner.final...()\n                // - etc.\n                Promise.reject(error);\n            }\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_rejectConnectedPromise, \"f\").call(this, error);\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_rejectEndPromise, \"f\").call(this, error);\n            this._emit(\"end\");\n        }\n    }\n    _emitFinal() {\n        const finalMessage = this.receivedMessages.at(-1);\n        if (finalMessage) {\n            this._emit(\"finalMessage\", (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_instances, \"m\", _BetaMessageStream_getFinalMessage).call(this));\n        }\n    }\n    async _fromReadableStream(readableStream, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_instances, \"m\", _BetaMessageStream_beginRequest).call(this);\n        this._connected(null);\n        const stream = _streaming_mjs__WEBPACK_IMPORTED_MODULE_3__.Stream.fromReadableStream(readableStream, this.controller);\n        for await (const event of stream){\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_instances, \"m\", _BetaMessageStream_addStreamEvent).call(this, event);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n        }\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_instances, \"m\", _BetaMessageStream_endRequest).call(this);\n    }\n    [(_BetaMessageStream_currentMessageSnapshot = new WeakMap(), _BetaMessageStream_connectedPromise = new WeakMap(), _BetaMessageStream_resolveConnectedPromise = new WeakMap(), _BetaMessageStream_rejectConnectedPromise = new WeakMap(), _BetaMessageStream_endPromise = new WeakMap(), _BetaMessageStream_resolveEndPromise = new WeakMap(), _BetaMessageStream_rejectEndPromise = new WeakMap(), _BetaMessageStream_listeners = new WeakMap(), _BetaMessageStream_ended = new WeakMap(), _BetaMessageStream_errored = new WeakMap(), _BetaMessageStream_aborted = new WeakMap(), _BetaMessageStream_catchingPromiseCreated = new WeakMap(), _BetaMessageStream_response = new WeakMap(), _BetaMessageStream_request_id = new WeakMap(), _BetaMessageStream_handleError = new WeakMap(), _BetaMessageStream_instances = new WeakSet(), _BetaMessageStream_getFinalMessage = function _BetaMessageStream_getFinalMessage() {\n        if (this.receivedMessages.length === 0) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(\"stream ended without producing a Message with role=assistant\");\n        }\n        return this.receivedMessages.at(-1);\n    }, _BetaMessageStream_getFinalText = function _BetaMessageStream_getFinalText() {\n        if (this.receivedMessages.length === 0) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(\"stream ended without producing a Message with role=assistant\");\n        }\n        const textBlocks = this.receivedMessages.at(-1).content.filter((block)=>block.type === \"text\").map((block)=>block.text);\n        if (textBlocks.length === 0) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(\"stream ended without producing a content block with type=text\");\n        }\n        return textBlocks.join(\" \");\n    }, _BetaMessageStream_beginRequest = function _BetaMessageStream_beginRequest() {\n        if (this.ended) return;\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_currentMessageSnapshot, undefined, \"f\");\n    }, _BetaMessageStream_addStreamEvent = function _BetaMessageStream_addStreamEvent(event) {\n        if (this.ended) return;\n        const messageSnapshot = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_instances, \"m\", _BetaMessageStream_accumulateMessage).call(this, event);\n        this._emit(\"streamEvent\", event, messageSnapshot);\n        switch(event.type){\n            case \"content_block_delta\":\n                {\n                    const content = messageSnapshot.content.at(-1);\n                    switch(event.delta.type){\n                        case \"text_delta\":\n                            {\n                                if (content.type === \"text\") {\n                                    this._emit(\"text\", event.delta.text, content.text || \"\");\n                                }\n                                break;\n                            }\n                        case \"citations_delta\":\n                            {\n                                if (content.type === \"text\") {\n                                    this._emit(\"citation\", event.delta.citation, content.citations ?? []);\n                                }\n                                break;\n                            }\n                        case \"input_json_delta\":\n                            {\n                                if (tracksToolInput(content) && content.input) {\n                                    this._emit(\"inputJson\", event.delta.partial_json, content.input);\n                                }\n                                break;\n                            }\n                        case \"thinking_delta\":\n                            {\n                                if (content.type === \"thinking\") {\n                                    this._emit(\"thinking\", event.delta.thinking, content.thinking);\n                                }\n                                break;\n                            }\n                        case \"signature_delta\":\n                            {\n                                if (content.type === \"thinking\") {\n                                    this._emit(\"signature\", content.signature);\n                                }\n                                break;\n                            }\n                        default:\n                            checkNever(event.delta);\n                    }\n                    break;\n                }\n            case \"message_stop\":\n                {\n                    this._addMessageParam(messageSnapshot);\n                    this._addMessage(messageSnapshot, true);\n                    break;\n                }\n            case \"content_block_stop\":\n                {\n                    this._emit(\"contentBlock\", messageSnapshot.content.at(-1));\n                    break;\n                }\n            case \"message_start\":\n                {\n                    (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_currentMessageSnapshot, messageSnapshot, \"f\");\n                    break;\n                }\n            case \"content_block_start\":\n            case \"message_delta\":\n                break;\n        }\n    }, _BetaMessageStream_endRequest = function _BetaMessageStream_endRequest() {\n        if (this.ended) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(`stream has ended, this shouldn't happen`);\n        }\n        const snapshot = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_currentMessageSnapshot, \"f\");\n        if (!snapshot) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(`request ended without sending any chunks`);\n        }\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_currentMessageSnapshot, undefined, \"f\");\n        return snapshot;\n    }, _BetaMessageStream_accumulateMessage = function _BetaMessageStream_accumulateMessage(event) {\n        let snapshot = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_currentMessageSnapshot, \"f\");\n        if (event.type === \"message_start\") {\n            if (snapshot) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(`Unexpected event order, got ${event.type} before receiving \"message_stop\"`);\n            }\n            return event.message;\n        }\n        if (!snapshot) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(`Unexpected event order, got ${event.type} before \"message_start\"`);\n        }\n        switch(event.type){\n            case \"message_stop\":\n                return snapshot;\n            case \"message_delta\":\n                snapshot.container = event.delta.container;\n                snapshot.stop_reason = event.delta.stop_reason;\n                snapshot.stop_sequence = event.delta.stop_sequence;\n                snapshot.usage.output_tokens = event.usage.output_tokens;\n                if (event.usage.input_tokens != null) {\n                    snapshot.usage.input_tokens = event.usage.input_tokens;\n                }\n                if (event.usage.cache_creation_input_tokens != null) {\n                    snapshot.usage.cache_creation_input_tokens = event.usage.cache_creation_input_tokens;\n                }\n                if (event.usage.cache_read_input_tokens != null) {\n                    snapshot.usage.cache_read_input_tokens = event.usage.cache_read_input_tokens;\n                }\n                if (event.usage.server_tool_use != null) {\n                    snapshot.usage.server_tool_use = event.usage.server_tool_use;\n                }\n                return snapshot;\n            case \"content_block_start\":\n                snapshot.content.push(event.content_block);\n                return snapshot;\n            case \"content_block_delta\":\n                {\n                    const snapshotContent = snapshot.content.at(event.index);\n                    switch(event.delta.type){\n                        case \"text_delta\":\n                            {\n                                if (snapshotContent?.type === \"text\") {\n                                    snapshotContent.text += event.delta.text;\n                                }\n                                break;\n                            }\n                        case \"citations_delta\":\n                            {\n                                if (snapshotContent?.type === \"text\") {\n                                    snapshotContent.citations ?? (snapshotContent.citations = []);\n                                    snapshotContent.citations.push(event.delta.citation);\n                                }\n                                break;\n                            }\n                        case \"input_json_delta\":\n                            {\n                                if (snapshotContent && tracksToolInput(snapshotContent)) {\n                                    // we need to keep track of the raw JSON string as well so that we can\n                                    // re-parse it for each delta, for now we just store it as an untyped\n                                    // non-enumerable property on the snapshot\n                                    let jsonBuf = snapshotContent[JSON_BUF_PROPERTY] || \"\";\n                                    jsonBuf += event.delta.partial_json;\n                                    Object.defineProperty(snapshotContent, JSON_BUF_PROPERTY, {\n                                        value: jsonBuf,\n                                        enumerable: false,\n                                        writable: true\n                                    });\n                                    if (jsonBuf) {\n                                        snapshotContent.input = (0,_vendor_partial_json_parser_parser_mjs__WEBPACK_IMPORTED_MODULE_4__.partialParse)(jsonBuf);\n                                    }\n                                }\n                                break;\n                            }\n                        case \"thinking_delta\":\n                            {\n                                if (snapshotContent?.type === \"thinking\") {\n                                    snapshotContent.thinking += event.delta.thinking;\n                                }\n                                break;\n                            }\n                        case \"signature_delta\":\n                            {\n                                if (snapshotContent?.type === \"thinking\") {\n                                    snapshotContent.signature = event.delta.signature;\n                                }\n                                break;\n                            }\n                        default:\n                            checkNever(event.delta);\n                    }\n                    return snapshot;\n                }\n            case \"content_block_stop\":\n                return snapshot;\n        }\n    }, Symbol.asyncIterator)]() {\n        const pushQueue = [];\n        const readQueue = [];\n        let done = false;\n        this.on(\"streamEvent\", (event)=>{\n            const reader = readQueue.shift();\n            if (reader) {\n                reader.resolve(event);\n            } else {\n                pushQueue.push(event);\n            }\n        });\n        this.on(\"end\", ()=>{\n            done = true;\n            for (const reader of readQueue){\n                reader.resolve(undefined);\n            }\n            readQueue.length = 0;\n        });\n        this.on(\"abort\", (err)=>{\n            done = true;\n            for (const reader of readQueue){\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        this.on(\"error\", (err)=>{\n            done = true;\n            for (const reader of readQueue){\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        return {\n            next: async ()=>{\n                if (!pushQueue.length) {\n                    if (done) {\n                        return {\n                            value: undefined,\n                            done: true\n                        };\n                    }\n                    return new Promise((resolve, reject)=>readQueue.push({\n                            resolve,\n                            reject\n                        })).then((chunk)=>chunk ? {\n                            value: chunk,\n                            done: false\n                        } : {\n                            value: undefined,\n                            done: true\n                        });\n                }\n                const chunk = pushQueue.shift();\n                return {\n                    value: chunk,\n                    done: false\n                };\n            },\n            return: async ()=>{\n                this.abort();\n                return {\n                    value: undefined,\n                    done: true\n                };\n            }\n        };\n    }\n    toReadableStream() {\n        const stream = new _streaming_mjs__WEBPACK_IMPORTED_MODULE_3__.Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n        return stream.toReadableStream();\n    }\n}\n// used to ensure exhaustive case matching without throwing a runtime error\nfunction checkNever(x) {} //# sourceMappingURL=BetaMessageStream.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/lib/BetaMessageStream.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/lib/MessageStream.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/lib/MessageStream.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MessageStream: () => (/* binding */ MessageStream)\n/* harmony export */ });\n/* harmony import */ var _internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/tslib.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/tslib.mjs\");\n/* harmony import */ var _internal_errors_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/errors.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/errors.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/error.mjs\");\n/* harmony import */ var _streaming_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../streaming.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/streaming.mjs\");\n/* harmony import */ var _vendor_partial_json_parser_parser_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../_vendor/partial-json-parser/parser.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/_vendor/partial-json-parser/parser.mjs\");\nvar _MessageStream_instances, _MessageStream_currentMessageSnapshot, _MessageStream_connectedPromise, _MessageStream_resolveConnectedPromise, _MessageStream_rejectConnectedPromise, _MessageStream_endPromise, _MessageStream_resolveEndPromise, _MessageStream_rejectEndPromise, _MessageStream_listeners, _MessageStream_ended, _MessageStream_errored, _MessageStream_aborted, _MessageStream_catchingPromiseCreated, _MessageStream_response, _MessageStream_request_id, _MessageStream_getFinalMessage, _MessageStream_getFinalText, _MessageStream_handleError, _MessageStream_beginRequest, _MessageStream_addStreamEvent, _MessageStream_endRequest, _MessageStream_accumulateMessage;\n\n\n\n\n\nconst JSON_BUF_PROPERTY = \"__json_buf\";\nfunction tracksToolInput(content) {\n    return content.type === \"tool_use\" || content.type === \"server_tool_use\";\n}\nclass MessageStream {\n    constructor(){\n        _MessageStream_instances.add(this);\n        this.messages = [];\n        this.receivedMessages = [];\n        _MessageStream_currentMessageSnapshot.set(this, void 0);\n        this.controller = new AbortController();\n        _MessageStream_connectedPromise.set(this, void 0);\n        _MessageStream_resolveConnectedPromise.set(this, ()=>{});\n        _MessageStream_rejectConnectedPromise.set(this, ()=>{});\n        _MessageStream_endPromise.set(this, void 0);\n        _MessageStream_resolveEndPromise.set(this, ()=>{});\n        _MessageStream_rejectEndPromise.set(this, ()=>{});\n        _MessageStream_listeners.set(this, {});\n        _MessageStream_ended.set(this, false);\n        _MessageStream_errored.set(this, false);\n        _MessageStream_aborted.set(this, false);\n        _MessageStream_catchingPromiseCreated.set(this, false);\n        _MessageStream_response.set(this, void 0);\n        _MessageStream_request_id.set(this, void 0);\n        _MessageStream_handleError.set(this, (error)=>{\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_errored, true, \"f\");\n            if ((0,_internal_errors_mjs__WEBPACK_IMPORTED_MODULE_1__.isAbortError)(error)) {\n                error = new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n            }\n            if (error instanceof _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError) {\n                (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_aborted, true, \"f\");\n                return this._emit(\"abort\", error);\n            }\n            if (error instanceof _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError) {\n                return this._emit(\"error\", error);\n            }\n            if (error instanceof Error) {\n                const anthropicError = new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(error.message);\n                // @ts-ignore\n                anthropicError.cause = error;\n                return this._emit(\"error\", anthropicError);\n            }\n            return this._emit(\"error\", new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(String(error)));\n        });\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_connectedPromise, new Promise((resolve, reject)=>{\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_resolveConnectedPromise, resolve, \"f\");\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_rejectConnectedPromise, reject, \"f\");\n        }), \"f\");\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_endPromise, new Promise((resolve, reject)=>{\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_resolveEndPromise, resolve, \"f\");\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_rejectEndPromise, reject, \"f\");\n        }), \"f\");\n        // Don't let these promises cause unhandled rejection errors.\n        // we will manually cause an unhandled rejection error later\n        // if the user hasn't registered any error listener or called\n        // any promise-returning method.\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_connectedPromise, \"f\").catch(()=>{});\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_endPromise, \"f\").catch(()=>{});\n    }\n    get response() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_response, \"f\");\n    }\n    get request_id() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_request_id, \"f\");\n    }\n    /**\n     * Returns the `MessageStream` data, the raw `Response` instance and the ID of the request,\n     * returned vie the `request-id` header which is useful for debugging requests and resporting\n     * issues to Anthropic.\n     *\n     * This is the same as the `APIPromise.withResponse()` method.\n     *\n     * This method will raise an error if you created the stream using `MessageStream.fromReadableStream`\n     * as no `Response` is available.\n     */ async withResponse() {\n        const response = await (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_connectedPromise, \"f\");\n        if (!response) {\n            throw new Error(\"Could not resolve a `Response` object\");\n        }\n        return {\n            data: this,\n            response,\n            request_id: response.headers.get(\"request-id\")\n        };\n    }\n    /**\n     * Intended for use on the frontend, consuming a stream produced with\n     * `.toReadableStream()` on the backend.\n     *\n     * Note that messages sent to the model do not appear in `.on('message')`\n     * in this context.\n     */ static fromReadableStream(stream) {\n        const runner = new MessageStream();\n        runner._run(()=>runner._fromReadableStream(stream));\n        return runner;\n    }\n    static createMessage(messages, params, options) {\n        const runner = new MessageStream();\n        for (const message of params.messages){\n            runner._addMessageParam(message);\n        }\n        runner._run(()=>runner._createMessage(messages, {\n                ...params,\n                stream: true\n            }, {\n                ...options,\n                headers: {\n                    ...options?.headers,\n                    \"X-Stainless-Helper-Method\": \"stream\"\n                }\n            }));\n        return runner;\n    }\n    _run(executor) {\n        executor().then(()=>{\n            this._emitFinal();\n            this._emit(\"end\");\n        }, (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_handleError, \"f\"));\n    }\n    _addMessageParam(message) {\n        this.messages.push(message);\n    }\n    _addMessage(message, emit = true) {\n        this.receivedMessages.push(message);\n        if (emit) {\n            this._emit(\"message\", message);\n        }\n    }\n    async _createMessage(messages, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_instances, \"m\", _MessageStream_beginRequest).call(this);\n        const { response, data: stream } = await messages.create({\n            ...params,\n            stream: true\n        }, {\n            ...options,\n            signal: this.controller.signal\n        }).withResponse();\n        this._connected(response);\n        for await (const event of stream){\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_instances, \"m\", _MessageStream_addStreamEvent).call(this, event);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n        }\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_instances, \"m\", _MessageStream_endRequest).call(this);\n    }\n    _connected(response) {\n        if (this.ended) return;\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_response, response, \"f\");\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_request_id, response?.headers.get(\"request-id\"), \"f\");\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_resolveConnectedPromise, \"f\").call(this, response);\n        this._emit(\"connect\");\n    }\n    get ended() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_ended, \"f\");\n    }\n    get errored() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_errored, \"f\");\n    }\n    get aborted() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_aborted, \"f\");\n    }\n    abort() {\n        this.controller.abort();\n    }\n    /**\n     * Adds the listener function to the end of the listeners array for the event.\n     * No checks are made to see if the listener has already been added. Multiple calls passing\n     * the same combination of event and listener will result in the listener being added, and\n     * called, multiple times.\n     * @returns this MessageStream, so that calls can be chained\n     */ on(event, listener) {\n        const listeners = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_listeners, \"f\")[event] || ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_listeners, \"f\")[event] = []);\n        listeners.push({\n            listener\n        });\n        return this;\n    }\n    /**\n     * Removes the specified listener from the listener array for the event.\n     * off() will remove, at most, one instance of a listener from the listener array. If any single\n     * listener has been added multiple times to the listener array for the specified event, then\n     * off() must be called multiple times to remove each instance.\n     * @returns this MessageStream, so that calls can be chained\n     */ off(event, listener) {\n        const listeners = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_listeners, \"f\")[event];\n        if (!listeners) return this;\n        const index = listeners.findIndex((l)=>l.listener === listener);\n        if (index >= 0) listeners.splice(index, 1);\n        return this;\n    }\n    /**\n     * Adds a one-time listener function for the event. The next time the event is triggered,\n     * this listener is removed and then invoked.\n     * @returns this MessageStream, so that calls can be chained\n     */ once(event, listener) {\n        const listeners = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_listeners, \"f\")[event] || ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_listeners, \"f\")[event] = []);\n        listeners.push({\n            listener,\n            once: true\n        });\n        return this;\n    }\n    /**\n     * This is similar to `.once()`, but returns a Promise that resolves the next time\n     * the event is triggered, instead of calling a listener callback.\n     * @returns a Promise that resolves the next time given event is triggered,\n     * or rejects if an error is emitted.  (If you request the 'error' event,\n     * returns a promise that resolves with the error).\n     *\n     * Example:\n     *\n     *   const message = await stream.emitted('message') // rejects if the stream errors\n     */ emitted(event) {\n        return new Promise((resolve, reject)=>{\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_catchingPromiseCreated, true, \"f\");\n            if (event !== \"error\") this.once(\"error\", reject);\n            this.once(event, resolve);\n        });\n    }\n    async done() {\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_catchingPromiseCreated, true, \"f\");\n        await (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_endPromise, \"f\");\n    }\n    get currentMessage() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_currentMessageSnapshot, \"f\");\n    }\n    /**\n     * @returns a promise that resolves with the the final assistant Message response,\n     * or rejects if an error occurred or the stream ended prematurely without producing a Message.\n     */ async finalMessage() {\n        await this.done();\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_instances, \"m\", _MessageStream_getFinalMessage).call(this);\n    }\n    /**\n     * @returns a promise that resolves with the the final assistant Message's text response, concatenated\n     * together if there are more than one text blocks.\n     * Rejects if an error occurred or the stream ended prematurely without producing a Message.\n     */ async finalText() {\n        await this.done();\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_instances, \"m\", _MessageStream_getFinalText).call(this);\n    }\n    _emit(event, ...args) {\n        // make sure we don't emit any MessageStreamEvents after end\n        if ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_ended, \"f\")) return;\n        if (event === \"end\") {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_ended, true, \"f\");\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_resolveEndPromise, \"f\").call(this);\n        }\n        const listeners = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_listeners, \"f\")[event];\n        if (listeners) {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_listeners, \"f\")[event] = listeners.filter((l)=>!l.once);\n            listeners.forEach(({ listener })=>listener(...args));\n        }\n        if (event === \"abort\") {\n            const error = args[0];\n            if (!(0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_catchingPromiseCreated, \"f\") && !listeners?.length) {\n                Promise.reject(error);\n            }\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_rejectConnectedPromise, \"f\").call(this, error);\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_rejectEndPromise, \"f\").call(this, error);\n            this._emit(\"end\");\n            return;\n        }\n        if (event === \"error\") {\n            // NOTE: _emit('error', error) should only be called from #handleError().\n            const error = args[0];\n            if (!(0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_catchingPromiseCreated, \"f\") && !listeners?.length) {\n                // Trigger an unhandled rejection if the user hasn't registered any error handlers.\n                // If you are seeing stack traces here, make sure to handle errors via either:\n                // - runner.on('error', () => ...)\n                // - await runner.done()\n                // - await runner.final...()\n                // - etc.\n                Promise.reject(error);\n            }\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_rejectConnectedPromise, \"f\").call(this, error);\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_rejectEndPromise, \"f\").call(this, error);\n            this._emit(\"end\");\n        }\n    }\n    _emitFinal() {\n        const finalMessage = this.receivedMessages.at(-1);\n        if (finalMessage) {\n            this._emit(\"finalMessage\", (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_instances, \"m\", _MessageStream_getFinalMessage).call(this));\n        }\n    }\n    async _fromReadableStream(readableStream, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_instances, \"m\", _MessageStream_beginRequest).call(this);\n        this._connected(null);\n        const stream = _streaming_mjs__WEBPACK_IMPORTED_MODULE_3__.Stream.fromReadableStream(readableStream, this.controller);\n        for await (const event of stream){\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_instances, \"m\", _MessageStream_addStreamEvent).call(this, event);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n        }\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_instances, \"m\", _MessageStream_endRequest).call(this);\n    }\n    [(_MessageStream_currentMessageSnapshot = new WeakMap(), _MessageStream_connectedPromise = new WeakMap(), _MessageStream_resolveConnectedPromise = new WeakMap(), _MessageStream_rejectConnectedPromise = new WeakMap(), _MessageStream_endPromise = new WeakMap(), _MessageStream_resolveEndPromise = new WeakMap(), _MessageStream_rejectEndPromise = new WeakMap(), _MessageStream_listeners = new WeakMap(), _MessageStream_ended = new WeakMap(), _MessageStream_errored = new WeakMap(), _MessageStream_aborted = new WeakMap(), _MessageStream_catchingPromiseCreated = new WeakMap(), _MessageStream_response = new WeakMap(), _MessageStream_request_id = new WeakMap(), _MessageStream_handleError = new WeakMap(), _MessageStream_instances = new WeakSet(), _MessageStream_getFinalMessage = function _MessageStream_getFinalMessage() {\n        if (this.receivedMessages.length === 0) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(\"stream ended without producing a Message with role=assistant\");\n        }\n        return this.receivedMessages.at(-1);\n    }, _MessageStream_getFinalText = function _MessageStream_getFinalText() {\n        if (this.receivedMessages.length === 0) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(\"stream ended without producing a Message with role=assistant\");\n        }\n        const textBlocks = this.receivedMessages.at(-1).content.filter((block)=>block.type === \"text\").map((block)=>block.text);\n        if (textBlocks.length === 0) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(\"stream ended without producing a content block with type=text\");\n        }\n        return textBlocks.join(\" \");\n    }, _MessageStream_beginRequest = function _MessageStream_beginRequest() {\n        if (this.ended) return;\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_currentMessageSnapshot, undefined, \"f\");\n    }, _MessageStream_addStreamEvent = function _MessageStream_addStreamEvent(event) {\n        if (this.ended) return;\n        const messageSnapshot = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_instances, \"m\", _MessageStream_accumulateMessage).call(this, event);\n        this._emit(\"streamEvent\", event, messageSnapshot);\n        switch(event.type){\n            case \"content_block_delta\":\n                {\n                    const content = messageSnapshot.content.at(-1);\n                    switch(event.delta.type){\n                        case \"text_delta\":\n                            {\n                                if (content.type === \"text\") {\n                                    this._emit(\"text\", event.delta.text, content.text || \"\");\n                                }\n                                break;\n                            }\n                        case \"citations_delta\":\n                            {\n                                if (content.type === \"text\") {\n                                    this._emit(\"citation\", event.delta.citation, content.citations ?? []);\n                                }\n                                break;\n                            }\n                        case \"input_json_delta\":\n                            {\n                                if (tracksToolInput(content) && content.input) {\n                                    this._emit(\"inputJson\", event.delta.partial_json, content.input);\n                                }\n                                break;\n                            }\n                        case \"thinking_delta\":\n                            {\n                                if (content.type === \"thinking\") {\n                                    this._emit(\"thinking\", event.delta.thinking, content.thinking);\n                                }\n                                break;\n                            }\n                        case \"signature_delta\":\n                            {\n                                if (content.type === \"thinking\") {\n                                    this._emit(\"signature\", content.signature);\n                                }\n                                break;\n                            }\n                        default:\n                            checkNever(event.delta);\n                    }\n                    break;\n                }\n            case \"message_stop\":\n                {\n                    this._addMessageParam(messageSnapshot);\n                    this._addMessage(messageSnapshot, true);\n                    break;\n                }\n            case \"content_block_stop\":\n                {\n                    this._emit(\"contentBlock\", messageSnapshot.content.at(-1));\n                    break;\n                }\n            case \"message_start\":\n                {\n                    (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_currentMessageSnapshot, messageSnapshot, \"f\");\n                    break;\n                }\n            case \"content_block_start\":\n            case \"message_delta\":\n                break;\n        }\n    }, _MessageStream_endRequest = function _MessageStream_endRequest() {\n        if (this.ended) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(`stream has ended, this shouldn't happen`);\n        }\n        const snapshot = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_currentMessageSnapshot, \"f\");\n        if (!snapshot) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(`request ended without sending any chunks`);\n        }\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_currentMessageSnapshot, undefined, \"f\");\n        return snapshot;\n    }, _MessageStream_accumulateMessage = function _MessageStream_accumulateMessage(event) {\n        let snapshot = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_currentMessageSnapshot, \"f\");\n        if (event.type === \"message_start\") {\n            if (snapshot) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(`Unexpected event order, got ${event.type} before receiving \"message_stop\"`);\n            }\n            return event.message;\n        }\n        if (!snapshot) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(`Unexpected event order, got ${event.type} before \"message_start\"`);\n        }\n        switch(event.type){\n            case \"message_stop\":\n                return snapshot;\n            case \"message_delta\":\n                snapshot.stop_reason = event.delta.stop_reason;\n                snapshot.stop_sequence = event.delta.stop_sequence;\n                snapshot.usage.output_tokens = event.usage.output_tokens;\n                // Update other usage fields if they exist in the event\n                if (event.usage.input_tokens != null) {\n                    snapshot.usage.input_tokens = event.usage.input_tokens;\n                }\n                if (event.usage.cache_creation_input_tokens != null) {\n                    snapshot.usage.cache_creation_input_tokens = event.usage.cache_creation_input_tokens;\n                }\n                if (event.usage.cache_read_input_tokens != null) {\n                    snapshot.usage.cache_read_input_tokens = event.usage.cache_read_input_tokens;\n                }\n                if (event.usage.server_tool_use != null) {\n                    snapshot.usage.server_tool_use = event.usage.server_tool_use;\n                }\n                return snapshot;\n            case \"content_block_start\":\n                snapshot.content.push(event.content_block);\n                return snapshot;\n            case \"content_block_delta\":\n                {\n                    const snapshotContent = snapshot.content.at(event.index);\n                    switch(event.delta.type){\n                        case \"text_delta\":\n                            {\n                                if (snapshotContent?.type === \"text\") {\n                                    snapshotContent.text += event.delta.text;\n                                }\n                                break;\n                            }\n                        case \"citations_delta\":\n                            {\n                                if (snapshotContent?.type === \"text\") {\n                                    snapshotContent.citations ?? (snapshotContent.citations = []);\n                                    snapshotContent.citations.push(event.delta.citation);\n                                }\n                                break;\n                            }\n                        case \"input_json_delta\":\n                            {\n                                if (snapshotContent && tracksToolInput(snapshotContent)) {\n                                    // we need to keep track of the raw JSON string as well so that we can\n                                    // re-parse it for each delta, for now we just store it as an untyped\n                                    // non-enumerable property on the snapshot\n                                    let jsonBuf = snapshotContent[JSON_BUF_PROPERTY] || \"\";\n                                    jsonBuf += event.delta.partial_json;\n                                    Object.defineProperty(snapshotContent, JSON_BUF_PROPERTY, {\n                                        value: jsonBuf,\n                                        enumerable: false,\n                                        writable: true\n                                    });\n                                    if (jsonBuf) {\n                                        snapshotContent.input = (0,_vendor_partial_json_parser_parser_mjs__WEBPACK_IMPORTED_MODULE_4__.partialParse)(jsonBuf);\n                                    }\n                                }\n                                break;\n                            }\n                        case \"thinking_delta\":\n                            {\n                                if (snapshotContent?.type === \"thinking\") {\n                                    snapshotContent.thinking += event.delta.thinking;\n                                }\n                                break;\n                            }\n                        case \"signature_delta\":\n                            {\n                                if (snapshotContent?.type === \"thinking\") {\n                                    snapshotContent.signature = event.delta.signature;\n                                }\n                                break;\n                            }\n                        default:\n                            checkNever(event.delta);\n                    }\n                    return snapshot;\n                }\n            case \"content_block_stop\":\n                return snapshot;\n        }\n    }, Symbol.asyncIterator)]() {\n        const pushQueue = [];\n        const readQueue = [];\n        let done = false;\n        this.on(\"streamEvent\", (event)=>{\n            const reader = readQueue.shift();\n            if (reader) {\n                reader.resolve(event);\n            } else {\n                pushQueue.push(event);\n            }\n        });\n        this.on(\"end\", ()=>{\n            done = true;\n            for (const reader of readQueue){\n                reader.resolve(undefined);\n            }\n            readQueue.length = 0;\n        });\n        this.on(\"abort\", (err)=>{\n            done = true;\n            for (const reader of readQueue){\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        this.on(\"error\", (err)=>{\n            done = true;\n            for (const reader of readQueue){\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        return {\n            next: async ()=>{\n                if (!pushQueue.length) {\n                    if (done) {\n                        return {\n                            value: undefined,\n                            done: true\n                        };\n                    }\n                    return new Promise((resolve, reject)=>readQueue.push({\n                            resolve,\n                            reject\n                        })).then((chunk)=>chunk ? {\n                            value: chunk,\n                            done: false\n                        } : {\n                            value: undefined,\n                            done: true\n                        });\n                }\n                const chunk = pushQueue.shift();\n                return {\n                    value: chunk,\n                    done: false\n                };\n            },\n            return: async ()=>{\n                this.abort();\n                return {\n                    value: undefined,\n                    done: true\n                };\n            }\n        };\n    }\n    toReadableStream() {\n        const stream = new _streaming_mjs__WEBPACK_IMPORTED_MODULE_3__.Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n        return stream.toReadableStream();\n    }\n}\n// used to ensure exhaustive case matching without throwing a runtime error\nfunction checkNever(x) {} //# sourceMappingURL=MessageStream.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/lib/MessageStream.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/resources/beta/beta.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/resources/beta/beta.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Beta: () => (/* binding */ Beta)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/resource.mjs\");\n/* harmony import */ var _files_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./files.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/resources/beta/files.mjs\");\n/* harmony import */ var _models_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/resources/beta/models.mjs\");\n/* harmony import */ var _messages_messages_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./messages/messages.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/resources/beta/messages/messages.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\nclass Beta extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.models = new _models_mjs__WEBPACK_IMPORTED_MODULE_2__.Models(this._client);\n        this.messages = new _messages_messages_mjs__WEBPACK_IMPORTED_MODULE_3__.Messages(this._client);\n        this.files = new _files_mjs__WEBPACK_IMPORTED_MODULE_1__.Files(this._client);\n    }\n}\nBeta.Models = _models_mjs__WEBPACK_IMPORTED_MODULE_2__.Models;\nBeta.Messages = _messages_messages_mjs__WEBPACK_IMPORTED_MODULE_3__.Messages;\nBeta.Files = _files_mjs__WEBPACK_IMPORTED_MODULE_1__.Files; //# sourceMappingURL=beta.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvcmVzb3VyY2VzL2JldGEvYmV0YS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxzRkFBc0Y7QUFDaEM7QUFDZDtBQUNIO0FBQ0s7QUFDSjtBQUNpQjtBQUNIO0FBQzdDLE1BQU1PLGFBQWFQLDJEQUFXQTtJQUNqQ1EsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLE1BQU0sR0FBRyxJQUFJUCwrQ0FBZ0IsQ0FBQyxJQUFJLENBQUNRLE9BQU87UUFDL0MsSUFBSSxDQUFDQyxRQUFRLEdBQUcsSUFBSVAsNERBQW9CLENBQUMsSUFBSSxDQUFDTSxPQUFPO1FBQ3JELElBQUksQ0FBQ0UsS0FBSyxHQUFHLElBQUlaLDZDQUFjLENBQUMsSUFBSSxDQUFDVSxPQUFPO0lBQ2hEO0FBQ0o7QUFDQUosS0FBS0gsTUFBTSxHQUFHQSwrQ0FBTUE7QUFDcEJHLEtBQUtELFFBQVEsR0FBR0EsNERBQVFBO0FBQ3hCQyxLQUFLTCxLQUFLLEdBQUdBLDZDQUFLQSxFQUNsQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcnRpZnktYWdlbnQvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvcmVzb3VyY2VzL2JldGEvYmV0YS5tanM/ZTMzYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vY29yZS9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCAqIGFzIEZpbGVzQVBJIGZyb20gXCIuL2ZpbGVzLm1qc1wiO1xuaW1wb3J0IHsgRmlsZXMsIH0gZnJvbSBcIi4vZmlsZXMubWpzXCI7XG5pbXBvcnQgKiBhcyBNb2RlbHNBUEkgZnJvbSBcIi4vbW9kZWxzLm1qc1wiO1xuaW1wb3J0IHsgTW9kZWxzIH0gZnJvbSBcIi4vbW9kZWxzLm1qc1wiO1xuaW1wb3J0ICogYXMgTWVzc2FnZXNBUEkgZnJvbSBcIi4vbWVzc2FnZXMvbWVzc2FnZXMubWpzXCI7XG5pbXBvcnQgeyBNZXNzYWdlcywgfSBmcm9tIFwiLi9tZXNzYWdlcy9tZXNzYWdlcy5tanNcIjtcbmV4cG9ydCBjbGFzcyBCZXRhIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLm1vZGVscyA9IG5ldyBNb2RlbHNBUEkuTW9kZWxzKHRoaXMuX2NsaWVudCk7XG4gICAgICAgIHRoaXMubWVzc2FnZXMgPSBuZXcgTWVzc2FnZXNBUEkuTWVzc2FnZXModGhpcy5fY2xpZW50KTtcbiAgICAgICAgdGhpcy5maWxlcyA9IG5ldyBGaWxlc0FQSS5GaWxlcyh0aGlzLl9jbGllbnQpO1xuICAgIH1cbn1cbkJldGEuTW9kZWxzID0gTW9kZWxzO1xuQmV0YS5NZXNzYWdlcyA9IE1lc3NhZ2VzO1xuQmV0YS5GaWxlcyA9IEZpbGVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmV0YS5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiRmlsZXNBUEkiLCJGaWxlcyIsIk1vZGVsc0FQSSIsIk1vZGVscyIsIk1lc3NhZ2VzQVBJIiwiTWVzc2FnZXMiLCJCZXRhIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJtb2RlbHMiLCJfY2xpZW50IiwibWVzc2FnZXMiLCJmaWxlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/resources/beta/beta.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/resources/beta/files.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/resources/beta/files.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Files: () => (/* binding */ Files)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/resource.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/pagination.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/pagination.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../internal/headers.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/headers.mjs\");\n/* harmony import */ var _internal_uploads_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../internal/uploads.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/uploads.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../internal/utils/path.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\nclass Files extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * List Files\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const fileMetadata of client.beta.files.list()) {\n     *   // ...\n     * }\n     * ```\n     */ list(params = {}, options) {\n        const { betas, ...query } = params ?? {};\n        return this._client.getAPIList(\"/v1/files\", _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.Page, {\n            query,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"anthropic-beta\": [\n                        ...betas ?? [],\n                        \"files-api-2025-04-14\"\n                    ].toString()\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Delete File\n     *\n     * @example\n     * ```ts\n     * const deletedFile = await client.beta.files.delete(\n     *   'file_id',\n     * );\n     * ```\n     */ delete(fileID, params = {}, options) {\n        const { betas } = params ?? {};\n        return this._client.delete(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_4__.path`/v1/files/${fileID}`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"anthropic-beta\": [\n                        ...betas ?? [],\n                        \"files-api-2025-04-14\"\n                    ].toString()\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Download File\n     *\n     * @example\n     * ```ts\n     * const response = await client.beta.files.download(\n     *   'file_id',\n     * );\n     *\n     * const content = await response.blob();\n     * console.log(content);\n     * ```\n     */ download(fileID, params = {}, options) {\n        const { betas } = params ?? {};\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_4__.path`/v1/files/${fileID}/content`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"anthropic-beta\": [\n                        ...betas ?? [],\n                        \"files-api-2025-04-14\"\n                    ].toString(),\n                    Accept: \"application/binary\"\n                },\n                options?.headers\n            ]),\n            __binaryResponse: true\n        });\n    }\n    /**\n     * Get File Metadata\n     *\n     * @example\n     * ```ts\n     * const fileMetadata =\n     *   await client.beta.files.retrieveMetadata('file_id');\n     * ```\n     */ retrieveMetadata(fileID, params = {}, options) {\n        const { betas } = params ?? {};\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_4__.path`/v1/files/${fileID}`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"anthropic-beta\": [\n                        ...betas ?? [],\n                        \"files-api-2025-04-14\"\n                    ].toString()\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Upload File\n     *\n     * @example\n     * ```ts\n     * const fileMetadata = await client.beta.files.upload({\n     *   file: fs.createReadStream('path/to/file'),\n     * });\n     * ```\n     */ upload(params, options) {\n        const { betas, ...body } = params;\n        return this._client.post(\"/v1/files\", (0,_internal_uploads_mjs__WEBPACK_IMPORTED_MODULE_3__.multipartFormRequestOptions)({\n            body,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"anthropic-beta\": [\n                        ...betas ?? [],\n                        \"files-api-2025-04-14\"\n                    ].toString()\n                },\n                options?.headers\n            ])\n        }, this._client));\n    }\n} //# sourceMappingURL=files.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvcmVzb3VyY2VzL2JldGEvZmlsZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHNGQUFzRjtBQUNoQztBQUNMO0FBQ1M7QUFDZTtBQUNwQjtBQUM5QyxNQUFNSyxjQUFjTCwyREFBV0E7SUFDbEM7Ozs7Ozs7Ozs7S0FVQyxHQUNETSxLQUFLQyxTQUFTLENBQUMsQ0FBQyxFQUFFQyxPQUFPLEVBQUU7UUFDdkIsTUFBTSxFQUFFQyxLQUFLLEVBQUUsR0FBR0MsT0FBTyxHQUFHSCxVQUFVLENBQUM7UUFDdkMsT0FBTyxJQUFJLENBQUNJLE9BQU8sQ0FBQ0MsVUFBVSxDQUFDLGFBQWNYLHNEQUFJQSxFQUFHO1lBQ2hEUztZQUNBLEdBQUdGLE9BQU87WUFDVkssU0FBU1gsbUVBQVlBLENBQUM7Z0JBQ2xCO29CQUFFLGtCQUFrQjsyQkFBS08sU0FBUyxFQUFFO3dCQUFHO3FCQUF1QixDQUFDSyxRQUFRO2dCQUFHO2dCQUMxRU4sU0FBU0s7YUFDWjtRQUNMO0lBQ0o7SUFDQTs7Ozs7Ozs7O0tBU0MsR0FDREUsT0FBT0MsTUFBTSxFQUFFVCxTQUFTLENBQUMsQ0FBQyxFQUFFQyxPQUFPLEVBQUU7UUFDakMsTUFBTSxFQUFFQyxLQUFLLEVBQUUsR0FBR0YsVUFBVSxDQUFDO1FBQzdCLE9BQU8sSUFBSSxDQUFDSSxPQUFPLENBQUNJLE1BQU0sQ0FBQ1gsMERBQUssQ0FBQyxVQUFVLEVBQUVZLE9BQU8sQ0FBQyxFQUFFO1lBQ25ELEdBQUdSLE9BQU87WUFDVkssU0FBU1gsbUVBQVlBLENBQUM7Z0JBQ2xCO29CQUFFLGtCQUFrQjsyQkFBS08sU0FBUyxFQUFFO3dCQUFHO3FCQUF1QixDQUFDSyxRQUFRO2dCQUFHO2dCQUMxRU4sU0FBU0s7YUFDWjtRQUNMO0lBQ0o7SUFDQTs7Ozs7Ozs7Ozs7O0tBWUMsR0FDREksU0FBU0QsTUFBTSxFQUFFVCxTQUFTLENBQUMsQ0FBQyxFQUFFQyxPQUFPLEVBQUU7UUFDbkMsTUFBTSxFQUFFQyxLQUFLLEVBQUUsR0FBR0YsVUFBVSxDQUFDO1FBQzdCLE9BQU8sSUFBSSxDQUFDSSxPQUFPLENBQUNPLEdBQUcsQ0FBQ2QsMERBQUssQ0FBQyxVQUFVLEVBQUVZLE9BQU8sUUFBUSxDQUFDLEVBQUU7WUFDeEQsR0FBR1IsT0FBTztZQUNWSyxTQUFTWCxtRUFBWUEsQ0FBQztnQkFDbEI7b0JBQ0ksa0JBQWtCOzJCQUFLTyxTQUFTLEVBQUU7d0JBQUc7cUJBQXVCLENBQUNLLFFBQVE7b0JBQ3JFSyxRQUFRO2dCQUNaO2dCQUNBWCxTQUFTSzthQUNaO1lBQ0RPLGtCQUFrQjtRQUN0QjtJQUNKO0lBQ0E7Ozs7Ozs7O0tBUUMsR0FDREMsaUJBQWlCTCxNQUFNLEVBQUVULFNBQVMsQ0FBQyxDQUFDLEVBQUVDLE9BQU8sRUFBRTtRQUMzQyxNQUFNLEVBQUVDLEtBQUssRUFBRSxHQUFHRixVQUFVLENBQUM7UUFDN0IsT0FBTyxJQUFJLENBQUNJLE9BQU8sQ0FBQ08sR0FBRyxDQUFDZCwwREFBSyxDQUFDLFVBQVUsRUFBRVksT0FBTyxDQUFDLEVBQUU7WUFDaEQsR0FBR1IsT0FBTztZQUNWSyxTQUFTWCxtRUFBWUEsQ0FBQztnQkFDbEI7b0JBQUUsa0JBQWtCOzJCQUFLTyxTQUFTLEVBQUU7d0JBQUc7cUJBQXVCLENBQUNLLFFBQVE7Z0JBQUc7Z0JBQzFFTixTQUFTSzthQUNaO1FBQ0w7SUFDSjtJQUNBOzs7Ozs7Ozs7S0FTQyxHQUNEUyxPQUFPZixNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUNwQixNQUFNLEVBQUVDLEtBQUssRUFBRSxHQUFHYyxNQUFNLEdBQUdoQjtRQUMzQixPQUFPLElBQUksQ0FBQ0ksT0FBTyxDQUFDYSxJQUFJLENBQUMsYUFBYXJCLGtGQUEyQkEsQ0FBQztZQUM5RG9CO1lBQ0EsR0FBR2YsT0FBTztZQUNWSyxTQUFTWCxtRUFBWUEsQ0FBQztnQkFDbEI7b0JBQUUsa0JBQWtCOzJCQUFLTyxTQUFTLEVBQUU7d0JBQUc7cUJBQXVCLENBQUNLLFFBQVE7Z0JBQUc7Z0JBQzFFTixTQUFTSzthQUNaO1FBQ0wsR0FBRyxJQUFJLENBQUNGLE9BQU87SUFDbkI7QUFDSixFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FydGlmeS1hZ2VudC8uL25vZGVfbW9kdWxlcy9AYW50aHJvcGljLWFpL3Nkay9yZXNvdXJjZXMvYmV0YS9maWxlcy5tanM/OWE5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vY29yZS9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IFBhZ2UgfSBmcm9tIFwiLi4vLi4vY29yZS9wYWdpbmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgYnVpbGRIZWFkZXJzIH0gZnJvbSBcIi4uLy4uL2ludGVybmFsL2hlYWRlcnMubWpzXCI7XG5pbXBvcnQgeyBtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMgfSBmcm9tIFwiLi4vLi4vaW50ZXJuYWwvdXBsb2Fkcy5tanNcIjtcbmltcG9ydCB7IHBhdGggfSBmcm9tIFwiLi4vLi4vaW50ZXJuYWwvdXRpbHMvcGF0aC5tanNcIjtcbmV4cG9ydCBjbGFzcyBGaWxlcyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBMaXN0IEZpbGVzXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogLy8gQXV0b21hdGljYWxseSBmZXRjaGVzIG1vcmUgcGFnZXMgYXMgbmVlZGVkLlxuICAgICAqIGZvciBhd2FpdCAoY29uc3QgZmlsZU1ldGFkYXRhIG9mIGNsaWVudC5iZXRhLmZpbGVzLmxpc3QoKSkge1xuICAgICAqICAgLy8gLi4uXG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGxpc3QocGFyYW1zID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBiZXRhcywgLi4ucXVlcnkgfSA9IHBhcmFtcyA/PyB7fTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KCcvdjEvZmlsZXMnLCAoUGFnZSksIHtcbiAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IGJ1aWxkSGVhZGVycyhbXG4gICAgICAgICAgICAgICAgeyAnYW50aHJvcGljLWJldGEnOiBbLi4uKGJldGFzID8/IFtdKSwgJ2ZpbGVzLWFwaS0yMDI1LTA0LTE0J10udG9TdHJpbmcoKSB9LFxuICAgICAgICAgICAgICAgIG9wdGlvbnM/LmhlYWRlcnMsXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBGaWxlXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogY29uc3QgZGVsZXRlZEZpbGUgPSBhd2FpdCBjbGllbnQuYmV0YS5maWxlcy5kZWxldGUoXG4gICAgICogICAnZmlsZV9pZCcsXG4gICAgICogKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBkZWxldGUoZmlsZUlELCBwYXJhbXMgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGJldGFzIH0gPSBwYXJhbXMgPz8ge307XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZGVsZXRlKHBhdGggYC92MS9maWxlcy8ke2ZpbGVJRH1gLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogYnVpbGRIZWFkZXJzKFtcbiAgICAgICAgICAgICAgICB7ICdhbnRocm9waWMtYmV0YSc6IFsuLi4oYmV0YXMgPz8gW10pLCAnZmlsZXMtYXBpLTIwMjUtMDQtMTQnXS50b1N0cmluZygpIH0sXG4gICAgICAgICAgICAgICAgb3B0aW9ucz8uaGVhZGVycyxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRG93bmxvYWQgRmlsZVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LmJldGEuZmlsZXMuZG93bmxvYWQoXG4gICAgICogICAnZmlsZV9pZCcsXG4gICAgICogKTtcbiAgICAgKlxuICAgICAqIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCByZXNwb25zZS5ibG9iKCk7XG4gICAgICogY29uc29sZS5sb2coY29udGVudCk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZG93bmxvYWQoZmlsZUlELCBwYXJhbXMgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGJldGFzIH0gPSBwYXJhbXMgPz8ge307XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KHBhdGggYC92MS9maWxlcy8ke2ZpbGVJRH0vY29udGVudGAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiBidWlsZEhlYWRlcnMoW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgJ2FudGhyb3BpYy1iZXRhJzogWy4uLihiZXRhcyA/PyBbXSksICdmaWxlcy1hcGktMjAyNS0wNC0xNCddLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2JpbmFyeScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zPy5oZWFkZXJzLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfX2JpbmFyeVJlc3BvbnNlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IEZpbGUgTWV0YWRhdGFcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiBjb25zdCBmaWxlTWV0YWRhdGEgPVxuICAgICAqICAgYXdhaXQgY2xpZW50LmJldGEuZmlsZXMucmV0cmlldmVNZXRhZGF0YSgnZmlsZV9pZCcpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHJldHJpZXZlTWV0YWRhdGEoZmlsZUlELCBwYXJhbXMgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGJldGFzIH0gPSBwYXJhbXMgPz8ge307XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KHBhdGggYC92MS9maWxlcy8ke2ZpbGVJRH1gLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogYnVpbGRIZWFkZXJzKFtcbiAgICAgICAgICAgICAgICB7ICdhbnRocm9waWMtYmV0YSc6IFsuLi4oYmV0YXMgPz8gW10pLCAnZmlsZXMtYXBpLTIwMjUtMDQtMTQnXS50b1N0cmluZygpIH0sXG4gICAgICAgICAgICAgICAgb3B0aW9ucz8uaGVhZGVycyxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBsb2FkIEZpbGVcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiBjb25zdCBmaWxlTWV0YWRhdGEgPSBhd2FpdCBjbGllbnQuYmV0YS5maWxlcy51cGxvYWQoe1xuICAgICAqICAgZmlsZTogZnMuY3JlYXRlUmVhZFN0cmVhbSgncGF0aC90by9maWxlJyksXG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgdXBsb2FkKHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGJldGFzLCAuLi5ib2R5IH0gPSBwYXJhbXM7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL3YxL2ZpbGVzJywgbXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zKHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogYnVpbGRIZWFkZXJzKFtcbiAgICAgICAgICAgICAgICB7ICdhbnRocm9waWMtYmV0YSc6IFsuLi4oYmV0YXMgPz8gW10pLCAnZmlsZXMtYXBpLTIwMjUtMDQtMTQnXS50b1N0cmluZygpIH0sXG4gICAgICAgICAgICAgICAgb3B0aW9ucz8uaGVhZGVycyxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICB9LCB0aGlzLl9jbGllbnQpKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWxlcy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiUGFnZSIsImJ1aWxkSGVhZGVycyIsIm11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyIsInBhdGgiLCJGaWxlcyIsImxpc3QiLCJwYXJhbXMiLCJvcHRpb25zIiwiYmV0YXMiLCJxdWVyeSIsIl9jbGllbnQiLCJnZXRBUElMaXN0IiwiaGVhZGVycyIsInRvU3RyaW5nIiwiZGVsZXRlIiwiZmlsZUlEIiwiZG93bmxvYWQiLCJnZXQiLCJBY2NlcHQiLCJfX2JpbmFyeVJlc3BvbnNlIiwicmV0cmlldmVNZXRhZGF0YSIsInVwbG9hZCIsImJvZHkiLCJwb3N0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/resources/beta/files.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/resources/beta/messages/batches.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/resources/beta/messages/batches.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Batches: () => (/* binding */ Batches)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/resource.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/resource.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/pagination.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/pagination.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../internal/headers.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/headers.mjs\");\n/* harmony import */ var _internal_decoders_jsonl_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../internal/decoders/jsonl.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/decoders/jsonl.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../error.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/error.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../internal/utils/path.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\nclass Batches extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Send a batch of Message creation requests.\n     *\n     * The Message Batches API can be used to process multiple Messages API requests at\n     * once. Once a Message Batch is created, it begins processing immediately. Batches\n     * can take up to 24 hours to complete.\n     *\n     * Learn more about the Message Batches API in our\n     * [user guide](/en/docs/build-with-claude/batch-processing)\n     *\n     * @example\n     * ```ts\n     * const betaMessageBatch =\n     *   await client.beta.messages.batches.create({\n     *     requests: [\n     *       {\n     *         custom_id: 'my-custom-id-1',\n     *         params: {\n     *           max_tokens: 1024,\n     *           messages: [\n     *             { content: 'Hello, world', role: 'user' },\n     *           ],\n     *           model: 'claude-3-7-sonnet-20250219',\n     *         },\n     *       },\n     *     ],\n     *   });\n     * ```\n     */ create(params, options) {\n        const { betas, ...body } = params;\n        return this._client.post(\"/v1/messages/batches?beta=true\", {\n            body,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"anthropic-beta\": [\n                        ...betas ?? [],\n                        \"message-batches-2024-09-24\"\n                    ].toString()\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * This endpoint is idempotent and can be used to poll for Message Batch\n     * completion. To access the results of a Message Batch, make a request to the\n     * `results_url` field in the response.\n     *\n     * Learn more about the Message Batches API in our\n     * [user guide](/en/docs/build-with-claude/batch-processing)\n     *\n     * @example\n     * ```ts\n     * const betaMessageBatch =\n     *   await client.beta.messages.batches.retrieve(\n     *     'message_batch_id',\n     *   );\n     * ```\n     */ retrieve(messageBatchID, params = {}, options) {\n        const { betas } = params ?? {};\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path`/v1/messages/batches/${messageBatchID}?beta=true`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"anthropic-beta\": [\n                        ...betas ?? [],\n                        \"message-batches-2024-09-24\"\n                    ].toString()\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * List all Message Batches within a Workspace. Most recently created batches are\n     * returned first.\n     *\n     * Learn more about the Message Batches API in our\n     * [user guide](/en/docs/build-with-claude/batch-processing)\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const betaMessageBatch of client.beta.messages.batches.list()) {\n     *   // ...\n     * }\n     * ```\n     */ list(params = {}, options) {\n        const { betas, ...query } = params ?? {};\n        return this._client.getAPIList(\"/v1/messages/batches?beta=true\", _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.Page, {\n            query,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"anthropic-beta\": [\n                        ...betas ?? [],\n                        \"message-batches-2024-09-24\"\n                    ].toString()\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Delete a Message Batch.\n     *\n     * Message Batches can only be deleted once they've finished processing. If you'd\n     * like to delete an in-progress batch, you must first cancel it.\n     *\n     * Learn more about the Message Batches API in our\n     * [user guide](/en/docs/build-with-claude/batch-processing)\n     *\n     * @example\n     * ```ts\n     * const betaDeletedMessageBatch =\n     *   await client.beta.messages.batches.delete(\n     *     'message_batch_id',\n     *   );\n     * ```\n     */ delete(messageBatchID, params = {}, options) {\n        const { betas } = params ?? {};\n        return this._client.delete(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path`/v1/messages/batches/${messageBatchID}?beta=true`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"anthropic-beta\": [\n                        ...betas ?? [],\n                        \"message-batches-2024-09-24\"\n                    ].toString()\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Batches may be canceled any time before processing ends. Once cancellation is\n     * initiated, the batch enters a `canceling` state, at which time the system may\n     * complete any in-progress, non-interruptible requests before finalizing\n     * cancellation.\n     *\n     * The number of canceled requests is specified in `request_counts`. To determine\n     * which requests were canceled, check the individual results within the batch.\n     * Note that cancellation may not result in any canceled requests if they were\n     * non-interruptible.\n     *\n     * Learn more about the Message Batches API in our\n     * [user guide](/en/docs/build-with-claude/batch-processing)\n     *\n     * @example\n     * ```ts\n     * const betaMessageBatch =\n     *   await client.beta.messages.batches.cancel(\n     *     'message_batch_id',\n     *   );\n     * ```\n     */ cancel(messageBatchID, params = {}, options) {\n        const { betas } = params ?? {};\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path`/v1/messages/batches/${messageBatchID}/cancel?beta=true`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"anthropic-beta\": [\n                        ...betas ?? [],\n                        \"message-batches-2024-09-24\"\n                    ].toString()\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * Streams the results of a Message Batch as a `.jsonl` file.\n     *\n     * Each line in the file is a JSON object containing the result of a single request\n     * in the Message Batch. Results are not guaranteed to be in the same order as\n     * requests. Use the `custom_id` field to match results to requests.\n     *\n     * Learn more about the Message Batches API in our\n     * [user guide](/en/docs/build-with-claude/batch-processing)\n     *\n     * @example\n     * ```ts\n     * const betaMessageBatchIndividualResponse =\n     *   await client.beta.messages.batches.results(\n     *     'message_batch_id',\n     *   );\n     * ```\n     */ async results(messageBatchID, params = {}, options) {\n        const batch = await this.retrieve(messageBatchID);\n        if (!batch.results_url) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_4__.AnthropicError(`No batch \\`results_url\\`; Has it finished processing? ${batch.processing_status} - ${batch.id}`);\n        }\n        const { betas } = params ?? {};\n        return this._client.get(batch.results_url, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"anthropic-beta\": [\n                        ...betas ?? [],\n                        \"message-batches-2024-09-24\"\n                    ].toString(),\n                    Accept: \"application/binary\"\n                },\n                options?.headers\n            ]),\n            stream: true,\n            __binaryResponse: true\n        })._thenUnwrap((_, props)=>_internal_decoders_jsonl_mjs__WEBPACK_IMPORTED_MODULE_3__.JSONLDecoder.fromResponse(props.response, props.controller));\n    }\n} //# sourceMappingURL=batches.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/resources/beta/messages/batches.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/resources/beta/messages/messages.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/resources/beta/messages/messages.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Messages: () => (/* binding */ Messages)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/resource.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/resource.mjs\");\n/* harmony import */ var _batches_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./batches.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/resources/beta/messages/batches.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../internal/headers.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/headers.mjs\");\n/* harmony import */ var _lib_BetaMessageStream_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../lib/BetaMessageStream.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/lib/BetaMessageStream.mjs\");\n/* harmony import */ var _internal_constants_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../internal/constants.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/constants.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\nconst DEPRECATED_MODELS = {\n    \"claude-1.3\": \"November 6th, 2024\",\n    \"claude-1.3-100k\": \"November 6th, 2024\",\n    \"claude-instant-1.1\": \"November 6th, 2024\",\n    \"claude-instant-1.1-100k\": \"November 6th, 2024\",\n    \"claude-instant-1.2\": \"November 6th, 2024\",\n    \"claude-3-sonnet-20240229\": \"July 21st, 2025\",\n    \"claude-2.1\": \"July 21st, 2025\",\n    \"claude-2.0\": \"July 21st, 2025\"\n};\n\nclass Messages extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.batches = new _batches_mjs__WEBPACK_IMPORTED_MODULE_1__.Batches(this._client);\n    }\n    create(params, options) {\n        const { betas, ...body } = params;\n        if (body.model in DEPRECATED_MODELS) {\n            console.warn(`The model '${body.model}' is deprecated and will reach end-of-life on ${DEPRECATED_MODELS[body.model]}\\nPlease migrate to a newer model. Visit https://docs.anthropic.com/en/docs/resources/model-deprecations for more information.`);\n        }\n        let timeout = this._client._options.timeout;\n        if (!body.stream && timeout == null) {\n            const maxNonstreamingTokens = _internal_constants_mjs__WEBPACK_IMPORTED_MODULE_4__.MODEL_NONSTREAMING_TOKENS[body.model] ?? undefined;\n            timeout = this._client.calculateNonstreamingTimeout(body.max_tokens, maxNonstreamingTokens);\n        }\n        return this._client.post(\"/v1/messages?beta=true\", {\n            body,\n            timeout: timeout ?? 600000,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    ...betas?.toString() != null ? {\n                        \"anthropic-beta\": betas?.toString()\n                    } : undefined\n                },\n                options?.headers\n            ]),\n            stream: params.stream ?? false\n        });\n    }\n    /**\n     * Create a Message stream\n     */ stream(body, options) {\n        return _lib_BetaMessageStream_mjs__WEBPACK_IMPORTED_MODULE_3__.BetaMessageStream.createMessage(this, body, options);\n    }\n    /**\n     * Count the number of tokens in a Message.\n     *\n     * The Token Count API can be used to count the number of tokens in a Message,\n     * including tools, images, and documents, without creating it.\n     *\n     * Learn more about token counting in our\n     * [user guide](/en/docs/build-with-claude/token-counting)\n     *\n     * @example\n     * ```ts\n     * const betaMessageTokensCount =\n     *   await client.beta.messages.countTokens({\n     *     messages: [{ content: 'string', role: 'user' }],\n     *     model: 'claude-3-7-sonnet-latest',\n     *   });\n     * ```\n     */ countTokens(params, options) {\n        const { betas, ...body } = params;\n        return this._client.post(\"/v1/messages/count_tokens?beta=true\", {\n            body,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    \"anthropic-beta\": [\n                        ...betas ?? [],\n                        \"token-counting-2024-11-01\"\n                    ].toString()\n                },\n                options?.headers\n            ])\n        });\n    }\n}\nMessages.Batches = _batches_mjs__WEBPACK_IMPORTED_MODULE_1__.Batches; //# sourceMappingURL=messages.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvcmVzb3VyY2VzL2JldGEvbWVzc2FnZXMvbWVzc2FnZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHNGQUFzRjtBQUM3QjtBQUNiO0FBQ0g7QUFDb0I7QUFDVTtBQUN2RSxNQUFNSyxvQkFBb0I7SUFDdEIsY0FBYztJQUNkLG1CQUFtQjtJQUNuQixzQkFBc0I7SUFDdEIsMkJBQTJCO0lBQzNCLHNCQUFzQjtJQUN0Qiw0QkFBNEI7SUFDNUIsY0FBYztJQUNkLGNBQWM7QUFDbEI7QUFDNEU7QUFDckUsTUFBTUUsaUJBQWlCUCwyREFBV0E7SUFDckNRLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxPQUFPLEdBQUcsSUFBSVQsaURBQWtCLENBQUMsSUFBSSxDQUFDVSxPQUFPO0lBQ3REO0lBQ0FDLE9BQU9DLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQ3BCLE1BQU0sRUFBRUMsS0FBSyxFQUFFLEdBQUdDLE1BQU0sR0FBR0g7UUFDM0IsSUFBSUcsS0FBS0MsS0FBSyxJQUFJWixtQkFBbUI7WUFDakNhLFFBQVFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRUgsS0FBS0MsS0FBSyxDQUFDLDhDQUE4QyxFQUFFWixpQkFBaUIsQ0FBQ1csS0FBS0MsS0FBSyxDQUFDLENBQUMsOEhBQThILENBQUM7UUFDdlA7UUFDQSxJQUFJRyxVQUFVLElBQUksQ0FBQ1QsT0FBTyxDQUFDVSxRQUFRLENBQUNELE9BQU87UUFDM0MsSUFBSSxDQUFDSixLQUFLTSxNQUFNLElBQUlGLFdBQVcsTUFBTTtZQUNqQyxNQUFNRyx3QkFBd0JqQiw4RUFBeUIsQ0FBQ1UsS0FBS0MsS0FBSyxDQUFDLElBQUlPO1lBQ3ZFSixVQUFVLElBQUksQ0FBQ1QsT0FBTyxDQUFDYyw0QkFBNEIsQ0FBQ1QsS0FBS1UsVUFBVSxFQUFFSDtRQUN6RTtRQUNBLE9BQU8sSUFBSSxDQUFDWixPQUFPLENBQUNnQixJQUFJLENBQUMsMEJBQTBCO1lBQy9DWDtZQUNBSSxTQUFTQSxXQUFXO1lBQ3BCLEdBQUdOLE9BQU87WUFDVmMsU0FBU3pCLG1FQUFZQSxDQUFDO2dCQUNsQjtvQkFBRSxHQUFJWSxPQUFPYyxjQUFjLE9BQU87d0JBQUUsa0JBQWtCZCxPQUFPYztvQkFBVyxJQUFJTCxTQUFTO2dCQUFFO2dCQUN2RlYsU0FBU2M7YUFDWjtZQUNETixRQUFRVCxPQUFPUyxNQUFNLElBQUk7UUFDN0I7SUFDSjtJQUNBOztLQUVDLEdBQ0RBLE9BQU9OLElBQUksRUFBRUYsT0FBTyxFQUFFO1FBQ2xCLE9BQU9WLHlFQUFpQkEsQ0FBQzBCLGFBQWEsQ0FBQyxJQUFJLEVBQUVkLE1BQU1GO0lBQ3ZEO0lBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBaUJDLEdBQ0RpQixZQUFZbEIsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDekIsTUFBTSxFQUFFQyxLQUFLLEVBQUUsR0FBR0MsTUFBTSxHQUFHSDtRQUMzQixPQUFPLElBQUksQ0FBQ0YsT0FBTyxDQUFDZ0IsSUFBSSxDQUFDLHVDQUF1QztZQUM1RFg7WUFDQSxHQUFHRixPQUFPO1lBQ1ZjLFNBQVN6QixtRUFBWUEsQ0FBQztnQkFDbEI7b0JBQUUsa0JBQWtCOzJCQUFLWSxTQUFTLEVBQUU7d0JBQUc7cUJBQTRCLENBQUNjLFFBQVE7Z0JBQUc7Z0JBQy9FZixTQUFTYzthQUNaO1FBQ0w7SUFDSjtBQUNKO0FBQ0FyQixTQUFTTCxPQUFPLEdBQUdBLGlEQUFPQSxFQUMxQixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcnRpZnktYWdlbnQvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvcmVzb3VyY2VzL2JldGEvbWVzc2FnZXMvbWVzc2FnZXMubWpzPzAwNzkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgKiBhcyBCYXRjaGVzQVBJIGZyb20gXCIuL2JhdGNoZXMubWpzXCI7XG5pbXBvcnQgeyBCYXRjaGVzLCB9IGZyb20gXCIuL2JhdGNoZXMubWpzXCI7XG5pbXBvcnQgeyBidWlsZEhlYWRlcnMgfSBmcm9tIFwiLi4vLi4vLi4vaW50ZXJuYWwvaGVhZGVycy5tanNcIjtcbmltcG9ydCB7IEJldGFNZXNzYWdlU3RyZWFtIH0gZnJvbSBcIi4uLy4uLy4uL2xpYi9CZXRhTWVzc2FnZVN0cmVhbS5tanNcIjtcbmNvbnN0IERFUFJFQ0FURURfTU9ERUxTID0ge1xuICAgICdjbGF1ZGUtMS4zJzogJ05vdmVtYmVyIDZ0aCwgMjAyNCcsXG4gICAgJ2NsYXVkZS0xLjMtMTAwayc6ICdOb3ZlbWJlciA2dGgsIDIwMjQnLFxuICAgICdjbGF1ZGUtaW5zdGFudC0xLjEnOiAnTm92ZW1iZXIgNnRoLCAyMDI0JyxcbiAgICAnY2xhdWRlLWluc3RhbnQtMS4xLTEwMGsnOiAnTm92ZW1iZXIgNnRoLCAyMDI0JyxcbiAgICAnY2xhdWRlLWluc3RhbnQtMS4yJzogJ05vdmVtYmVyIDZ0aCwgMjAyNCcsXG4gICAgJ2NsYXVkZS0zLXNvbm5ldC0yMDI0MDIyOSc6ICdKdWx5IDIxc3QsIDIwMjUnLFxuICAgICdjbGF1ZGUtMi4xJzogJ0p1bHkgMjFzdCwgMjAyNScsXG4gICAgJ2NsYXVkZS0yLjAnOiAnSnVseSAyMXN0LCAyMDI1Jyxcbn07XG5pbXBvcnQgeyBNT0RFTF9OT05TVFJFQU1JTkdfVE9LRU5TIH0gZnJvbSBcIi4uLy4uLy4uL2ludGVybmFsL2NvbnN0YW50cy5tanNcIjtcbmV4cG9ydCBjbGFzcyBNZXNzYWdlcyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5iYXRjaGVzID0gbmV3IEJhdGNoZXNBUEkuQmF0Y2hlcyh0aGlzLl9jbGllbnQpO1xuICAgIH1cbiAgICBjcmVhdGUocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgYmV0YXMsIC4uLmJvZHkgfSA9IHBhcmFtcztcbiAgICAgICAgaWYgKGJvZHkubW9kZWwgaW4gREVQUkVDQVRFRF9NT0RFTFMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgVGhlIG1vZGVsICcke2JvZHkubW9kZWx9JyBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIHJlYWNoIGVuZC1vZi1saWZlIG9uICR7REVQUkVDQVRFRF9NT0RFTFNbYm9keS5tb2RlbF19XFxuUGxlYXNlIG1pZ3JhdGUgdG8gYSBuZXdlciBtb2RlbC4gVmlzaXQgaHR0cHM6Ly9kb2NzLmFudGhyb3BpYy5jb20vZW4vZG9jcy9yZXNvdXJjZXMvbW9kZWwtZGVwcmVjYXRpb25zIGZvciBtb3JlIGluZm9ybWF0aW9uLmApO1xuICAgICAgICB9XG4gICAgICAgIGxldCB0aW1lb3V0ID0gdGhpcy5fY2xpZW50Ll9vcHRpb25zLnRpbWVvdXQ7XG4gICAgICAgIGlmICghYm9keS5zdHJlYW0gJiYgdGltZW91dCA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBtYXhOb25zdHJlYW1pbmdUb2tlbnMgPSBNT0RFTF9OT05TVFJFQU1JTkdfVE9LRU5TW2JvZHkubW9kZWxdID8/IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRpbWVvdXQgPSB0aGlzLl9jbGllbnQuY2FsY3VsYXRlTm9uc3RyZWFtaW5nVGltZW91dChib2R5Lm1heF90b2tlbnMsIG1heE5vbnN0cmVhbWluZ1Rva2Vucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvdjEvbWVzc2FnZXM/YmV0YT10cnVlJywge1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIHRpbWVvdXQ6IHRpbWVvdXQgPz8gNjAwMDAwLFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IGJ1aWxkSGVhZGVycyhbXG4gICAgICAgICAgICAgICAgeyAuLi4oYmV0YXM/LnRvU3RyaW5nKCkgIT0gbnVsbCA/IHsgJ2FudGhyb3BpYy1iZXRhJzogYmV0YXM/LnRvU3RyaW5nKCkgfSA6IHVuZGVmaW5lZCkgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zPy5oZWFkZXJzLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBzdHJlYW06IHBhcmFtcy5zdHJlYW0gPz8gZmFsc2UsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBNZXNzYWdlIHN0cmVhbVxuICAgICAqL1xuICAgIHN0cmVhbShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBCZXRhTWVzc2FnZVN0cmVhbS5jcmVhdGVNZXNzYWdlKHRoaXMsIGJvZHksIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3VudCB0aGUgbnVtYmVyIG9mIHRva2VucyBpbiBhIE1lc3NhZ2UuXG4gICAgICpcbiAgICAgKiBUaGUgVG9rZW4gQ291bnQgQVBJIGNhbiBiZSB1c2VkIHRvIGNvdW50IHRoZSBudW1iZXIgb2YgdG9rZW5zIGluIGEgTWVzc2FnZSxcbiAgICAgKiBpbmNsdWRpbmcgdG9vbHMsIGltYWdlcywgYW5kIGRvY3VtZW50cywgd2l0aG91dCBjcmVhdGluZyBpdC5cbiAgICAgKlxuICAgICAqIExlYXJuIG1vcmUgYWJvdXQgdG9rZW4gY291bnRpbmcgaW4gb3VyXG4gICAgICogW3VzZXIgZ3VpZGVdKC9lbi9kb2NzL2J1aWxkLXdpdGgtY2xhdWRlL3Rva2VuLWNvdW50aW5nKVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIGNvbnN0IGJldGFNZXNzYWdlVG9rZW5zQ291bnQgPVxuICAgICAqICAgYXdhaXQgY2xpZW50LmJldGEubWVzc2FnZXMuY291bnRUb2tlbnMoe1xuICAgICAqICAgICBtZXNzYWdlczogW3sgY29udGVudDogJ3N0cmluZycsIHJvbGU6ICd1c2VyJyB9XSxcbiAgICAgKiAgICAgbW9kZWw6ICdjbGF1ZGUtMy03LXNvbm5ldC1sYXRlc3QnLFxuICAgICAqICAgfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgY291bnRUb2tlbnMocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgYmV0YXMsIC4uLmJvZHkgfSA9IHBhcmFtcztcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvdjEvbWVzc2FnZXMvY291bnRfdG9rZW5zP2JldGE9dHJ1ZScsIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogYnVpbGRIZWFkZXJzKFtcbiAgICAgICAgICAgICAgICB7ICdhbnRocm9waWMtYmV0YSc6IFsuLi4oYmV0YXMgPz8gW10pLCAndG9rZW4tY291bnRpbmctMjAyNC0xMS0wMSddLnRvU3RyaW5nKCkgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zPy5oZWFkZXJzLFxuICAgICAgICAgICAgXSksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbk1lc3NhZ2VzLkJhdGNoZXMgPSBCYXRjaGVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVzc2FnZXMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIkJhdGNoZXNBUEkiLCJCYXRjaGVzIiwiYnVpbGRIZWFkZXJzIiwiQmV0YU1lc3NhZ2VTdHJlYW0iLCJERVBSRUNBVEVEX01PREVMUyIsIk1PREVMX05PTlNUUkVBTUlOR19UT0tFTlMiLCJNZXNzYWdlcyIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiYmF0Y2hlcyIsIl9jbGllbnQiLCJjcmVhdGUiLCJwYXJhbXMiLCJvcHRpb25zIiwiYmV0YXMiLCJib2R5IiwibW9kZWwiLCJjb25zb2xlIiwid2FybiIsInRpbWVvdXQiLCJfb3B0aW9ucyIsInN0cmVhbSIsIm1heE5vbnN0cmVhbWluZ1Rva2VucyIsInVuZGVmaW5lZCIsImNhbGN1bGF0ZU5vbnN0cmVhbWluZ1RpbWVvdXQiLCJtYXhfdG9rZW5zIiwicG9zdCIsImhlYWRlcnMiLCJ0b1N0cmluZyIsImNyZWF0ZU1lc3NhZ2UiLCJjb3VudFRva2VucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/resources/beta/messages/messages.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/resources/beta/models.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/resources/beta/models.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Models: () => (/* binding */ Models)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/resource.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/pagination.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/pagination.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../internal/headers.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/headers.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../internal/utils/path.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\nclass Models extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Get a specific model.\n     *\n     * The Models API response can be used to determine information about a specific\n     * model or resolve a model alias to a model ID.\n     *\n     * @example\n     * ```ts\n     * const betaModelInfo = await client.beta.models.retrieve(\n     *   'model_id',\n     * );\n     * ```\n     */ retrieve(modelID, params = {}, options) {\n        const { betas } = params ?? {};\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/v1/models/${modelID}?beta=true`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    ...betas?.toString() != null ? {\n                        \"anthropic-beta\": betas?.toString()\n                    } : undefined\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * List available models.\n     *\n     * The Models API response can be used to determine which models are available for\n     * use in the API. More recently released models are listed first.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const betaModelInfo of client.beta.models.list()) {\n     *   // ...\n     * }\n     * ```\n     */ list(params = {}, options) {\n        const { betas, ...query } = params ?? {};\n        return this._client.getAPIList(\"/v1/models?beta=true\", _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.Page, {\n            query,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    ...betas?.toString() != null ? {\n                        \"anthropic-beta\": betas?.toString()\n                    } : undefined\n                },\n                options?.headers\n            ])\n        });\n    }\n} //# sourceMappingURL=models.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvcmVzb3VyY2VzL2JldGEvbW9kZWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLHNGQUFzRjtBQUNoQztBQUNMO0FBQ1M7QUFDTDtBQUM5QyxNQUFNSSxlQUFlSiwyREFBV0E7SUFDbkM7Ozs7Ozs7Ozs7OztLQVlDLEdBQ0RLLFNBQVNDLE9BQU8sRUFBRUMsU0FBUyxDQUFDLENBQUMsRUFBRUMsT0FBTyxFQUFFO1FBQ3BDLE1BQU0sRUFBRUMsS0FBSyxFQUFFLEdBQUdGLFVBQVUsQ0FBQztRQUM3QixPQUFPLElBQUksQ0FBQ0csT0FBTyxDQUFDQyxHQUFHLENBQUNSLDBEQUFLLENBQUMsV0FBVyxFQUFFRyxRQUFRLFVBQVUsQ0FBQyxFQUFFO1lBQzVELEdBQUdFLE9BQU87WUFDVkksU0FBU1YsbUVBQVlBLENBQUM7Z0JBQ2xCO29CQUFFLEdBQUlPLE9BQU9JLGNBQWMsT0FBTzt3QkFBRSxrQkFBa0JKLE9BQU9JO29CQUFXLElBQUlDLFNBQVM7Z0JBQUU7Z0JBQ3ZGTixTQUFTSTthQUNaO1FBQ0w7SUFDSjtJQUNBOzs7Ozs7Ozs7Ozs7O0tBYUMsR0FDREcsS0FBS1IsU0FBUyxDQUFDLENBQUMsRUFBRUMsT0FBTyxFQUFFO1FBQ3ZCLE1BQU0sRUFBRUMsS0FBSyxFQUFFLEdBQUdPLE9BQU8sR0FBR1QsVUFBVSxDQUFDO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDRyxPQUFPLENBQUNPLFVBQVUsQ0FBQyx3QkFBeUJoQixzREFBSUEsRUFBRztZQUMzRGU7WUFDQSxHQUFHUixPQUFPO1lBQ1ZJLFNBQVNWLG1FQUFZQSxDQUFDO2dCQUNsQjtvQkFBRSxHQUFJTyxPQUFPSSxjQUFjLE9BQU87d0JBQUUsa0JBQWtCSixPQUFPSTtvQkFBVyxJQUFJQyxTQUFTO2dCQUFFO2dCQUN2Rk4sU0FBU0k7YUFDWjtRQUNMO0lBQ0o7QUFDSixFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FydGlmeS1hZ2VudC8uL25vZGVfbW9kdWxlcy9AYW50aHJvcGljLWFpL3Nkay9yZXNvdXJjZXMvYmV0YS9tb2RlbHMubWpzPzhjYjkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uL2NvcmUvcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgeyBQYWdlIH0gZnJvbSBcIi4uLy4uL2NvcmUvcGFnaW5hdGlvbi5tanNcIjtcbmltcG9ydCB7IGJ1aWxkSGVhZGVycyB9IGZyb20gXCIuLi8uLi9pbnRlcm5hbC9oZWFkZXJzLm1qc1wiO1xuaW1wb3J0IHsgcGF0aCB9IGZyb20gXCIuLi8uLi9pbnRlcm5hbC91dGlscy9wYXRoLm1qc1wiO1xuZXhwb3J0IGNsYXNzIE1vZGVscyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBHZXQgYSBzcGVjaWZpYyBtb2RlbC5cbiAgICAgKlxuICAgICAqIFRoZSBNb2RlbHMgQVBJIHJlc3BvbnNlIGNhbiBiZSB1c2VkIHRvIGRldGVybWluZSBpbmZvcm1hdGlvbiBhYm91dCBhIHNwZWNpZmljXG4gICAgICogbW9kZWwgb3IgcmVzb2x2ZSBhIG1vZGVsIGFsaWFzIHRvIGEgbW9kZWwgSUQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogY29uc3QgYmV0YU1vZGVsSW5mbyA9IGF3YWl0IGNsaWVudC5iZXRhLm1vZGVscy5yZXRyaWV2ZShcbiAgICAgKiAgICdtb2RlbF9pZCcsXG4gICAgICogKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICByZXRyaWV2ZShtb2RlbElELCBwYXJhbXMgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGJldGFzIH0gPSBwYXJhbXMgPz8ge307XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KHBhdGggYC92MS9tb2RlbHMvJHttb2RlbElEfT9iZXRhPXRydWVgLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogYnVpbGRIZWFkZXJzKFtcbiAgICAgICAgICAgICAgICB7IC4uLihiZXRhcz8udG9TdHJpbmcoKSAhPSBudWxsID8geyAnYW50aHJvcGljLWJldGEnOiBiZXRhcz8udG9TdHJpbmcoKSB9IDogdW5kZWZpbmVkKSB9LFxuICAgICAgICAgICAgICAgIG9wdGlvbnM/LmhlYWRlcnMsXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExpc3QgYXZhaWxhYmxlIG1vZGVscy5cbiAgICAgKlxuICAgICAqIFRoZSBNb2RlbHMgQVBJIHJlc3BvbnNlIGNhbiBiZSB1c2VkIHRvIGRldGVybWluZSB3aGljaCBtb2RlbHMgYXJlIGF2YWlsYWJsZSBmb3JcbiAgICAgKiB1c2UgaW4gdGhlIEFQSS4gTW9yZSByZWNlbnRseSByZWxlYXNlZCBtb2RlbHMgYXJlIGxpc3RlZCBmaXJzdC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiAvLyBBdXRvbWF0aWNhbGx5IGZldGNoZXMgbW9yZSBwYWdlcyBhcyBuZWVkZWQuXG4gICAgICogZm9yIGF3YWl0IChjb25zdCBiZXRhTW9kZWxJbmZvIG9mIGNsaWVudC5iZXRhLm1vZGVscy5saXN0KCkpIHtcbiAgICAgKiAgIC8vIC4uLlxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBsaXN0KHBhcmFtcyA9IHt9LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgYmV0YXMsIC4uLnF1ZXJ5IH0gPSBwYXJhbXMgPz8ge307XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdCgnL3YxL21vZGVscz9iZXRhPXRydWUnLCAoUGFnZSksIHtcbiAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IGJ1aWxkSGVhZGVycyhbXG4gICAgICAgICAgICAgICAgeyAuLi4oYmV0YXM/LnRvU3RyaW5nKCkgIT0gbnVsbCA/IHsgJ2FudGhyb3BpYy1iZXRhJzogYmV0YXM/LnRvU3RyaW5nKCkgfSA6IHVuZGVmaW5lZCkgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zPy5oZWFkZXJzLFxuICAgICAgICAgICAgXSksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZGVscy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiUGFnZSIsImJ1aWxkSGVhZGVycyIsInBhdGgiLCJNb2RlbHMiLCJyZXRyaWV2ZSIsIm1vZGVsSUQiLCJwYXJhbXMiLCJvcHRpb25zIiwiYmV0YXMiLCJfY2xpZW50IiwiZ2V0IiwiaGVhZGVycyIsInRvU3RyaW5nIiwidW5kZWZpbmVkIiwibGlzdCIsInF1ZXJ5IiwiZ2V0QVBJTGlzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/resources/beta/models.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/resources/completions.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/resources/completions.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Completions: () => (/* binding */ Completions)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/resource.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/resource.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/headers.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/headers.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass Completions extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    create(params, options) {\n        const { betas, ...body } = params;\n        return this._client.post(\"/v1/complete\", {\n            body,\n            timeout: this._client._options.timeout ?? 600000,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_1__.buildHeaders)([\n                {\n                    ...betas?.toString() != null ? {\n                        \"anthropic-beta\": betas?.toString()\n                    } : undefined\n                },\n                options?.headers\n            ]),\n            stream: params.stream ?? false\n        });\n    }\n} //# sourceMappingURL=completions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvcmVzb3VyY2VzL2NvbXBsZXRpb25zLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxzRkFBc0Y7QUFDbkM7QUFDSTtBQUNoRCxNQUFNRSxvQkFBb0JGLDJEQUFXQTtJQUN4Q0csT0FBT0MsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDcEIsTUFBTSxFQUFFQyxLQUFLLEVBQUUsR0FBR0MsTUFBTSxHQUFHSDtRQUMzQixPQUFPLElBQUksQ0FBQ0ksT0FBTyxDQUFDQyxJQUFJLENBQUMsZ0JBQWdCO1lBQ3JDRjtZQUNBRyxTQUFTLElBQUksQ0FBQ0YsT0FBTyxDQUFDRyxRQUFRLENBQUNELE9BQU8sSUFBSTtZQUMxQyxHQUFHTCxPQUFPO1lBQ1ZPLFNBQVNYLG1FQUFZQSxDQUFDO2dCQUNsQjtvQkFBRSxHQUFJSyxPQUFPTyxjQUFjLE9BQU87d0JBQUUsa0JBQWtCUCxPQUFPTztvQkFBVyxJQUFJQyxTQUFTO2dCQUFFO2dCQUN2RlQsU0FBU087YUFDWjtZQUNERyxRQUFRWCxPQUFPVyxNQUFNLElBQUk7UUFDN0I7SUFDSjtBQUNKLEVBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXJ0aWZ5LWFnZW50Ly4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3Jlc291cmNlcy9jb21wbGV0aW9ucy5tanM/MzUxNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vY29yZS9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IGJ1aWxkSGVhZGVycyB9IGZyb20gXCIuLi9pbnRlcm5hbC9oZWFkZXJzLm1qc1wiO1xuZXhwb3J0IGNsYXNzIENvbXBsZXRpb25zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNyZWF0ZShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBiZXRhcywgLi4uYm9keSB9ID0gcGFyYW1zO1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy92MS9jb21wbGV0ZScsIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICB0aW1lb3V0OiB0aGlzLl9jbGllbnQuX29wdGlvbnMudGltZW91dCA/PyA2MDAwMDAsXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogYnVpbGRIZWFkZXJzKFtcbiAgICAgICAgICAgICAgICB7IC4uLihiZXRhcz8udG9TdHJpbmcoKSAhPSBudWxsID8geyAnYW50aHJvcGljLWJldGEnOiBiZXRhcz8udG9TdHJpbmcoKSB9IDogdW5kZWZpbmVkKSB9LFxuICAgICAgICAgICAgICAgIG9wdGlvbnM/LmhlYWRlcnMsXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIHN0cmVhbTogcGFyYW1zLnN0cmVhbSA/PyBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcGxldGlvbnMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsImJ1aWxkSGVhZGVycyIsIkNvbXBsZXRpb25zIiwiY3JlYXRlIiwicGFyYW1zIiwib3B0aW9ucyIsImJldGFzIiwiYm9keSIsIl9jbGllbnQiLCJwb3N0IiwidGltZW91dCIsIl9vcHRpb25zIiwiaGVhZGVycyIsInRvU3RyaW5nIiwidW5kZWZpbmVkIiwic3RyZWFtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/resources/completions.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/resources/index.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/resources/index.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Beta: () => (/* reexport safe */ _beta_beta_mjs__WEBPACK_IMPORTED_MODULE_1__.Beta),\n/* harmony export */   Completions: () => (/* reexport safe */ _completions_mjs__WEBPACK_IMPORTED_MODULE_2__.Completions),\n/* harmony export */   Messages: () => (/* reexport safe */ _messages_messages_mjs__WEBPACK_IMPORTED_MODULE_3__.Messages),\n/* harmony export */   Models: () => (/* reexport safe */ _models_mjs__WEBPACK_IMPORTED_MODULE_4__.Models)\n/* harmony export */ });\n/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shared.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/resources/shared.mjs\");\n/* harmony import */ var _beta_beta_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./beta/beta.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/resources/beta/beta.mjs\");\n/* harmony import */ var _completions_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./completions.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/resources/completions.mjs\");\n/* harmony import */ var _messages_messages_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./messages/messages.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/resources/messages/messages.mjs\");\n/* harmony import */ var _models_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./models.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/resources/models.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvcmVzb3VyY2VzL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxzRkFBc0Y7QUFDekQ7QUFDVztBQUNTO0FBQ0c7QUFDYixDQUN2QyxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcnRpZnktYWdlbnQvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvcmVzb3VyY2VzL2luZGV4Lm1qcz81MTFhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5leHBvcnQgKiBmcm9tIFwiLi9zaGFyZWQubWpzXCI7XG5leHBvcnQgeyBCZXRhLCB9IGZyb20gXCIuL2JldGEvYmV0YS5tanNcIjtcbmV4cG9ydCB7IENvbXBsZXRpb25zLCB9IGZyb20gXCIuL2NvbXBsZXRpb25zLm1qc1wiO1xuZXhwb3J0IHsgTWVzc2FnZXMsIH0gZnJvbSBcIi4vbWVzc2FnZXMvbWVzc2FnZXMubWpzXCI7XG5leHBvcnQgeyBNb2RlbHMsIH0gZnJvbSBcIi4vbW9kZWxzLm1qc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCJdLCJuYW1lcyI6WyJCZXRhIiwiQ29tcGxldGlvbnMiLCJNZXNzYWdlcyIsIk1vZGVscyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/resources/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/resources/messages/batches.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/resources/messages/batches.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Batches: () => (/* binding */ Batches)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/resource.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/pagination.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/pagination.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../internal/headers.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/headers.mjs\");\n/* harmony import */ var _internal_decoders_jsonl_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../internal/decoders/jsonl.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/decoders/jsonl.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../error.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/error.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../internal/utils/path.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\nclass Batches extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Send a batch of Message creation requests.\n     *\n     * The Message Batches API can be used to process multiple Messages API requests at\n     * once. Once a Message Batch is created, it begins processing immediately. Batches\n     * can take up to 24 hours to complete.\n     *\n     * Learn more about the Message Batches API in our\n     * [user guide](/en/docs/build-with-claude/batch-processing)\n     *\n     * @example\n     * ```ts\n     * const messageBatch = await client.messages.batches.create({\n     *   requests: [\n     *     {\n     *       custom_id: 'my-custom-id-1',\n     *       params: {\n     *         max_tokens: 1024,\n     *         messages: [\n     *           { content: 'Hello, world', role: 'user' },\n     *         ],\n     *         model: 'claude-3-7-sonnet-20250219',\n     *       },\n     *     },\n     *   ],\n     * });\n     * ```\n     */ create(body, options) {\n        return this._client.post(\"/v1/messages/batches\", {\n            body,\n            ...options\n        });\n    }\n    /**\n     * This endpoint is idempotent and can be used to poll for Message Batch\n     * completion. To access the results of a Message Batch, make a request to the\n     * `results_url` field in the response.\n     *\n     * Learn more about the Message Batches API in our\n     * [user guide](/en/docs/build-with-claude/batch-processing)\n     *\n     * @example\n     * ```ts\n     * const messageBatch = await client.messages.batches.retrieve(\n     *   'message_batch_id',\n     * );\n     * ```\n     */ retrieve(messageBatchID, options) {\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path`/v1/messages/batches/${messageBatchID}`, options);\n    }\n    /**\n     * List all Message Batches within a Workspace. Most recently created batches are\n     * returned first.\n     *\n     * Learn more about the Message Batches API in our\n     * [user guide](/en/docs/build-with-claude/batch-processing)\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const messageBatch of client.messages.batches.list()) {\n     *   // ...\n     * }\n     * ```\n     */ list(query = {}, options) {\n        return this._client.getAPIList(\"/v1/messages/batches\", _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.Page, {\n            query,\n            ...options\n        });\n    }\n    /**\n     * Delete a Message Batch.\n     *\n     * Message Batches can only be deleted once they've finished processing. If you'd\n     * like to delete an in-progress batch, you must first cancel it.\n     *\n     * Learn more about the Message Batches API in our\n     * [user guide](/en/docs/build-with-claude/batch-processing)\n     *\n     * @example\n     * ```ts\n     * const deletedMessageBatch =\n     *   await client.messages.batches.delete('message_batch_id');\n     * ```\n     */ delete(messageBatchID, options) {\n        return this._client.delete(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path`/v1/messages/batches/${messageBatchID}`, options);\n    }\n    /**\n     * Batches may be canceled any time before processing ends. Once cancellation is\n     * initiated, the batch enters a `canceling` state, at which time the system may\n     * complete any in-progress, non-interruptible requests before finalizing\n     * cancellation.\n     *\n     * The number of canceled requests is specified in `request_counts`. To determine\n     * which requests were canceled, check the individual results within the batch.\n     * Note that cancellation may not result in any canceled requests if they were\n     * non-interruptible.\n     *\n     * Learn more about the Message Batches API in our\n     * [user guide](/en/docs/build-with-claude/batch-processing)\n     *\n     * @example\n     * ```ts\n     * const messageBatch = await client.messages.batches.cancel(\n     *   'message_batch_id',\n     * );\n     * ```\n     */ cancel(messageBatchID, options) {\n        return this._client.post(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path`/v1/messages/batches/${messageBatchID}/cancel`, options);\n    }\n    /**\n     * Streams the results of a Message Batch as a `.jsonl` file.\n     *\n     * Each line in the file is a JSON object containing the result of a single request\n     * in the Message Batch. Results are not guaranteed to be in the same order as\n     * requests. Use the `custom_id` field to match results to requests.\n     *\n     * Learn more about the Message Batches API in our\n     * [user guide](/en/docs/build-with-claude/batch-processing)\n     *\n     * @example\n     * ```ts\n     * const messageBatchIndividualResponse =\n     *   await client.messages.batches.results('message_batch_id');\n     * ```\n     */ async results(messageBatchID, options) {\n        const batch = await this.retrieve(messageBatchID);\n        if (!batch.results_url) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_4__.AnthropicError(`No batch \\`results_url\\`; Has it finished processing? ${batch.processing_status} - ${batch.id}`);\n        }\n        return this._client.get(batch.results_url, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    Accept: \"application/binary\"\n                },\n                options?.headers\n            ]),\n            stream: true,\n            __binaryResponse: true\n        })._thenUnwrap((_, props)=>_internal_decoders_jsonl_mjs__WEBPACK_IMPORTED_MODULE_3__.JSONLDecoder.fromResponse(props.response, props.controller));\n    }\n} //# sourceMappingURL=batches.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/resources/messages/batches.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/resources/messages/messages.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/resources/messages/messages.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Messages: () => (/* binding */ Messages)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/resource.mjs\");\n/* harmony import */ var _lib_MessageStream_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/MessageStream.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/lib/MessageStream.mjs\");\n/* harmony import */ var _batches_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./batches.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/resources/messages/batches.mjs\");\n/* harmony import */ var _internal_constants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../internal/constants.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/constants.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\nclass Messages extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.batches = new _batches_mjs__WEBPACK_IMPORTED_MODULE_2__.Batches(this._client);\n    }\n    create(body, options) {\n        if (body.model in DEPRECATED_MODELS) {\n            console.warn(`The model '${body.model}' is deprecated and will reach end-of-life on ${DEPRECATED_MODELS[body.model]}\\nPlease migrate to a newer model. Visit https://docs.anthropic.com/en/docs/resources/model-deprecations for more information.`);\n        }\n        let timeout = this._client._options.timeout;\n        if (!body.stream && timeout == null) {\n            const maxNonstreamingTokens = _internal_constants_mjs__WEBPACK_IMPORTED_MODULE_3__.MODEL_NONSTREAMING_TOKENS[body.model] ?? undefined;\n            timeout = this._client.calculateNonstreamingTimeout(body.max_tokens, maxNonstreamingTokens);\n        }\n        return this._client.post(\"/v1/messages\", {\n            body,\n            timeout: timeout ?? 600000,\n            ...options,\n            stream: body.stream ?? false\n        });\n    }\n    /**\n     * Create a Message stream\n     */ stream(body, options) {\n        return _lib_MessageStream_mjs__WEBPACK_IMPORTED_MODULE_1__.MessageStream.createMessage(this, body, options);\n    }\n    /**\n     * Count the number of tokens in a Message.\n     *\n     * The Token Count API can be used to count the number of tokens in a Message,\n     * including tools, images, and documents, without creating it.\n     *\n     * Learn more about token counting in our\n     * [user guide](/en/docs/build-with-claude/token-counting)\n     *\n     * @example\n     * ```ts\n     * const messageTokensCount =\n     *   await client.messages.countTokens({\n     *     messages: [{ content: 'string', role: 'user' }],\n     *     model: 'claude-3-7-sonnet-latest',\n     *   });\n     * ```\n     */ countTokens(body, options) {\n        return this._client.post(\"/v1/messages/count_tokens\", {\n            body,\n            ...options\n        });\n    }\n}\nconst DEPRECATED_MODELS = {\n    \"claude-1.3\": \"November 6th, 2024\",\n    \"claude-1.3-100k\": \"November 6th, 2024\",\n    \"claude-instant-1.1\": \"November 6th, 2024\",\n    \"claude-instant-1.1-100k\": \"November 6th, 2024\",\n    \"claude-instant-1.2\": \"November 6th, 2024\",\n    \"claude-3-sonnet-20240229\": \"July 21st, 2025\",\n    \"claude-2.1\": \"July 21st, 2025\",\n    \"claude-2.0\": \"July 21st, 2025\"\n};\nMessages.Batches = _batches_mjs__WEBPACK_IMPORTED_MODULE_2__.Batches; //# sourceMappingURL=messages.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvcmVzb3VyY2VzL21lc3NhZ2VzL21lc3NhZ2VzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLHNGQUFzRjtBQUNoQztBQUNNO0FBQ2hCO0FBQ0g7QUFDZ0M7QUFDbEUsTUFBTUssaUJBQWlCTCwyREFBV0E7SUFDckNNLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxPQUFPLEdBQUcsSUFBSU4saURBQWtCLENBQUMsSUFBSSxDQUFDTyxPQUFPO0lBQ3REO0lBQ0FDLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2xCLElBQUlELEtBQUtFLEtBQUssSUFBSUMsbUJBQW1CO1lBQ2pDQyxRQUFRQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEVBQUVMLEtBQUtFLEtBQUssQ0FBQyw4Q0FBOEMsRUFBRUMsaUJBQWlCLENBQUNILEtBQUtFLEtBQUssQ0FBQyxDQUFDLDhIQUE4SCxDQUFDO1FBQ3ZQO1FBQ0EsSUFBSUksVUFBVSxJQUFJLENBQUNSLE9BQU8sQ0FBQ1MsUUFBUSxDQUFDRCxPQUFPO1FBQzNDLElBQUksQ0FBQ04sS0FBS1EsTUFBTSxJQUFJRixXQUFXLE1BQU07WUFDakMsTUFBTUcsd0JBQXdCaEIsOEVBQXlCLENBQUNPLEtBQUtFLEtBQUssQ0FBQyxJQUFJUTtZQUN2RUosVUFBVSxJQUFJLENBQUNSLE9BQU8sQ0FBQ2EsNEJBQTRCLENBQUNYLEtBQUtZLFVBQVUsRUFBRUg7UUFDekU7UUFDQSxPQUFPLElBQUksQ0FBQ1gsT0FBTyxDQUFDZSxJQUFJLENBQUMsZ0JBQWdCO1lBQ3JDYjtZQUNBTSxTQUFTQSxXQUFXO1lBQ3BCLEdBQUdMLE9BQU87WUFDVk8sUUFBUVIsS0FBS1EsTUFBTSxJQUFJO1FBQzNCO0lBQ0o7SUFDQTs7S0FFQyxHQUNEQSxPQUFPUixJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNsQixPQUFPWCxpRUFBYUEsQ0FBQ3dCLGFBQWEsQ0FBQyxJQUFJLEVBQUVkLE1BQU1DO0lBQ25EO0lBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBaUJDLEdBQ0RjLFlBQVlmLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNlLElBQUksQ0FBQyw2QkFBNkI7WUFBRWI7WUFBTSxHQUFHQyxPQUFPO1FBQUM7SUFDN0U7QUFDSjtBQUNBLE1BQU1FLG9CQUFvQjtJQUN0QixjQUFjO0lBQ2QsbUJBQW1CO0lBQ25CLHNCQUFzQjtJQUN0QiwyQkFBMkI7SUFDM0Isc0JBQXNCO0lBQ3RCLDRCQUE0QjtJQUM1QixjQUFjO0lBQ2QsY0FBYztBQUNsQjtBQUNBVCxTQUFTRixPQUFPLEdBQUdBLGlEQUFPQSxFQUMxQixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcnRpZnktYWdlbnQvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvcmVzb3VyY2VzL21lc3NhZ2VzL21lc3NhZ2VzLm1qcz9lODIxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9jb3JlL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0IHsgTWVzc2FnZVN0cmVhbSB9IGZyb20gXCIuLi8uLi9saWIvTWVzc2FnZVN0cmVhbS5tanNcIjtcbmltcG9ydCAqIGFzIEJhdGNoZXNBUEkgZnJvbSBcIi4vYmF0Y2hlcy5tanNcIjtcbmltcG9ydCB7IEJhdGNoZXMsIH0gZnJvbSBcIi4vYmF0Y2hlcy5tanNcIjtcbmltcG9ydCB7IE1PREVMX05PTlNUUkVBTUlOR19UT0tFTlMgfSBmcm9tIFwiLi4vLi4vaW50ZXJuYWwvY29uc3RhbnRzLm1qc1wiO1xuZXhwb3J0IGNsYXNzIE1lc3NhZ2VzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmJhdGNoZXMgPSBuZXcgQmF0Y2hlc0FQSS5CYXRjaGVzKHRoaXMuX2NsaWVudCk7XG4gICAgfVxuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChib2R5Lm1vZGVsIGluIERFUFJFQ0FURURfTU9ERUxTKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFRoZSBtb2RlbCAnJHtib2R5Lm1vZGVsfScgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCByZWFjaCBlbmQtb2YtbGlmZSBvbiAke0RFUFJFQ0FURURfTU9ERUxTW2JvZHkubW9kZWxdfVxcblBsZWFzZSBtaWdyYXRlIHRvIGEgbmV3ZXIgbW9kZWwuIFZpc2l0IGh0dHBzOi8vZG9jcy5hbnRocm9waWMuY29tL2VuL2RvY3MvcmVzb3VyY2VzL21vZGVsLWRlcHJlY2F0aW9ucyBmb3IgbW9yZSBpbmZvcm1hdGlvbi5gKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdGltZW91dCA9IHRoaXMuX2NsaWVudC5fb3B0aW9ucy50aW1lb3V0O1xuICAgICAgICBpZiAoIWJvZHkuc3RyZWFtICYmIHRpbWVvdXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgbWF4Tm9uc3RyZWFtaW5nVG9rZW5zID0gTU9ERUxfTk9OU1RSRUFNSU5HX1RPS0VOU1tib2R5Lm1vZGVsXSA/PyB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aW1lb3V0ID0gdGhpcy5fY2xpZW50LmNhbGN1bGF0ZU5vbnN0cmVhbWluZ1RpbWVvdXQoYm9keS5tYXhfdG9rZW5zLCBtYXhOb25zdHJlYW1pbmdUb2tlbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL3YxL21lc3NhZ2VzJywge1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIHRpbWVvdXQ6IHRpbWVvdXQgPz8gNjAwMDAwLFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIHN0cmVhbTogYm9keS5zdHJlYW0gPz8gZmFsc2UsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBNZXNzYWdlIHN0cmVhbVxuICAgICAqL1xuICAgIHN0cmVhbShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBNZXNzYWdlU3RyZWFtLmNyZWF0ZU1lc3NhZ2UodGhpcywgYm9keSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvdW50IHRoZSBudW1iZXIgb2YgdG9rZW5zIGluIGEgTWVzc2FnZS5cbiAgICAgKlxuICAgICAqIFRoZSBUb2tlbiBDb3VudCBBUEkgY2FuIGJlIHVzZWQgdG8gY291bnQgdGhlIG51bWJlciBvZiB0b2tlbnMgaW4gYSBNZXNzYWdlLFxuICAgICAqIGluY2x1ZGluZyB0b29scywgaW1hZ2VzLCBhbmQgZG9jdW1lbnRzLCB3aXRob3V0IGNyZWF0aW5nIGl0LlxuICAgICAqXG4gICAgICogTGVhcm4gbW9yZSBhYm91dCB0b2tlbiBjb3VudGluZyBpbiBvdXJcbiAgICAgKiBbdXNlciBndWlkZV0oL2VuL2RvY3MvYnVpbGQtd2l0aC1jbGF1ZGUvdG9rZW4tY291bnRpbmcpXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogY29uc3QgbWVzc2FnZVRva2Vuc0NvdW50ID1cbiAgICAgKiAgIGF3YWl0IGNsaWVudC5tZXNzYWdlcy5jb3VudFRva2Vucyh7XG4gICAgICogICAgIG1lc3NhZ2VzOiBbeyBjb250ZW50OiAnc3RyaW5nJywgcm9sZTogJ3VzZXInIH1dLFxuICAgICAqICAgICBtb2RlbDogJ2NsYXVkZS0zLTctc29ubmV0LWxhdGVzdCcsXG4gICAgICogICB9KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBjb3VudFRva2Vucyhib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL3YxL21lc3NhZ2VzL2NvdW50X3Rva2VucycsIHsgYm9keSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG59XG5jb25zdCBERVBSRUNBVEVEX01PREVMUyA9IHtcbiAgICAnY2xhdWRlLTEuMyc6ICdOb3ZlbWJlciA2dGgsIDIwMjQnLFxuICAgICdjbGF1ZGUtMS4zLTEwMGsnOiAnTm92ZW1iZXIgNnRoLCAyMDI0JyxcbiAgICAnY2xhdWRlLWluc3RhbnQtMS4xJzogJ05vdmVtYmVyIDZ0aCwgMjAyNCcsXG4gICAgJ2NsYXVkZS1pbnN0YW50LTEuMS0xMDBrJzogJ05vdmVtYmVyIDZ0aCwgMjAyNCcsXG4gICAgJ2NsYXVkZS1pbnN0YW50LTEuMic6ICdOb3ZlbWJlciA2dGgsIDIwMjQnLFxuICAgICdjbGF1ZGUtMy1zb25uZXQtMjAyNDAyMjknOiAnSnVseSAyMXN0LCAyMDI1JyxcbiAgICAnY2xhdWRlLTIuMSc6ICdKdWx5IDIxc3QsIDIwMjUnLFxuICAgICdjbGF1ZGUtMi4wJzogJ0p1bHkgMjFzdCwgMjAyNScsXG59O1xuTWVzc2FnZXMuQmF0Y2hlcyA9IEJhdGNoZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXNzYWdlcy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiTWVzc2FnZVN0cmVhbSIsIkJhdGNoZXNBUEkiLCJCYXRjaGVzIiwiTU9ERUxfTk9OU1RSRUFNSU5HX1RPS0VOUyIsIk1lc3NhZ2VzIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJiYXRjaGVzIiwiX2NsaWVudCIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwibW9kZWwiLCJERVBSRUNBVEVEX01PREVMUyIsImNvbnNvbGUiLCJ3YXJuIiwidGltZW91dCIsIl9vcHRpb25zIiwic3RyZWFtIiwibWF4Tm9uc3RyZWFtaW5nVG9rZW5zIiwidW5kZWZpbmVkIiwiY2FsY3VsYXRlTm9uc3RyZWFtaW5nVGltZW91dCIsIm1heF90b2tlbnMiLCJwb3N0IiwiY3JlYXRlTWVzc2FnZSIsImNvdW50VG9rZW5zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/resources/messages/messages.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/resources/models.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/resources/models.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Models: () => (/* binding */ Models)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/resource.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/resource.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/pagination.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/pagination.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal/headers.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/headers.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../internal/utils/path.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\nclass Models extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Get a specific model.\n     *\n     * The Models API response can be used to determine information about a specific\n     * model or resolve a model alias to a model ID.\n     */ retrieve(modelID, params = {}, options) {\n        const { betas } = params ?? {};\n        return this._client.get(_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path`/v1/models/${modelID}`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    ...betas?.toString() != null ? {\n                        \"anthropic-beta\": betas?.toString()\n                    } : undefined\n                },\n                options?.headers\n            ])\n        });\n    }\n    /**\n     * List available models.\n     *\n     * The Models API response can be used to determine which models are available for\n     * use in the API. More recently released models are listed first.\n     */ list(params = {}, options) {\n        const { betas, ...query } = params ?? {};\n        return this._client.getAPIList(\"/v1/models\", _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.Page, {\n            query,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    ...betas?.toString() != null ? {\n                        \"anthropic-beta\": betas?.toString()\n                    } : undefined\n                },\n                options?.headers\n            ])\n        });\n    }\n} //# sourceMappingURL=models.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvcmVzb3VyY2VzL21vZGVscy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxzRkFBc0Y7QUFDbkM7QUFDTDtBQUNTO0FBQ0w7QUFDM0MsTUFBTUksZUFBZUosMkRBQVdBO0lBQ25DOzs7OztLQUtDLEdBQ0RLLFNBQVNDLE9BQU8sRUFBRUMsU0FBUyxDQUFDLENBQUMsRUFBRUMsT0FBTyxFQUFFO1FBQ3BDLE1BQU0sRUFBRUMsS0FBSyxFQUFFLEdBQUdGLFVBQVUsQ0FBQztRQUM3QixPQUFPLElBQUksQ0FBQ0csT0FBTyxDQUFDQyxHQUFHLENBQUNSLDBEQUFLLENBQUMsV0FBVyxFQUFFRyxRQUFRLENBQUMsRUFBRTtZQUNsRCxHQUFHRSxPQUFPO1lBQ1ZJLFNBQVNWLG1FQUFZQSxDQUFDO2dCQUNsQjtvQkFBRSxHQUFJTyxPQUFPSSxjQUFjLE9BQU87d0JBQUUsa0JBQWtCSixPQUFPSTtvQkFBVyxJQUFJQyxTQUFTO2dCQUFFO2dCQUN2Rk4sU0FBU0k7YUFDWjtRQUNMO0lBQ0o7SUFDQTs7Ozs7S0FLQyxHQUNERyxLQUFLUixTQUFTLENBQUMsQ0FBQyxFQUFFQyxPQUFPLEVBQUU7UUFDdkIsTUFBTSxFQUFFQyxLQUFLLEVBQUUsR0FBR08sT0FBTyxHQUFHVCxVQUFVLENBQUM7UUFDdkMsT0FBTyxJQUFJLENBQUNHLE9BQU8sQ0FBQ08sVUFBVSxDQUFDLGNBQWVoQixzREFBSUEsRUFBRztZQUNqRGU7WUFDQSxHQUFHUixPQUFPO1lBQ1ZJLFNBQVNWLG1FQUFZQSxDQUFDO2dCQUNsQjtvQkFBRSxHQUFJTyxPQUFPSSxjQUFjLE9BQU87d0JBQUUsa0JBQWtCSixPQUFPSTtvQkFBVyxJQUFJQyxTQUFTO2dCQUFFO2dCQUN2Rk4sU0FBU0k7YUFDWjtRQUNMO0lBQ0o7QUFDSixFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FydGlmeS1hZ2VudC8uL25vZGVfbW9kdWxlcy9AYW50aHJvcGljLWFpL3Nkay9yZXNvdXJjZXMvbW9kZWxzLm1qcz82Nzc2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi9jb3JlL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gXCIuLi9jb3JlL3BhZ2luYXRpb24ubWpzXCI7XG5pbXBvcnQgeyBidWlsZEhlYWRlcnMgfSBmcm9tIFwiLi4vaW50ZXJuYWwvaGVhZGVycy5tanNcIjtcbmltcG9ydCB7IHBhdGggfSBmcm9tIFwiLi4vaW50ZXJuYWwvdXRpbHMvcGF0aC5tanNcIjtcbmV4cG9ydCBjbGFzcyBNb2RlbHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogR2V0IGEgc3BlY2lmaWMgbW9kZWwuXG4gICAgICpcbiAgICAgKiBUaGUgTW9kZWxzIEFQSSByZXNwb25zZSBjYW4gYmUgdXNlZCB0byBkZXRlcm1pbmUgaW5mb3JtYXRpb24gYWJvdXQgYSBzcGVjaWZpY1xuICAgICAqIG1vZGVsIG9yIHJlc29sdmUgYSBtb2RlbCBhbGlhcyB0byBhIG1vZGVsIElELlxuICAgICAqL1xuICAgIHJldHJpZXZlKG1vZGVsSUQsIHBhcmFtcyA9IHt9LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgYmV0YXMgfSA9IHBhcmFtcyA/PyB7fTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQocGF0aCBgL3YxL21vZGVscy8ke21vZGVsSUR9YCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IGJ1aWxkSGVhZGVycyhbXG4gICAgICAgICAgICAgICAgeyAuLi4oYmV0YXM/LnRvU3RyaW5nKCkgIT0gbnVsbCA/IHsgJ2FudGhyb3BpYy1iZXRhJzogYmV0YXM/LnRvU3RyaW5nKCkgfSA6IHVuZGVmaW5lZCkgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zPy5oZWFkZXJzLFxuICAgICAgICAgICAgXSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaXN0IGF2YWlsYWJsZSBtb2RlbHMuXG4gICAgICpcbiAgICAgKiBUaGUgTW9kZWxzIEFQSSByZXNwb25zZSBjYW4gYmUgdXNlZCB0byBkZXRlcm1pbmUgd2hpY2ggbW9kZWxzIGFyZSBhdmFpbGFibGUgZm9yXG4gICAgICogdXNlIGluIHRoZSBBUEkuIE1vcmUgcmVjZW50bHkgcmVsZWFzZWQgbW9kZWxzIGFyZSBsaXN0ZWQgZmlyc3QuXG4gICAgICovXG4gICAgbGlzdChwYXJhbXMgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGJldGFzLCAuLi5xdWVyeSB9ID0gcGFyYW1zID8/IHt9O1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoJy92MS9tb2RlbHMnLCAoUGFnZSksIHtcbiAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IGJ1aWxkSGVhZGVycyhbXG4gICAgICAgICAgICAgICAgeyAuLi4oYmV0YXM/LnRvU3RyaW5nKCkgIT0gbnVsbCA/IHsgJ2FudGhyb3BpYy1iZXRhJzogYmV0YXM/LnRvU3RyaW5nKCkgfSA6IHVuZGVmaW5lZCkgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zPy5oZWFkZXJzLFxuICAgICAgICAgICAgXSksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZGVscy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiUGFnZSIsImJ1aWxkSGVhZGVycyIsInBhdGgiLCJNb2RlbHMiLCJyZXRyaWV2ZSIsIm1vZGVsSUQiLCJwYXJhbXMiLCJvcHRpb25zIiwiYmV0YXMiLCJfY2xpZW50IiwiZ2V0IiwiaGVhZGVycyIsInRvU3RyaW5nIiwidW5kZWZpbmVkIiwibGlzdCIsInF1ZXJ5IiwiZ2V0QVBJTGlzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/resources/models.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/resources/shared.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/resources/shared.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n //# sourceMappingURL=shared.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvcmVzb3VyY2VzL3NoYXJlZC5tanMiLCJtYXBwaW5ncyI6IjtBQUFBLHNGQUFzRjtBQUM1RSxDQUNWLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FydGlmeS1hZ2VudC8uL25vZGVfbW9kdWxlcy9AYW50aHJvcGljLWFpL3Nkay9yZXNvdXJjZXMvc2hhcmVkLm1qcz8wODY4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5leHBvcnQge307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGFyZWQubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/resources/shared.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/streaming.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/streaming.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Stream: () => (/* reexport safe */ _core_streaming_mjs__WEBPACK_IMPORTED_MODULE_0__.Stream),\n/* harmony export */   _iterSSEMessages: () => (/* reexport safe */ _core_streaming_mjs__WEBPACK_IMPORTED_MODULE_0__._iterSSEMessages)\n/* harmony export */ });\n/* harmony import */ var _core_streaming_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/streaming.mjs */ \"(rsc)/./node_modules/@anthropic-ai/sdk/core/streaming.mjs\");\n //# sourceMappingURL=streaming.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvc3RyZWFtaW5nLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUMsQ0FDckMsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXJ0aWZ5LWFnZW50Ly4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3N0cmVhbWluZy5tanM/OWQ1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9jb3JlL3N0cmVhbWluZy5tanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmVhbWluZy5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/streaming.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@anthropic-ai/sdk/version.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@anthropic-ai/sdk/version.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\nconst VERSION = \"0.53.0\"; // x-release-please-version\n //# sourceMappingURL=version.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvdmVyc2lvbi5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFVBQVUsU0FBUyxDQUFDLDJCQUEyQjtDQUM1RCxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcnRpZnktYWdlbnQvLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvdmVyc2lvbi5tanM/ZTI4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgVkVSU0lPTiA9ICcwLjUzLjAnOyAvLyB4LXJlbGVhc2UtcGxlYXNlLXZlcnNpb25cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24ubWpzLm1hcCJdLCJuYW1lcyI6WyJWRVJTSU9OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/sdk/version.mjs\n");

/***/ })

};
;